/*
 * This file was automatically generated by EvoSuite
 * Thu Jun 18 22:57:07 GMT 2020
 */

package org.autotest;

import org.junit.Test;
import static org.junit.Assert.*;
import org.autotest.StackAr;

public class StackAr_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.hashCode();
      assertTrue(stackAr0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StackAr stackAr0 = null;
      try {
        stackAr0 = new StackAr((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      boolean boolean0 = stackAr0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StackAr stackAr0 = new StackAr(0);
      try { 
        stackAr0.push(stackAr0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      Object object0 = new Object();
      stackAr0.push(object0);
      assertEquals(1, stackAr0.size());
      
      stackAr0.pop();
      assertEquals(0, stackAr0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      try { 
        stackAr0.pop();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.push((Object) null);
      stackAr0.pop();
      try { 
        stackAr0.top();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      boolean boolean0 = stackAr0.equals("");
      assertFalse(boolean0);
      assertEquals(0, stackAr0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      boolean boolean0 = stackAr0.equals(stackAr0);
      assertEquals(0, stackAr0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      StackAr stackAr1 = new StackAr();
      stackAr0.push(stackAr1);
      Object object0 = stackAr0.top();
      boolean boolean0 = stackAr0.equals(object0);
      assertEquals(1, stackAr0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      StackAr stackAr1 = new StackAr();
      boolean boolean0 = stackAr0.equals(stackAr1);
      assertTrue(boolean0);
      assertEquals(0, stackAr1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.push((Object) null);
      StackAr stackAr1 = new StackAr();
      boolean boolean0 = stackAr0.equals(stackAr1);
      assertEquals(1, stackAr0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      Object object0 = new Object();
      stackAr0.push(object0);
      stackAr0.push(object0);
      stackAr0.toString();
      assertEquals(2, stackAr0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      int int0 = stackAr0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      Object object0 = new Object();
      stackAr0.push(object0);
      stackAr0.isEmpty();
      assertEquals(1, stackAr0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StackAr stackAr0 = new StackAr(0);
      boolean boolean0 = stackAr0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.isFull();
      assertTrue(stackAr0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      boolean boolean0 = stackAr0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, stackAr0.size());
  }

//   @Test(timeout = 4000)
//   public void test18()  throws Throwable  {
//       StackAr stackAr0 = new StackAr();
//       StackAr stackAr1 = new StackAr();
//       stackAr0.push(stackAr1);
//       stackAr1.push(stackAr0);
//       stackAr0.equals(stackAr1);
//   }

//   @Test(timeout = 4000)
//   public void test19()  throws Throwable  {
//       Object object0 = new Object();
//       // Undeclared exception!
//       try { 
//         object0.hashCode();
//         fail("Expecting exception: IllegalArgumentException");
      
//       } catch(IllegalArgumentException e) {
//       }
//   }

//   @Test(timeout = 4000)
//   public void test20()  throws Throwable  {
//       Object object0 = new Object();
//       // Undeclared exception!
//       try { 
//         ((StackAr) object0).top();
//         fail("Expecting exception: IllegalArgumentException");
      
//       } catch(IllegalArgumentException e) {
//       }
//   }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      Object object0 = new Object();
      stackAr0.push(object0);
      int int0 = stackAr0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StackAr stackAr0 = new StackAr();
      stackAr0.push((Object) null);
      stackAr0.top();
      assertEquals(1, stackAr0.size());
  }
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StackAr stackAr0 = new StackAr();

      stackAr0.push(1);
      stackAr0.push(1);
      String s = stackAr0.toString();
      assertEquals(s.equals("[1,1]"), true );

  }
  @Test(timeout = 4000)
    public void test24()  throws Throwable  {
      StackAr stackAr0 = new StackAr();


      assertEquals(stackAr0.hashCode() > 0, true );

  }
}
