import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(100, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction(10, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr(0);
        int int2 = stackAr1.size();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.String str4 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean8 = stackAr1.equals((java.lang.Object) (byte) -1);
        int int9 = stackAr1.size();
        boolean boolean10 = stackAr1.isFull();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr12.isEmpty();
        int int14 = stackAr12.size();
        boolean boolean15 = stackAr12.isFull();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.Object obj21 = new java.lang.Object();
        stackAr17.push(obj21);
        boolean boolean23 = stackAr17.isFull();
        java.lang.String str24 = stackAr17.toString();
        stackAr17.push((java.lang.Object) (byte) 0);
        stackAr12.push((java.lang.Object) stackAr17);
        boolean boolean28 = stackAr17.isFull();
        java.lang.Object[] objArray34 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean35 = org.autotest.StackAr.repOkFunction((int) 'a', objArray34);
        boolean boolean36 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray34);
        stackAr17.push((java.lang.Object) boolean36);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 100);
        boolean boolean42 = stackAr39.isEmpty();
        stackAr39.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr50 = new org.autotest.StackAr((int) '#');
        boolean boolean52 = stackAr50.equals((java.lang.Object) (byte) 1);
        boolean boolean53 = stackAr50.isFull();
        java.lang.Object obj54 = new java.lang.Object();
        stackAr50.push(obj54);
        stackAr46.push((java.lang.Object) stackAr50);
        int int57 = stackAr46.size();
        stackAr39.push((java.lang.Object) stackAr46);
        boolean boolean59 = stackAr17.equals((java.lang.Object) stackAr39);
        java.lang.String str60 = stackAr17.toString();
        int int61 = stackAr17.size();
        boolean boolean62 = stackAr1.equals((java.lang.Object) int61);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object obj13 = stackAr1.top();
        int int14 = stackAr1.size();
        java.lang.String str15 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[]]" + "'", str15, "[[]]");
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr5.isFull();
        java.lang.Class<?> wildcardClass13 = stackAr5.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr3.equals((java.lang.Object) (byte) 1);
        boolean boolean6 = stackAr3.isFull();
        boolean boolean7 = stackAr3.isFull();
        boolean boolean8 = stackAr3.isFull();
        int int9 = stackAr3.size();
        boolean boolean11 = stackAr3.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
        boolean boolean13 = stackAr12.isEmpty();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
        int int15 = stackAr14.size();
        stackAr12.push((java.lang.Object) int15);
        boolean boolean17 = stackAr3.equals((java.lang.Object) int15);
        stackAr1.push((java.lang.Object) boolean17);
        int int19 = stackAr1.size();
        java.lang.Class<?> wildcardClass20 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = new java.lang.Object();
        stackAr8.push(obj12);
        java.lang.String str14 = stackAr8.toString();
        boolean boolean15 = stackAr8.isEmpty();
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean21 = stackAr18.isEmpty();
        boolean boolean23 = stackAr18.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        stackAr25.push((java.lang.Object) '4');
        stackAr18.push((java.lang.Object) stackAr25);
        boolean boolean32 = stackAr18.isEmpty();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        int int36 = stackAr34.size();
        boolean boolean37 = stackAr34.isFull();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        boolean boolean45 = stackAr39.isFull();
        java.lang.String str46 = stackAr39.toString();
        stackAr39.push((java.lang.Object) (byte) 0);
        stackAr34.push((java.lang.Object) stackAr39);
        boolean boolean50 = stackAr18.equals((java.lang.Object) stackAr39);
        stackAr1.push((java.lang.Object) stackAr18);
        java.lang.Object obj52 = stackAr1.top();
        boolean boolean53 = stackAr1.isFull();
        int int54 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "[[4]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "[[4]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "[[4]]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        boolean boolean6 = stackAr4.isEmpty();
        int int7 = stackAr4.size();
        int int8 = stackAr4.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) stackAr4);
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr11.isEmpty();
        boolean boolean13 = stackAr11.isEmpty();
        int int14 = stackAr11.size();
        boolean boolean15 = stackAr11.isEmpty();
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        boolean boolean17 = stackAr1.isEmpty();
        boolean boolean18 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        java.lang.String str11 = stackAr0.toString();
        java.lang.String str12 = stackAr0.toString();
        java.lang.String str13 = stackAr0.toString();
        boolean boolean14 = stackAr0.isFull();
        java.lang.String str15 = stackAr0.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        boolean boolean1 = stackAr0.isEmpty();
        boolean boolean2 = stackAr0.isFull();
        int int3 = stackAr0.size();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr(0);
        int int5 = stackAr4.size();
        stackAr1.push((java.lang.Object) stackAr4);
        java.lang.Object obj7 = stackAr1.pop();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "[]");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        boolean boolean8 = stackAr1.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        boolean boolean14 = stackAr10.isFull();
        int int15 = stackAr10.size();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        stackAr17.push((java.lang.Object) "[]");
        stackAr10.push((java.lang.Object) stackAr17);
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr17);
        boolean boolean24 = stackAr17.isFull();
        boolean boolean25 = stackAr17.isFull();
        boolean boolean26 = stackAr17.isEmpty();
        boolean boolean27 = stackAr17.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = stackAr1.pop();
        boolean boolean9 = stackAr1.isEmpty();
        int int10 = stackAr1.size();
        int int11 = stackAr1.size();
        boolean boolean12 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[[]]" + "'", str7, "[[]]");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + "[]" + "'", obj8, "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        int int5 = stackAr1.size();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        boolean boolean14 = stackAr10.isFull();
        int int15 = stackAr10.size();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        stackAr17.push((java.lang.Object) "[]");
        stackAr10.push((java.lang.Object) stackAr17);
        java.lang.Object obj23 = stackAr17.pop();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr25.isEmpty();
        int int27 = stackAr25.size();
        boolean boolean28 = stackAr25.isFull();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 1);
        boolean boolean33 = stackAr30.isFull();
        java.lang.Object obj34 = new java.lang.Object();
        stackAr30.push(obj34);
        boolean boolean36 = stackAr30.isFull();
        java.lang.String str37 = stackAr30.toString();
        stackAr30.push((java.lang.Object) (byte) 0);
        stackAr25.push((java.lang.Object) stackAr30);
        boolean boolean41 = stackAr30.isFull();
        java.lang.Object[] objArray47 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean48 = org.autotest.StackAr.repOkFunction((int) 'a', objArray47);
        boolean boolean49 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray47);
        stackAr30.push((java.lang.Object) boolean49);
        org.autotest.StackAr stackAr52 = new org.autotest.StackAr((int) '#');
        boolean boolean54 = stackAr52.equals((java.lang.Object) (byte) 100);
        boolean boolean55 = stackAr52.isEmpty();
        stackAr52.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr59 = new org.autotest.StackAr((int) '#');
        boolean boolean61 = stackAr59.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) '#');
        boolean boolean65 = stackAr63.equals((java.lang.Object) (byte) 1);
        boolean boolean66 = stackAr63.isFull();
        java.lang.Object obj67 = new java.lang.Object();
        stackAr63.push(obj67);
        stackAr59.push((java.lang.Object) stackAr63);
        int int70 = stackAr59.size();
        stackAr52.push((java.lang.Object) stackAr59);
        boolean boolean72 = stackAr30.equals((java.lang.Object) stackAr52);
        java.lang.Object obj73 = stackAr52.top();
        java.lang.Object obj74 = stackAr52.pop();
        boolean boolean75 = stackAr17.equals((java.lang.Object) stackAr52);
        stackAr1.push((java.lang.Object) stackAr52);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + "[]" + "'", obj23, "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "[]" + "'", obj10, "[]");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isEmpty();
        java.lang.Object obj18 = stackAr1.pop();
        boolean boolean20 = stackAr1.equals((java.lang.Object) 0);
        boolean boolean21 = stackAr1.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        java.lang.Object obj27 = new java.lang.Object();
        stackAr23.push(obj27);
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr30.isEmpty();
        int int32 = stackAr30.size();
        boolean boolean33 = stackAr30.isEmpty();
        boolean boolean35 = stackAr30.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        boolean boolean40 = stackAr37.isFull();
        stackAr37.push((java.lang.Object) '4');
        stackAr30.push((java.lang.Object) stackAr37);
        stackAr23.push((java.lang.Object) stackAr30);
        boolean boolean45 = stackAr30.isEmpty();
        boolean boolean46 = stackAr30.isEmpty();
        boolean boolean47 = stackAr1.equals((java.lang.Object) boolean46);
        boolean boolean48 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "[4]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        java.lang.String str11 = stackAr0.toString();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr(0);
        boolean boolean14 = stackAr0.equals((java.lang.Object) 0);
        int int15 = stackAr0.size();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        int int20 = stackAr17.size();
        boolean boolean21 = stackAr0.equals((java.lang.Object) int20);
        java.lang.String str22 = stackAr0.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        java.lang.String str16 = stackAr1.toString();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr(0);
        int int19 = stackAr18.size();
        boolean boolean20 = stackAr1.equals((java.lang.Object) stackAr18);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean25 = stackAr22.isEmpty();
        boolean boolean26 = stackAr22.isEmpty();
        boolean boolean27 = stackAr22.isFull();
        int int28 = stackAr22.size();
        boolean boolean29 = stackAr1.equals((java.lang.Object) stackAr22);
        java.lang.Object obj30 = stackAr1.top();
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean34 = stackAr32.equals((java.lang.Object) (byte) 1);
        boolean boolean35 = stackAr32.isFull();
        boolean boolean36 = stackAr32.isFull();
        boolean boolean37 = stackAr32.isFull();
        int int38 = stackAr32.size();
        boolean boolean40 = stackAr32.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr42.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean47 = stackAr46.isEmpty();
        int int48 = stackAr46.size();
        boolean boolean50 = stackAr46.equals((java.lang.Object) 100L);
        boolean boolean51 = stackAr46.isFull();
        stackAr42.push((java.lang.Object) stackAr46);
        boolean boolean53 = stackAr42.isEmpty();
        java.lang.Object obj54 = stackAr42.top();
        int int55 = stackAr42.size();
        boolean boolean56 = stackAr32.equals((java.lang.Object) int55);
        stackAr1.push((java.lang.Object) int55);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[[4]]" + "'", str16, "[[4]]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "[4]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        java.lang.Object obj26 = new java.lang.Object();
        stackAr22.push(obj26);
        boolean boolean28 = stackAr22.isFull();
        java.lang.String str29 = stackAr22.toString();
        stackAr22.push((java.lang.Object) (byte) 0);
        stackAr17.push((java.lang.Object) stackAr22);
        boolean boolean33 = stackAr1.equals((java.lang.Object) stackAr22);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr(0);
        int int36 = stackAr35.size();
        boolean boolean37 = stackAr22.equals((java.lang.Object) stackAr35);
        boolean boolean38 = stackAr35.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isFull();
        boolean boolean16 = stackAr1.isEmpty();
        boolean boolean17 = stackAr1.isEmpty();
        boolean boolean18 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        java.lang.String str5 = stackAr1.toString();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isFull();
        int int13 = stackAr7.size();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr15.isEmpty();
        int int17 = stackAr15.size();
        boolean boolean18 = stackAr15.isEmpty();
        boolean boolean19 = stackAr7.equals((java.lang.Object) stackAr15);
        java.lang.String str20 = stackAr15.toString();
        boolean boolean21 = stackAr1.equals((java.lang.Object) str20);
        java.lang.String str22 = stackAr1.toString();
        boolean boolean23 = stackAr1.isEmpty();
        boolean boolean24 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        java.lang.String str24 = stackAr20.toString();
        java.lang.Object[] objArray32 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) 'a', objArray32);
        boolean boolean34 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray32);
        boolean boolean35 = org.autotest.StackAr.repOkFunction(100, objArray32);
        boolean boolean36 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray32);
        stackAr20.push((java.lang.Object) objArray32);
        boolean boolean38 = org.autotest.StackAr.repOkFunction(10, objArray32);
        boolean boolean39 = org.autotest.StackAr.repOkFunction(0, objArray32);
        boolean boolean40 = org.autotest.StackAr.repOkFunction((int) ' ', objArray32);
        stackAr1.push((java.lang.Object) ' ');
        java.lang.Object obj42 = stackAr1.pop();
        org.autotest.StackAr stackAr44 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr44.isEmpty();
        boolean boolean47 = stackAr44.equals((java.lang.Object) '#');
        int int48 = stackAr44.size();
        java.lang.String str49 = stackAr44.toString();
        boolean boolean50 = stackAr1.equals((java.lang.Object) stackAr44);
        org.autotest.StackAr stackAr52 = new org.autotest.StackAr((int) '#');
        boolean boolean54 = stackAr52.equals((java.lang.Object) (byte) 1);
        boolean boolean55 = stackAr52.isFull();
        stackAr52.push((java.lang.Object) '4');
        java.lang.String str58 = stackAr52.toString();
        java.lang.Class<?> wildcardClass59 = stackAr52.getClass();
        boolean boolean60 = stackAr44.equals((java.lang.Object) stackAr52);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + ' ' + "'", obj42, ' ');
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[4]" + "'", str58, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 1);
        boolean boolean17 = stackAr14.isFull();
        boolean boolean18 = stackAr14.isFull();
        int int19 = stackAr14.size();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr21.isEmpty();
        boolean boolean23 = stackAr21.isEmpty();
        int int24 = stackAr21.size();
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr26.equals((java.lang.Object) (byte) 1);
        stackAr26.push((java.lang.Object) "[]");
        java.lang.Object obj31 = stackAr26.pop();
        boolean boolean32 = stackAr21.equals((java.lang.Object) stackAr26);
        boolean boolean33 = stackAr14.equals((java.lang.Object) stackAr26);
        stackAr1.push((java.lang.Object) stackAr14);
        boolean boolean35 = stackAr14.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + "[]" + "'", obj31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr(0);
        int int5 = stackAr4.size();
        stackAr1.push((java.lang.Object) stackAr4);
        java.lang.Object obj7 = stackAr1.pop();
        boolean boolean8 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        boolean boolean14 = stackAr10.isFull();
        boolean boolean15 = stackAr10.isFull();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        boolean boolean19 = stackAr17.isEmpty();
        int int20 = stackAr17.size();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr17.isEmpty();
        boolean boolean23 = stackAr10.equals((java.lang.Object) boolean22);
        stackAr10.push((java.lang.Object) "[4]");
        java.lang.String str26 = stackAr10.toString();
        stackAr1.push((java.lang.Object) str26);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[[4]]" + "'", str26, "[[4]]");
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isEmpty();
        boolean boolean13 = stackAr1.equals((java.lang.Object) stackAr9);
        boolean boolean14 = stackAr1.isFull();
        boolean boolean15 = stackAr1.isFull();
        boolean boolean16 = stackAr1.isEmpty();
        java.lang.String str17 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(10, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        java.lang.Object[] objArray11 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) 'a', objArray11);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(0, objArray11);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray11);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray11);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray11);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray11);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) 'a', objArray11);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((-1), objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        stackAr6.push((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        boolean boolean31 = stackAr28.isEmpty();
        stackAr28.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        stackAr35.push((java.lang.Object) stackAr39);
        int int46 = stackAr35.size();
        stackAr28.push((java.lang.Object) stackAr35);
        boolean boolean48 = stackAr6.equals((java.lang.Object) stackAr28);
        java.lang.Object obj49 = stackAr28.top();
        int int50 = stackAr28.size();
        org.autotest.StackAr stackAr52 = new org.autotest.StackAr((int) '#');
        boolean boolean53 = stackAr52.isEmpty();
        boolean boolean54 = stackAr52.isEmpty();
        boolean boolean55 = stackAr52.isFull();
        org.autotest.StackAr stackAr57 = new org.autotest.StackAr((int) '#');
        boolean boolean59 = stackAr57.equals((java.lang.Object) (byte) 1);
        boolean boolean60 = stackAr57.isFull();
        stackAr57.push((java.lang.Object) '4');
        java.lang.String str63 = stackAr57.toString();
        java.lang.Object obj64 = stackAr57.top();
        boolean boolean65 = stackAr57.isEmpty();
        boolean boolean66 = stackAr52.equals((java.lang.Object) boolean65);
        org.autotest.StackAr stackAr68 = new org.autotest.StackAr((int) '#');
        boolean boolean70 = stackAr68.equals((java.lang.Object) (byte) 1);
        boolean boolean71 = stackAr68.isFull();
        java.lang.Object obj72 = new java.lang.Object();
        stackAr68.push(obj72);
        boolean boolean75 = stackAr68.equals((java.lang.Object) (byte) -1);
        int int76 = stackAr68.size();
        java.lang.Object obj77 = stackAr68.top();
        boolean boolean78 = stackAr52.equals((java.lang.Object) stackAr68);
        stackAr28.push((java.lang.Object) stackAr68);
        java.lang.String str80 = stackAr68.toString();
        boolean boolean81 = stackAr68.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[4]" + "'", str63, "[4]");
        org.junit.Assert.assertEquals("'" + obj64 + "' != '" + '4' + "'", obj64, '4');
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        int int11 = stackAr1.size();
        java.lang.String str12 = stackAr1.toString();
        int int13 = stackAr1.size();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        stackAr15.push((java.lang.Object) stackAr19);
        boolean boolean26 = stackAr19.isFull();
        boolean boolean27 = stackAr19.isEmpty();
        boolean boolean28 = stackAr1.equals((java.lang.Object) stackAr19);
        java.lang.Object obj29 = stackAr19.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        java.lang.Object[] objArray11 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) 'a', objArray11);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(0, objArray11);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray11);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray11);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(2, objArray11);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray11);
        boolean boolean18 = org.autotest.StackAr.repOkFunction(10, objArray11);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) ' ', objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        java.lang.String str2 = stackAr1.toString();
        boolean boolean4 = stackAr1.equals((java.lang.Object) 10L);
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr16.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        int int23 = stackAr19.size();
        boolean boolean24 = stackAr16.equals((java.lang.Object) stackAr19);
        boolean boolean25 = stackAr8.equals((java.lang.Object) boolean24);
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = stackAr27.isEmpty();
        boolean boolean31 = stackAr27.isEmpty();
        java.lang.String str32 = stackAr27.toString();
        boolean boolean33 = stackAr27.isEmpty();
        int int34 = stackAr27.size();
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 100);
        boolean boolean39 = stackAr36.isEmpty();
        boolean boolean40 = stackAr36.isEmpty();
        boolean boolean41 = stackAr27.equals((java.lang.Object) stackAr36);
        stackAr8.push((java.lang.Object) stackAr36);
        java.lang.Object obj43 = stackAr8.top();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "[]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        boolean boolean8 = stackAr1.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        boolean boolean14 = stackAr10.isFull();
        int int15 = stackAr10.size();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        stackAr17.push((java.lang.Object) "[]");
        stackAr10.push((java.lang.Object) stackAr17);
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr17);
        java.lang.Object obj24 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + '4' + "'", obj24, '4');
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        boolean boolean9 = stackAr1.isEmpty();
        int int10 = stackAr1.size();
        java.lang.Object obj11 = stackAr1.pop();
        java.lang.Class<?> wildcardClass12 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        int int12 = stackAr1.size();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean22 = stackAr18.equals((java.lang.Object) 100L);
        boolean boolean23 = stackAr18.isFull();
        stackAr14.push((java.lang.Object) stackAr18);
        boolean boolean25 = stackAr14.isEmpty();
        boolean boolean26 = stackAr1.equals((java.lang.Object) stackAr14);
        boolean boolean27 = stackAr14.isEmpty();
        java.lang.Class<?> wildcardClass28 = stackAr14.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isEmpty();
        boolean boolean13 = stackAr1.equals((java.lang.Object) stackAr9);
        java.lang.String str14 = stackAr9.toString();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str17 = stackAr16.toString();
        stackAr9.push((java.lang.Object) stackAr16);
        boolean boolean19 = stackAr16.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = stackAr16.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        java.lang.String str7 = stackAr1.toString();
        java.lang.String str8 = stackAr1.toString();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.top();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
        boolean boolean12 = stackAr11.isEmpty();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr();
        int int14 = stackAr13.size();
        stackAr11.push((java.lang.Object) int14);
        java.lang.String str16 = stackAr11.toString();
        java.lang.Object obj17 = stackAr11.top();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) 'a');
        boolean boolean20 = stackAr11.equals((java.lang.Object) 'a');
        stackAr1.push((java.lang.Object) boolean20);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[[]]" + "'", str7, "[[]]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[[]]" + "'", str8, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "[]" + "'", obj10, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[0]" + "'", str16, "[0]");
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + 0 + "'", obj17, 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr6.isEmpty();
        int int8 = stackAr6.size();
        boolean boolean9 = stackAr6.isEmpty();
        boolean boolean11 = stackAr6.equals((java.lang.Object) (short) -1);
        stackAr1.push((java.lang.Object) (short) -1);
        boolean boolean13 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass14 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.String str3 = stackAr1.toString();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        stackAr5.push((java.lang.Object) "[]");
        int int10 = stackAr5.size();
        java.lang.Object obj11 = stackAr5.top();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) (short) 100);
        boolean boolean14 = stackAr5.equals((java.lang.Object) (short) 100);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
        int int16 = stackAr15.size();
        java.lang.Object[] objArray22 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) 'a', objArray22);
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray22);
        boolean boolean25 = stackAr15.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        java.lang.Object obj31 = new java.lang.Object();
        stackAr27.push(obj31);
        boolean boolean34 = stackAr27.equals((java.lang.Object) (byte) -1);
        boolean boolean35 = stackAr15.equals((java.lang.Object) boolean34);
        boolean boolean36 = stackAr15.isFull();
        boolean boolean37 = stackAr5.equals((java.lang.Object) boolean36);
        boolean boolean38 = stackAr1.equals((java.lang.Object) boolean36);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "[]" + "'", obj11, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        java.lang.String str3 = stackAr1.toString();
        java.lang.String str4 = stackAr1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean25 = stackAr24.isEmpty();
        stackAr19.push((java.lang.Object) stackAr24);
        boolean boolean27 = stackAr1.equals((java.lang.Object) stackAr19);
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean30 = stackAr29.isFull();
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr32.isEmpty();
        boolean boolean34 = stackAr32.isEmpty();
        int int35 = stackAr32.size();
        int int36 = stackAr32.size();
        boolean boolean37 = stackAr29.equals((java.lang.Object) stackAr32);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr39.isEmpty();
        boolean boolean41 = stackAr39.isEmpty();
        int int42 = stackAr39.size();
        boolean boolean43 = stackAr39.isEmpty();
        java.lang.Class<?> wildcardClass44 = stackAr39.getClass();
        stackAr29.push((java.lang.Object) stackAr39);
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean49 = stackAr47.equals((java.lang.Object) (byte) 1);
        boolean boolean50 = stackAr47.isFull();
        boolean boolean51 = stackAr47.isFull();
        boolean boolean52 = stackAr47.isFull();
        int int53 = stackAr47.size();
        org.autotest.StackAr stackAr55 = new org.autotest.StackAr((int) '#');
        boolean boolean57 = stackAr55.equals((java.lang.Object) (byte) 1);
        boolean boolean58 = stackAr55.isFull();
        java.lang.Object obj59 = new java.lang.Object();
        stackAr55.push(obj59);
        boolean boolean61 = stackAr47.equals(obj59);
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) '#');
        boolean boolean65 = stackAr63.equals((java.lang.Object) (byte) 1);
        boolean boolean66 = stackAr63.isFull();
        boolean boolean67 = stackAr63.isFull();
        boolean boolean68 = stackAr63.isFull();
        int int69 = stackAr63.size();
        org.autotest.StackAr stackAr71 = new org.autotest.StackAr((int) '#');
        boolean boolean73 = stackAr71.equals((java.lang.Object) (byte) 1);
        boolean boolean74 = stackAr71.isFull();
        java.lang.Object obj75 = new java.lang.Object();
        stackAr71.push(obj75);
        boolean boolean77 = stackAr63.equals(obj75);
        stackAr47.push((java.lang.Object) stackAr63);
        stackAr39.push((java.lang.Object) stackAr63);
        org.autotest.StackAr stackAr81 = new org.autotest.StackAr((int) '#');
        boolean boolean83 = stackAr81.equals((java.lang.Object) (byte) 1);
        boolean boolean84 = stackAr81.isFull();
        boolean boolean85 = stackAr81.isFull();
        boolean boolean86 = stackAr81.isFull();
        int int87 = stackAr81.size();
        org.autotest.StackAr stackAr89 = new org.autotest.StackAr((int) '#');
        boolean boolean90 = stackAr89.isEmpty();
        int int91 = stackAr89.size();
        boolean boolean92 = stackAr89.isEmpty();
        boolean boolean93 = stackAr81.equals((java.lang.Object) stackAr89);
        java.lang.Class<?> wildcardClass94 = stackAr89.getClass();
        boolean boolean95 = stackAr63.equals((java.lang.Object) wildcardClass94);
        stackAr19.push((java.lang.Object) stackAr63);
        int int97 = stackAr63.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        stackAr6.push((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        boolean boolean31 = stackAr28.isEmpty();
        stackAr28.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        stackAr35.push((java.lang.Object) stackAr39);
        int int46 = stackAr35.size();
        stackAr28.push((java.lang.Object) stackAr35);
        boolean boolean48 = stackAr6.equals((java.lang.Object) stackAr28);
        java.lang.Class<?> wildcardClass49 = stackAr28.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        stackAr6.push((java.lang.Object) "[]");
        int int11 = stackAr6.size();
        java.lang.Object obj12 = stackAr6.top();
        java.lang.String str13 = stackAr6.toString();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr6);
        java.lang.String str15 = stackAr1.toString();
        boolean boolean16 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "[]" + "'", obj12, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[[]]" + "'", str13, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        java.lang.Object[] objArray4 = new java.lang.Object[] { 1.0d };
        boolean boolean5 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray4);
        boolean boolean6 = org.autotest.StackAr.repOkFunction((int) '4', objArray4);
        boolean boolean7 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray4);
        java.lang.Class<?> wildcardClass8 = objArray4.getClass();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        java.lang.Object obj17 = stackAr1.pop();
        java.lang.Object[] objArray27 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) 'a', objArray27);
        boolean boolean29 = org.autotest.StackAr.repOkFunction(0, objArray27);
        boolean boolean30 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray27);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray27);
        boolean boolean32 = org.autotest.StackAr.repOkFunction(0, objArray27);
        boolean boolean33 = org.autotest.StackAr.repOkFunction((-1), objArray27);
        boolean boolean34 = stackAr1.equals((java.lang.Object) boolean33);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(0, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(1, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((-1), objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((-1), objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) '4');
        java.lang.Object obj13 = null;
        boolean boolean14 = stackAr7.equals(obj13);
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj16 = stackAr7.top();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + '4' + "'", obj16, '4');
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = new java.lang.Object();
        stackAr8.push(obj12);
        java.lang.String str14 = stackAr8.toString();
        boolean boolean15 = stackAr8.isEmpty();
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean21 = stackAr18.isEmpty();
        boolean boolean23 = stackAr18.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        stackAr25.push((java.lang.Object) '4');
        stackAr18.push((java.lang.Object) stackAr25);
        boolean boolean32 = stackAr18.isEmpty();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        int int36 = stackAr34.size();
        boolean boolean37 = stackAr34.isFull();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        boolean boolean45 = stackAr39.isFull();
        java.lang.String str46 = stackAr39.toString();
        stackAr39.push((java.lang.Object) (byte) 0);
        stackAr34.push((java.lang.Object) stackAr39);
        boolean boolean50 = stackAr18.equals((java.lang.Object) stackAr39);
        stackAr1.push((java.lang.Object) stackAr18);
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean55 = stackAr53.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr57 = new org.autotest.StackAr((int) '#');
        boolean boolean58 = stackAr57.isEmpty();
        int int59 = stackAr57.size();
        boolean boolean61 = stackAr57.equals((java.lang.Object) 100L);
        boolean boolean62 = stackAr57.isFull();
        stackAr53.push((java.lang.Object) stackAr57);
        java.lang.Object obj64 = stackAr53.top();
        org.autotest.StackAr stackAr66 = new org.autotest.StackAr((int) '#');
        boolean boolean67 = stackAr66.isEmpty();
        int int68 = stackAr66.size();
        boolean boolean69 = stackAr66.isEmpty();
        boolean boolean71 = stackAr66.equals((java.lang.Object) (short) -1);
        stackAr53.push((java.lang.Object) stackAr66);
        stackAr18.push((java.lang.Object) stackAr66);
        java.lang.Object obj74 = stackAr18.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "[]");
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
        int int12 = stackAr11.size();
        java.lang.Object[] objArray18 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) 'a', objArray18);
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray18);
        boolean boolean21 = stackAr11.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        java.lang.Object obj27 = new java.lang.Object();
        stackAr23.push(obj27);
        boolean boolean30 = stackAr23.equals((java.lang.Object) (byte) -1);
        boolean boolean31 = stackAr11.equals((java.lang.Object) boolean30);
        boolean boolean32 = stackAr11.isFull();
        boolean boolean33 = stackAr1.equals((java.lang.Object) boolean32);
        int int34 = stackAr1.size();
        int int35 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction(100, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((-1), objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) '4', objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr5.isFull();
        boolean boolean13 = stackAr5.isEmpty();
        java.lang.Object obj14 = stackAr5.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        boolean boolean6 = stackAr4.isEmpty();
        int int7 = stackAr4.size();
        int int8 = stackAr4.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) stackAr4);
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr11.isEmpty();
        boolean boolean13 = stackAr11.isEmpty();
        int int14 = stackAr11.size();
        boolean boolean15 = stackAr11.isEmpty();
        java.lang.Class<?> wildcardClass16 = stackAr11.getClass();
        stackAr1.push((java.lang.Object) stackAr11);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        boolean boolean23 = stackAr19.isFull();
        boolean boolean24 = stackAr19.isFull();
        int int25 = stackAr19.size();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        java.lang.Object obj31 = new java.lang.Object();
        stackAr27.push(obj31);
        boolean boolean33 = stackAr19.equals(obj31);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        boolean boolean38 = stackAr35.isFull();
        boolean boolean39 = stackAr35.isFull();
        boolean boolean40 = stackAr35.isFull();
        int int41 = stackAr35.size();
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 1);
        boolean boolean46 = stackAr43.isFull();
        java.lang.Object obj47 = new java.lang.Object();
        stackAr43.push(obj47);
        boolean boolean49 = stackAr35.equals(obj47);
        stackAr19.push((java.lang.Object) stackAr35);
        stackAr11.push((java.lang.Object) stackAr35);
        java.lang.String str52 = stackAr11.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[[]]" + "'", str52, "[[]]");
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        java.lang.Object[] objArray11 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) 'a', objArray11);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray11);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(100, objArray11);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray11);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray11);
        boolean boolean17 = org.autotest.StackAr.repOkFunction(100, objArray11);
        boolean boolean18 = org.autotest.StackAr.repOkFunction(0, objArray11);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((-1), objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        stackAr6.push((java.lang.Object) '4');
        java.lang.String str12 = stackAr6.toString();
        java.lang.Object obj13 = stackAr6.top();
        boolean boolean14 = stackAr6.isEmpty();
        boolean boolean15 = stackAr1.equals((java.lang.Object) boolean14);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.Object obj21 = new java.lang.Object();
        stackAr17.push(obj21);
        boolean boolean24 = stackAr17.equals((java.lang.Object) (byte) -1);
        int int25 = stackAr17.size();
        java.lang.Object obj26 = stackAr17.top();
        boolean boolean27 = stackAr1.equals((java.lang.Object) stackAr17);
        java.lang.Object obj28 = stackAr17.top();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr34.equals((java.lang.Object) (byte) 1);
        boolean boolean37 = stackAr34.isFull();
        java.lang.Object obj38 = new java.lang.Object();
        stackAr34.push(obj38);
        stackAr30.push((java.lang.Object) stackAr34);
        int int41 = stackAr30.size();
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr47.isEmpty();
        int int49 = stackAr47.size();
        boolean boolean51 = stackAr47.equals((java.lang.Object) 100L);
        boolean boolean52 = stackAr47.isFull();
        stackAr43.push((java.lang.Object) stackAr47);
        boolean boolean54 = stackAr43.isEmpty();
        boolean boolean55 = stackAr30.equals((java.lang.Object) stackAr43);
        int int56 = stackAr30.size();
        org.autotest.StackAr stackAr58 = new org.autotest.StackAr((int) '#');
        boolean boolean60 = stackAr58.equals((java.lang.Object) (byte) 1);
        boolean boolean61 = stackAr58.isFull();
        java.lang.Object obj62 = new java.lang.Object();
        stackAr58.push(obj62);
        boolean boolean64 = stackAr58.isFull();
        java.lang.String str65 = stackAr58.toString();
        java.lang.Object obj66 = stackAr58.top();
        java.lang.Object obj67 = stackAr58.top();
        boolean boolean68 = stackAr30.equals((java.lang.Object) stackAr58);
        stackAr17.push((java.lang.Object) stackAr30);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[4]" + "'", str12, "[4]");
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + '4' + "'", obj13, '4');
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        stackAr6.push((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        boolean boolean31 = stackAr28.isEmpty();
        stackAr28.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        stackAr35.push((java.lang.Object) stackAr39);
        int int46 = stackAr35.size();
        stackAr28.push((java.lang.Object) stackAr35);
        boolean boolean48 = stackAr6.equals((java.lang.Object) stackAr28);
        java.lang.Object obj49 = stackAr28.top();
        java.lang.Object obj50 = stackAr28.pop();
        java.lang.String str51 = stackAr28.toString();
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean55 = stackAr53.equals((java.lang.Object) (byte) 1);
        boolean boolean56 = stackAr53.isFull();
        boolean boolean57 = stackAr53.isFull();
        boolean boolean58 = stackAr53.isFull();
        int int59 = stackAr53.size();
        boolean boolean60 = stackAr53.isEmpty();
        org.autotest.StackAr stackAr62 = new org.autotest.StackAr((int) '#');
        boolean boolean64 = stackAr62.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr66 = new org.autotest.StackAr((int) '#');
        boolean boolean67 = stackAr66.isEmpty();
        int int68 = stackAr66.size();
        boolean boolean70 = stackAr66.equals((java.lang.Object) 100L);
        boolean boolean71 = stackAr66.isFull();
        stackAr62.push((java.lang.Object) stackAr66);
        boolean boolean73 = stackAr53.equals((java.lang.Object) stackAr62);
        int int74 = stackAr53.size();
        boolean boolean75 = stackAr28.equals((java.lang.Object) int74);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[0]" + "'", str51, "[0]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr11.isEmpty();
        int int13 = stackAr11.size();
        boolean boolean14 = stackAr11.isEmpty();
        boolean boolean16 = stackAr11.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        stackAr18.push((java.lang.Object) '4');
        stackAr11.push((java.lang.Object) stackAr18);
        java.lang.String str25 = stackAr18.toString();
        int int26 = stackAr18.size();
        boolean boolean27 = stackAr18.isFull();
        boolean boolean28 = stackAr1.equals((java.lang.Object) boolean27);
        java.lang.Class<?> wildcardClass29 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        int int6 = stackAr1.size();
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        java.lang.String str9 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr(0);
        int int5 = stackAr4.size();
        stackAr1.push((java.lang.Object) stackAr4);
        java.lang.Object obj7 = stackAr1.pop();
        boolean boolean8 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        int int5 = stackAr1.size();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object[] objArray16 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) 'a', objArray16);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray16);
        boolean boolean19 = org.autotest.StackAr.repOkFunction(100, objArray16);
        boolean boolean20 = org.autotest.StackAr.repOkFunction(100, objArray16);
        stackAr1.push((java.lang.Object) 100);
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        stackAr23.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 1);
        boolean boolean33 = stackAr30.isFull();
        java.lang.Object obj34 = new java.lang.Object();
        stackAr30.push(obj34);
        boolean boolean36 = stackAr30.isFull();
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr38.equals((java.lang.Object) (byte) 1);
        boolean boolean41 = stackAr38.isFull();
        java.lang.Object obj42 = new java.lang.Object();
        stackAr38.push(obj42);
        boolean boolean44 = stackAr38.isFull();
        java.lang.String str45 = stackAr38.toString();
        boolean boolean46 = stackAr30.equals((java.lang.Object) str45);
        boolean boolean47 = stackAr30.isEmpty();
        boolean boolean48 = stackAr30.isFull();
        boolean boolean49 = stackAr30.isFull();
        boolean boolean50 = stackAr23.equals((java.lang.Object) stackAr30);
        stackAr1.push((java.lang.Object) boolean50);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        stackAr8.push((java.lang.Object) stackAr12);
        int int19 = stackAr8.size();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj21 = stackAr1.pop();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        boolean boolean27 = stackAr23.isFull();
        boolean boolean28 = stackAr23.isFull();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str31 = stackAr30.toString();
        boolean boolean32 = stackAr30.isFull();
        stackAr30.push((java.lang.Object) 1);
        boolean boolean35 = stackAr30.isEmpty();
        boolean boolean36 = stackAr23.equals((java.lang.Object) stackAr30);
        java.lang.Object obj37 = stackAr30.top();
        java.lang.Object obj38 = stackAr30.pop();
        stackAr1.push(obj38);
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean43 = stackAr41.equals((java.lang.Object) (byte) 1);
        boolean boolean44 = stackAr41.isFull();
        stackAr41.push((java.lang.Object) '4');
        java.lang.String str47 = stackAr41.toString();
        java.lang.Object obj48 = stackAr41.pop();
        stackAr1.push(obj48);
        java.lang.String str50 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + 1 + "'", obj37, 1);
        org.junit.Assert.assertEquals("'" + obj38 + "' != '" + 1 + "'", obj38, 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[4]" + "'", str47, "[4]");
        org.junit.Assert.assertEquals("'" + obj48 + "' != '" + '4' + "'", obj48, '4');
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[0,1,4]" + "'", str50, "[0,1,4]");
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr8.toString();
        boolean boolean16 = stackAr8.isFull();
        boolean boolean17 = stackAr8.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        java.lang.String str7 = stackAr1.toString();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[[]]" + "'", str7, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + "[]" + "'", obj9, "[]");
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        int int9 = stackAr1.size();
        int int10 = stackAr1.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        boolean boolean16 = stackAr12.isFull();
        boolean boolean17 = stackAr12.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str20 = stackAr19.toString();
        boolean boolean21 = stackAr19.isFull();
        stackAr19.push((java.lang.Object) 1);
        boolean boolean24 = stackAr19.isEmpty();
        boolean boolean25 = stackAr12.equals((java.lang.Object) stackAr19);
        java.lang.Object obj26 = stackAr19.top();
        boolean boolean27 = stackAr19.isFull();
        boolean boolean28 = stackAr1.equals((java.lang.Object) boolean27);
        java.lang.Class<?> wildcardClass29 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + 1 + "'", obj26, 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        java.lang.String str14 = stackAr8.toString();
        java.lang.Object obj15 = stackAr8.top();
        stackAr1.push((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        boolean boolean22 = stackAr18.isFull();
        int int23 = stackAr18.size();
        java.lang.Class<?> wildcardClass24 = stackAr18.getClass();
        stackAr1.push((java.lang.Object) stackAr18);
        boolean boolean26 = stackAr18.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[4]" + "'", str14, "[4]");
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '4' + "'", obj15, '4');
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean8 = stackAr1.equals((java.lang.Object) (byte) -1);
        int int9 = stackAr1.size();
        boolean boolean10 = stackAr1.isFull();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr12.isEmpty();
        int int14 = stackAr12.size();
        boolean boolean15 = stackAr12.isEmpty();
        boolean boolean17 = stackAr12.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        stackAr19.push((java.lang.Object) '4');
        stackAr12.push((java.lang.Object) stackAr19);
        boolean boolean26 = stackAr12.isEmpty();
        boolean boolean27 = stackAr12.isFull();
        stackAr1.push((java.lang.Object) stackAr12);
        java.lang.Object obj29 = stackAr1.top();
        java.lang.Object obj30 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "[[4]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "[[4]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "[[4]]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "[[4]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "[[4]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "[[4]]");
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        java.lang.String str9 = stackAr8.toString();
        boolean boolean11 = stackAr8.equals((java.lang.Object) 10L);
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr8);
        int int13 = stackAr8.size();
        int int14 = stackAr8.size();
        boolean boolean15 = stackAr8.isFull();
        boolean boolean16 = stackAr8.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "[]" + "'", obj6, "[]");
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "[]" + "'", obj7, "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        java.lang.String str15 = stackAr8.toString();
        java.lang.Class<?> wildcardClass16 = stackAr8.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(0, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction(0, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((-1), objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction(0, objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 100);
        boolean boolean8 = stackAr5.isEmpty();
        boolean boolean9 = stackAr5.isFull();
        boolean boolean10 = stackAr1.equals((java.lang.Object) boolean9);
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.String str12 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        stackAr6.push((java.lang.Object) "[]");
        int int11 = stackAr6.size();
        java.lang.Object obj12 = stackAr6.top();
        java.lang.String str13 = stackAr6.toString();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr6);
        java.lang.String str15 = stackAr1.toString();
        boolean boolean16 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "[]" + "'", obj12, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[[]]" + "'", str13, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isFull();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isEmpty();
        boolean boolean21 = stackAr17.isEmpty();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        stackAr1.push((java.lang.Object) int23);
        boolean boolean25 = stackAr1.isEmpty();
        int int26 = stackAr1.size();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        java.lang.Object obj32 = new java.lang.Object();
        stackAr28.push(obj32);
        boolean boolean35 = stackAr28.equals((java.lang.Object) (byte) -1);
        int int36 = stackAr28.size();
        boolean boolean37 = stackAr28.isFull();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr39.isEmpty();
        int int41 = stackAr39.size();
        boolean boolean42 = stackAr39.isEmpty();
        boolean boolean44 = stackAr39.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        stackAr46.push((java.lang.Object) '4');
        stackAr39.push((java.lang.Object) stackAr46);
        boolean boolean53 = stackAr39.isEmpty();
        boolean boolean54 = stackAr39.isFull();
        stackAr28.push((java.lang.Object) stackAr39);
        java.lang.Object obj56 = stackAr39.top();
        stackAr1.push(obj56);
        int int58 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "[4]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr6.isEmpty();
        int int8 = stackAr6.size();
        boolean boolean9 = stackAr6.isEmpty();
        boolean boolean11 = stackAr6.equals((java.lang.Object) (short) -1);
        stackAr1.push((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 1);
        boolean boolean17 = stackAr14.isFull();
        stackAr14.push((java.lang.Object) '4');
        java.lang.String str20 = stackAr14.toString();
        int int21 = stackAr14.size();
        java.lang.Object obj22 = stackAr14.top();
        java.lang.String str23 = stackAr14.toString();
        stackAr1.push((java.lang.Object) str23);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[4]" + "'", str20, "[4]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + '4' + "'", obj22, '4');
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[4]" + "'", str23, "[4]");
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        java.lang.String str16 = stackAr1.toString();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr(0);
        int int19 = stackAr18.size();
        boolean boolean20 = stackAr1.equals((java.lang.Object) stackAr18);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean25 = stackAr22.isEmpty();
        boolean boolean26 = stackAr22.isEmpty();
        boolean boolean27 = stackAr22.isFull();
        int int28 = stackAr22.size();
        boolean boolean29 = stackAr1.equals((java.lang.Object) stackAr22);
        java.lang.Object obj30 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[[4]]" + "'", str16, "[[4]]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "[4]");
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        java.lang.Object[] objArray13 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) 'a', objArray13);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray13);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(100, objArray13);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray13);
        stackAr1.push((java.lang.Object) objArray13);
        java.lang.Object obj19 = null;
        stackAr1.push(obj19);
        java.lang.Object obj21 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        java.lang.String str22 = stackAr8.toString();
        java.lang.String str23 = stackAr8.toString();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Class<?> wildcardClass25 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[[4]]" + "'", str22, "[[4]]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[[4]]" + "'", str23, "[[4]]");
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr3.equals((java.lang.Object) (byte) 1);
        boolean boolean6 = stackAr3.isFull();
        java.lang.Object obj7 = new java.lang.Object();
        stackAr3.push(obj7);
        boolean boolean9 = stackAr3.isFull();
        java.lang.String str10 = stackAr3.toString();
        java.lang.Object obj11 = stackAr3.top();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        java.lang.String str14 = stackAr13.toString();
        boolean boolean15 = stackAr3.equals((java.lang.Object) str14);
        stackAr0.push((java.lang.Object) stackAr3);
        java.lang.String str17 = stackAr0.toString();
        java.lang.Class<?> wildcardClass18 = stackAr0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        java.lang.String str16 = stackAr1.toString();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr(0);
        int int19 = stackAr18.size();
        boolean boolean20 = stackAr1.equals((java.lang.Object) stackAr18);
        java.lang.String str21 = stackAr18.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = stackAr18.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[[4]]" + "'", str16, "[[4]]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) '4');
        java.lang.Object obj13 = null;
        boolean boolean14 = stackAr7.equals(obj13);
        stackAr1.push((java.lang.Object) stackAr7);
        boolean boolean16 = stackAr1.isEmpty();
        java.lang.Object obj17 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "[4]");
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.Object obj7 = null;
        boolean boolean8 = stackAr1.equals(obj7);
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.top();
        boolean boolean11 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + '4' + "'", obj10, '4');
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isEmpty();
        java.lang.String str18 = stackAr6.toString();
        java.lang.Object obj19 = stackAr6.pop();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr21.isEmpty();
        int int23 = stackAr21.size();
        boolean boolean24 = stackAr21.isEmpty();
        boolean boolean26 = stackAr21.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        stackAr28.push((java.lang.Object) '4');
        stackAr21.push((java.lang.Object) stackAr28);
        boolean boolean35 = stackAr21.isEmpty();
        boolean boolean36 = stackAr21.isFull();
        boolean boolean37 = stackAr21.isEmpty();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr39.isEmpty();
        boolean boolean41 = stackAr39.isEmpty();
        int int42 = stackAr39.size();
        org.autotest.StackAr stackAr44 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean45 = stackAr44.isEmpty();
        stackAr39.push((java.lang.Object) stackAr44);
        boolean boolean47 = stackAr21.equals((java.lang.Object) stackAr39);
        boolean boolean48 = stackAr6.equals((java.lang.Object) boolean47);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (byte) 0 + "'", obj19, (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        java.lang.Object obj26 = new java.lang.Object();
        stackAr22.push(obj26);
        boolean boolean28 = stackAr22.isFull();
        java.lang.String str29 = stackAr22.toString();
        stackAr22.push((java.lang.Object) (byte) 0);
        stackAr17.push((java.lang.Object) stackAr22);
        boolean boolean33 = stackAr1.equals((java.lang.Object) stackAr22);
        java.lang.Object obj34 = stackAr1.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "[4]");
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        boolean boolean6 = stackAr4.isEmpty();
        int int7 = stackAr4.size();
        int int8 = stackAr4.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) stackAr4);
        boolean boolean10 = stackAr4.isFull();
        java.lang.String str11 = stackAr4.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr16.isEmpty();
        int int18 = stackAr16.size();
        boolean boolean19 = stackAr16.isFull();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        java.lang.Object obj25 = new java.lang.Object();
        stackAr21.push(obj25);
        boolean boolean27 = stackAr21.isFull();
        java.lang.String str28 = stackAr21.toString();
        stackAr21.push((java.lang.Object) (byte) 0);
        stackAr16.push((java.lang.Object) stackAr21);
        boolean boolean32 = stackAr21.isFull();
        java.lang.Object[] objArray38 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean39 = org.autotest.StackAr.repOkFunction((int) 'a', objArray38);
        boolean boolean40 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray38);
        stackAr21.push((java.lang.Object) boolean40);
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 100);
        boolean boolean46 = stackAr43.isEmpty();
        stackAr43.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr50 = new org.autotest.StackAr((int) '#');
        boolean boolean52 = stackAr50.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr54 = new org.autotest.StackAr((int) '#');
        boolean boolean56 = stackAr54.equals((java.lang.Object) (byte) 1);
        boolean boolean57 = stackAr54.isFull();
        java.lang.Object obj58 = new java.lang.Object();
        stackAr54.push(obj58);
        stackAr50.push((java.lang.Object) stackAr54);
        int int61 = stackAr50.size();
        stackAr43.push((java.lang.Object) stackAr50);
        boolean boolean63 = stackAr21.equals((java.lang.Object) stackAr43);
        java.lang.Object obj64 = stackAr43.top();
        java.lang.Object obj65 = stackAr43.pop();
        boolean boolean66 = stackAr8.equals((java.lang.Object) stackAr43);
        java.lang.Object obj67 = stackAr43.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj68 = stackAr43.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + obj67 + "' != '" + (short) 0 + "'", obj67, (short) 0);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray18 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) 'a', objArray18);
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray18);
        boolean boolean21 = org.autotest.StackAr.repOkFunction((-1), objArray18);
        boolean boolean22 = org.autotest.StackAr.repOkFunction(2, objArray18);
        boolean boolean23 = stackAr1.equals((java.lang.Object) objArray18);
        java.lang.Object obj24 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + (byte) 0 + "'", obj24, (byte) 0);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        java.lang.String str11 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[[]]" + "'", str11, "[[]]");
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object obj13 = stackAr1.top();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        java.lang.String str16 = stackAr15.toString();
        stackAr1.push((java.lang.Object) stackAr15);
        boolean boolean18 = stackAr15.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = stackAr15.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(0, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) ' ', objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(0, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(100, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(1, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction(10, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(100, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(10, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) ' ', objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        java.lang.Object obj29 = new java.lang.Object();
        stackAr25.push(obj29);
        boolean boolean31 = stackAr17.equals(obj29);
        stackAr1.push((java.lang.Object) stackAr17);
        boolean boolean33 = stackAr1.isFull();
        java.lang.Object obj34 = stackAr1.pop();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "[]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) 10.0f);
        boolean boolean31 = stackAr0.isEmpty();
        java.lang.String str32 = stackAr0.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100,10.0]" + "'", str32, "[100,10.0]");
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr12.isEmpty();
        int int14 = stackAr12.size();
        boolean boolean16 = stackAr12.equals((java.lang.Object) 100L);
        boolean boolean17 = stackAr12.isFull();
        stackAr8.push((java.lang.Object) stackAr12);
        boolean boolean19 = stackAr8.isFull();
        boolean boolean20 = stackAr1.equals((java.lang.Object) stackAr8);
        java.lang.Object obj21 = stackAr8.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "[]");
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        java.lang.Object[] objArray13 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) 'a', objArray13);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray13);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(100, objArray13);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray13);
        stackAr1.push((java.lang.Object) objArray13);
        java.lang.String str19 = stackAr1.toString();
        java.lang.Class<?> wildcardClass20 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr10.isEmpty();
        int int12 = stackAr10.size();
        boolean boolean13 = stackAr10.isEmpty();
        boolean boolean14 = stackAr10.isEmpty();
        boolean boolean15 = stackAr10.isFull();
        int int16 = stackAr10.size();
        boolean boolean17 = stackAr10.isEmpty();
        boolean boolean18 = stackAr1.equals((java.lang.Object) boolean17);
        int int19 = stackAr1.size();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr21.isEmpty();
        int int23 = stackAr21.size();
        boolean boolean24 = stackAr21.isEmpty();
        boolean boolean26 = stackAr21.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        stackAr28.push((java.lang.Object) '4');
        stackAr21.push((java.lang.Object) stackAr28);
        java.lang.String str35 = stackAr28.toString();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean38 = stackAr37.isFull();
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr40.isEmpty();
        boolean boolean42 = stackAr40.isEmpty();
        int int43 = stackAr40.size();
        int int44 = stackAr40.size();
        boolean boolean45 = stackAr37.equals((java.lang.Object) stackAr40);
        stackAr28.push((java.lang.Object) boolean45);
        org.autotest.StackAr stackAr48 = new org.autotest.StackAr(0);
        int int49 = stackAr48.size();
        stackAr28.push((java.lang.Object) int49);
        boolean boolean51 = stackAr1.equals((java.lang.Object) int49);
        java.lang.Class<?> wildcardClass52 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[4]" + "'", str35, "[4]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean25 = stackAr24.isEmpty();
        stackAr19.push((java.lang.Object) stackAr24);
        boolean boolean27 = stackAr1.equals((java.lang.Object) stackAr19);
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean30 = stackAr29.isFull();
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr32.isEmpty();
        boolean boolean34 = stackAr32.isEmpty();
        int int35 = stackAr32.size();
        int int36 = stackAr32.size();
        boolean boolean37 = stackAr29.equals((java.lang.Object) stackAr32);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr39.isEmpty();
        boolean boolean41 = stackAr39.isEmpty();
        int int42 = stackAr39.size();
        boolean boolean43 = stackAr39.isEmpty();
        java.lang.Class<?> wildcardClass44 = stackAr39.getClass();
        stackAr29.push((java.lang.Object) stackAr39);
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean49 = stackAr47.equals((java.lang.Object) (byte) 1);
        boolean boolean50 = stackAr47.isFull();
        boolean boolean51 = stackAr47.isFull();
        boolean boolean52 = stackAr47.isFull();
        int int53 = stackAr47.size();
        org.autotest.StackAr stackAr55 = new org.autotest.StackAr((int) '#');
        boolean boolean57 = stackAr55.equals((java.lang.Object) (byte) 1);
        boolean boolean58 = stackAr55.isFull();
        java.lang.Object obj59 = new java.lang.Object();
        stackAr55.push(obj59);
        boolean boolean61 = stackAr47.equals(obj59);
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) '#');
        boolean boolean65 = stackAr63.equals((java.lang.Object) (byte) 1);
        boolean boolean66 = stackAr63.isFull();
        boolean boolean67 = stackAr63.isFull();
        boolean boolean68 = stackAr63.isFull();
        int int69 = stackAr63.size();
        org.autotest.StackAr stackAr71 = new org.autotest.StackAr((int) '#');
        boolean boolean73 = stackAr71.equals((java.lang.Object) (byte) 1);
        boolean boolean74 = stackAr71.isFull();
        java.lang.Object obj75 = new java.lang.Object();
        stackAr71.push(obj75);
        boolean boolean77 = stackAr63.equals(obj75);
        stackAr47.push((java.lang.Object) stackAr63);
        stackAr39.push((java.lang.Object) stackAr63);
        org.autotest.StackAr stackAr81 = new org.autotest.StackAr((int) '#');
        boolean boolean83 = stackAr81.equals((java.lang.Object) (byte) 1);
        boolean boolean84 = stackAr81.isFull();
        boolean boolean85 = stackAr81.isFull();
        boolean boolean86 = stackAr81.isFull();
        int int87 = stackAr81.size();
        org.autotest.StackAr stackAr89 = new org.autotest.StackAr((int) '#');
        boolean boolean90 = stackAr89.isEmpty();
        int int91 = stackAr89.size();
        boolean boolean92 = stackAr89.isEmpty();
        boolean boolean93 = stackAr81.equals((java.lang.Object) stackAr89);
        java.lang.Class<?> wildcardClass94 = stackAr89.getClass();
        boolean boolean95 = stackAr63.equals((java.lang.Object) wildcardClass94);
        stackAr19.push((java.lang.Object) stackAr63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj97 = stackAr63.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr1.pop();
        java.lang.String str16 = stackAr1.toString();
        boolean boolean17 = stackAr1.isFull();
        boolean boolean18 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isFull();
        java.lang.Object obj16 = stackAr1.top();
        java.lang.Object obj17 = stackAr1.pop();
        boolean boolean18 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[4]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "[4]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean14 = stackAr1.isEmpty();
        java.lang.Object obj15 = stackAr1.pop();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) (short) 0);
        boolean boolean18 = stackAr17.isEmpty();
        java.lang.String str19 = stackAr17.toString();
        stackAr1.push((java.lang.Object) str19);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[[]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[[]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[[]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) 1);
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isFull();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str15 = stackAr14.toString();
        boolean boolean16 = stackAr14.isFull();
        stackAr14.push((java.lang.Object) 1);
        boolean boolean19 = stackAr14.isEmpty();
        boolean boolean20 = stackAr7.equals((java.lang.Object) stackAr14);
        java.lang.String str21 = stackAr7.toString();
        boolean boolean22 = stackAr1.equals((java.lang.Object) str21);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str25 = stackAr24.toString();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr(0);
        int int28 = stackAr27.size();
        stackAr24.push((java.lang.Object) stackAr27);
        java.lang.Object obj30 = stackAr24.pop();
        boolean boolean31 = stackAr24.isEmpty();
        java.lang.String str32 = stackAr24.toString();
        boolean boolean33 = stackAr1.equals((java.lang.Object) str32);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.String str3 = stackAr1.toString();
        java.lang.String str4 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        java.lang.String str14 = stackAr8.toString();
        java.lang.Object obj15 = stackAr8.top();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj17 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[4]" + "'", str14, "[4]");
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '4' + "'", obj15, '4');
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "[4]");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) '4');
        java.lang.Object obj13 = null;
        boolean boolean14 = stackAr7.equals(obj13);
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj16 = stackAr1.top();
        java.lang.Class<?> wildcardClass17 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[4]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr1.toString();
        java.lang.Class<?> wildcardClass16 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[4]]" + "'", str15, "[[4]]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) "[4]");
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.String str12 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[[4]]" + "'", str12, "[[4]]");
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        java.lang.String str7 = stackAr1.toString();
        boolean boolean8 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        java.lang.Object[] objArray11 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) 'a', objArray11);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(0, objArray11);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(1, objArray11);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray11);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray11);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray11);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray11);
        boolean boolean19 = org.autotest.StackAr.repOkFunction(3, objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr8.equals((java.lang.Object) (short) 1);
        int int18 = stackAr8.size();
        java.lang.Object[] objArray27 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) 'a', objArray27);
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean30 = org.autotest.StackAr.repOkFunction(100, objArray27);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) '#', objArray27);
        stackAr8.push((java.lang.Object) '#');
        java.lang.Object obj34 = stackAr8.top();
        java.lang.Object obj35 = stackAr8.top();
        java.lang.Object obj36 = stackAr8.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + '#' + "'", obj34, '#');
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + '#' + "'", obj35, '#');
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + '#' + "'", obj36, '#');
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        int int10 = stackAr1.size();
        boolean boolean11 = stackAr1.isFull();
        java.lang.String str12 = stackAr1.toString();
        java.lang.Object obj13 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0]" + "'", str12, "[0]");
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 0 + "'", obj13, 0);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object obj13 = stackAr1.top();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        java.lang.String str16 = stackAr15.toString();
        stackAr1.push((java.lang.Object) stackAr15);
        java.lang.Class<?> wildcardClass18 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        boolean boolean1 = stackAr0.isEmpty();
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
        int int3 = stackAr2.size();
        stackAr0.push((java.lang.Object) int3);
        java.lang.String str5 = stackAr0.toString();
        java.lang.Object obj6 = stackAr0.top();
        boolean boolean7 = stackAr0.isFull();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0]" + "'", str5, "[0]");
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 0 + "'", obj6, 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean11 = stackAr10.isFull();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr10);
        boolean boolean13 = stackAr10.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = stackAr10.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        boolean boolean6 = stackAr4.isEmpty();
        int int7 = stackAr4.size();
        int int8 = stackAr4.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) stackAr4);
        boolean boolean10 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr8.equals((java.lang.Object) (short) 1);
        int int18 = stackAr8.size();
        java.lang.Object[] objArray27 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) 'a', objArray27);
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean30 = org.autotest.StackAr.repOkFunction(100, objArray27);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) '#', objArray27);
        stackAr8.push((java.lang.Object) '#');
        java.lang.Object obj34 = stackAr8.top();
        boolean boolean35 = stackAr8.isFull();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        java.lang.String str38 = stackAr37.toString();
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr40.equals((java.lang.Object) (byte) 1);
        boolean boolean43 = stackAr40.isFull();
        boolean boolean44 = stackAr40.isFull();
        boolean boolean45 = stackAr40.isFull();
        int int46 = stackAr40.size();
        org.autotest.StackAr stackAr48 = new org.autotest.StackAr((int) '#');
        boolean boolean50 = stackAr48.equals((java.lang.Object) (byte) 1);
        boolean boolean51 = stackAr48.isFull();
        java.lang.Object obj52 = new java.lang.Object();
        stackAr48.push(obj52);
        boolean boolean54 = stackAr40.equals(obj52);
        boolean boolean55 = stackAr37.equals((java.lang.Object) boolean54);
        boolean boolean56 = stackAr8.equals((java.lang.Object) stackAr37);
        java.lang.String str57 = stackAr37.toString();
        boolean boolean58 = stackAr37.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + '#' + "'", obj34, '#');
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        java.lang.String str7 = stackAr1.toString();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[[]]" + "'", str7, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + "[]" + "'", obj9, "[]");
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr12.isEmpty();
        int int14 = stackAr12.size();
        boolean boolean16 = stackAr12.equals((java.lang.Object) 100L);
        boolean boolean17 = stackAr12.isFull();
        stackAr8.push((java.lang.Object) stackAr12);
        boolean boolean19 = stackAr8.isFull();
        boolean boolean20 = stackAr1.equals((java.lang.Object) stackAr8);
        java.lang.String str21 = stackAr1.toString();
        int int22 = stackAr1.size();
        int int23 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        stackAr6.push((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        boolean boolean31 = stackAr28.isEmpty();
        stackAr28.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        stackAr35.push((java.lang.Object) stackAr39);
        int int46 = stackAr35.size();
        stackAr28.push((java.lang.Object) stackAr35);
        boolean boolean48 = stackAr6.equals((java.lang.Object) stackAr28);
        java.lang.String str49 = stackAr6.toString();
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean53 = stackAr51.equals((java.lang.Object) (byte) 1);
        boolean boolean54 = stackAr51.isFull();
        stackAr51.push((java.lang.Object) '4');
        java.lang.Object obj57 = null;
        boolean boolean58 = stackAr51.equals(obj57);
        boolean boolean59 = stackAr51.isEmpty();
        java.lang.String str60 = stackAr51.toString();
        boolean boolean61 = stackAr6.equals((java.lang.Object) stackAr51);
        int int62 = stackAr51.size();
        boolean boolean63 = stackAr51.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[4]" + "'", str60, "[4]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        stackAr9.push((java.lang.Object) "[]");
        int int14 = stackAr9.size();
        boolean boolean16 = stackAr9.equals((java.lang.Object) 'a');
        boolean boolean17 = stackAr1.equals((java.lang.Object) boolean16);
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        int int8 = stackAr1.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        java.lang.Object[] objArray11 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) 'a', objArray11);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray11);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(100, objArray11);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray11);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray11);
        boolean boolean17 = org.autotest.StackAr.repOkFunction(100, objArray11);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) ' ', objArray11);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        stackAr9.push((java.lang.Object) "[]");
        int int14 = stackAr9.size();
        boolean boolean16 = stackAr9.equals((java.lang.Object) 'a');
        boolean boolean17 = stackAr1.equals((java.lang.Object) boolean16);
        java.lang.Object obj18 = null;
        stackAr1.push(obj18);
        java.lang.Class<?> wildcardClass20 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(0, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        boolean boolean1 = stackAr0.isEmpty();
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
        int int3 = stackAr2.size();
        stackAr0.push((java.lang.Object) int3);
        java.lang.String str5 = stackAr0.toString();
        java.lang.Object obj6 = stackAr0.top();
        java.lang.Object obj7 = stackAr0.top();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isFull();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 1);
        boolean boolean17 = stackAr14.isFull();
        java.lang.Object obj18 = new java.lang.Object();
        stackAr14.push(obj18);
        boolean boolean20 = stackAr14.isFull();
        java.lang.String str21 = stackAr14.toString();
        stackAr14.push((java.lang.Object) (byte) 0);
        stackAr9.push((java.lang.Object) stackAr14);
        boolean boolean25 = stackAr14.isFull();
        java.lang.Object[] objArray31 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) 'a', objArray31);
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray31);
        stackAr14.push((java.lang.Object) boolean33);
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 100);
        boolean boolean39 = stackAr36.isEmpty();
        stackAr36.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean49 = stackAr47.equals((java.lang.Object) (byte) 1);
        boolean boolean50 = stackAr47.isFull();
        java.lang.Object obj51 = new java.lang.Object();
        stackAr47.push(obj51);
        stackAr43.push((java.lang.Object) stackAr47);
        int int54 = stackAr43.size();
        stackAr36.push((java.lang.Object) stackAr43);
        boolean boolean56 = stackAr14.equals((java.lang.Object) stackAr36);
        stackAr0.push((java.lang.Object) boolean56);
        org.autotest.StackAr stackAr59 = new org.autotest.StackAr((int) '#');
        boolean boolean61 = stackAr59.equals((java.lang.Object) (byte) 1);
        boolean boolean62 = stackAr59.isFull();
        boolean boolean63 = stackAr59.isFull();
        boolean boolean64 = stackAr59.isFull();
        int int65 = stackAr59.size();
        org.autotest.StackAr stackAr67 = new org.autotest.StackAr((int) '#');
        boolean boolean69 = stackAr67.equals((java.lang.Object) (byte) 1);
        boolean boolean70 = stackAr67.isFull();
        java.lang.Object obj71 = new java.lang.Object();
        stackAr67.push(obj71);
        boolean boolean73 = stackAr59.equals(obj71);
        org.autotest.StackAr stackAr75 = new org.autotest.StackAr((int) '#');
        boolean boolean77 = stackAr75.equals((java.lang.Object) (byte) 1);
        boolean boolean78 = stackAr75.isFull();
        boolean boolean79 = stackAr75.isFull();
        boolean boolean80 = stackAr75.isFull();
        int int81 = stackAr75.size();
        org.autotest.StackAr stackAr83 = new org.autotest.StackAr((int) '#');
        boolean boolean85 = stackAr83.equals((java.lang.Object) (byte) 1);
        boolean boolean86 = stackAr83.isFull();
        java.lang.Object obj87 = new java.lang.Object();
        stackAr83.push(obj87);
        boolean boolean89 = stackAr75.equals(obj87);
        stackAr59.push((java.lang.Object) stackAr75);
        boolean boolean91 = stackAr59.isFull();
        java.lang.Object obj92 = stackAr59.pop();
        stackAr0.push(obj92);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0]" + "'", str5, "[0]");
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 0 + "'", obj6, 0);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + 0 + "'", obj7, 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertEquals(obj92.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj92), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj92), "[]");
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr24.isEmpty();
        int int26 = stackAr24.size();
        boolean boolean27 = stackAr24.isEmpty();
        boolean boolean29 = stackAr24.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr(0);
        stackAr24.push((java.lang.Object) 0);
        stackAr8.push((java.lang.Object) 0);
        boolean boolean34 = stackAr8.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        java.lang.String str11 = stackAr7.toString();
        java.lang.Object[] objArray19 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) 'a', objArray19);
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray19);
        boolean boolean22 = org.autotest.StackAr.repOkFunction(100, objArray19);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray19);
        stackAr7.push((java.lang.Object) objArray19);
        boolean boolean25 = stackAr1.equals((java.lang.Object) objArray19);
        java.lang.String str26 = stackAr1.toString();
        int int27 = stackAr1.size();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 100);
        boolean boolean32 = stackAr29.isEmpty();
        boolean boolean33 = stackAr29.isEmpty();
        java.lang.String str34 = stackAr29.toString();
        boolean boolean35 = stackAr29.isEmpty();
        int int36 = stackAr29.size();
        stackAr1.push((java.lang.Object) int36);
        boolean boolean38 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[[]]" + "'", str26, "[[]]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr1.toString();
        java.lang.Object obj16 = stackAr1.pop();
        boolean boolean17 = stackAr1.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        int int21 = stackAr19.size();
        boolean boolean22 = stackAr19.isEmpty();
        boolean boolean24 = stackAr19.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr26.equals((java.lang.Object) (byte) 1);
        boolean boolean29 = stackAr26.isFull();
        stackAr26.push((java.lang.Object) '4');
        stackAr19.push((java.lang.Object) stackAr26);
        boolean boolean33 = stackAr19.isEmpty();
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        boolean boolean38 = stackAr35.isFull();
        java.lang.Object obj39 = new java.lang.Object();
        stackAr35.push(obj39);
        boolean boolean41 = stackAr19.equals((java.lang.Object) stackAr35);
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr43.isEmpty();
        int int45 = stackAr43.size();
        boolean boolean46 = stackAr43.isEmpty();
        int int47 = stackAr43.size();
        boolean boolean48 = stackAr43.isFull();
        boolean boolean49 = stackAr43.isEmpty();
        boolean boolean50 = stackAr19.equals((java.lang.Object) stackAr43);
        boolean boolean51 = stackAr19.isFull();
        boolean boolean52 = stackAr1.equals((java.lang.Object) boolean51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj53 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[4]]" + "'", str15, "[[4]]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[4]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) '4');
        java.lang.Object obj13 = null;
        boolean boolean14 = stackAr7.equals(obj13);
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj16 = stackAr1.pop();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[4]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        java.lang.Object obj11 = stackAr1.pop();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr13.isEmpty();
        boolean boolean15 = stackAr13.isEmpty();
        int int16 = stackAr13.size();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean19 = stackAr18.isEmpty();
        stackAr13.push((java.lang.Object) stackAr18);
        boolean boolean21 = stackAr1.equals((java.lang.Object) stackAr18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = stackAr18.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        boolean boolean10 = stackAr1.isFull();
        java.lang.String str11 = stackAr1.toString();
        int int12 = stackAr1.size();
        int int13 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0]" + "'", str11, "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 100);
        boolean boolean8 = stackAr5.isEmpty();
        boolean boolean9 = stackAr5.isFull();
        boolean boolean10 = stackAr1.equals((java.lang.Object) boolean9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        java.lang.Object obj7 = stackAr1.top();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) (short) 100);
        boolean boolean10 = stackAr1.equals((java.lang.Object) (short) 100);
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
        int int12 = stackAr11.size();
        java.lang.Object[] objArray18 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) 'a', objArray18);
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray18);
        boolean boolean21 = stackAr11.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        java.lang.Object obj27 = new java.lang.Object();
        stackAr23.push(obj27);
        boolean boolean30 = stackAr23.equals((java.lang.Object) (byte) -1);
        boolean boolean31 = stackAr11.equals((java.lang.Object) boolean30);
        boolean boolean32 = stackAr11.isFull();
        boolean boolean33 = stackAr1.equals((java.lang.Object) boolean32);
        boolean boolean34 = stackAr1.isEmpty();
        java.lang.String str35 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "[]" + "'", obj7, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[[]]" + "'", str35, "[[]]");
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean11 = stackAr10.isFull();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr10);
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr14.isEmpty();
        int int16 = stackAr14.size();
        boolean boolean17 = stackAr14.isEmpty();
        boolean boolean19 = stackAr14.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        stackAr21.push((java.lang.Object) '4');
        stackAr14.push((java.lang.Object) stackAr21);
        boolean boolean28 = stackAr14.isEmpty();
        java.lang.String str29 = stackAr14.toString();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr(0);
        int int32 = stackAr31.size();
        boolean boolean33 = stackAr14.equals((java.lang.Object) stackAr31);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr35.isEmpty();
        int int37 = stackAr35.size();
        boolean boolean38 = stackAr35.isEmpty();
        boolean boolean39 = stackAr35.isEmpty();
        boolean boolean40 = stackAr35.isFull();
        int int41 = stackAr35.size();
        boolean boolean42 = stackAr14.equals((java.lang.Object) stackAr35);
        java.lang.Object obj43 = stackAr14.top();
        boolean boolean44 = stackAr1.equals((java.lang.Object) stackAr14);
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        stackAr46.push((java.lang.Object) "[]");
        int int51 = stackAr46.size();
        boolean boolean53 = stackAr46.equals((java.lang.Object) 'a');
        int int54 = stackAr46.size();
        int int55 = stackAr46.size();
        org.autotest.StackAr stackAr57 = new org.autotest.StackAr((int) '#');
        boolean boolean59 = stackAr57.equals((java.lang.Object) (byte) 1);
        java.lang.String str60 = stackAr57.toString();
        boolean boolean61 = stackAr57.isEmpty();
        int int62 = stackAr57.size();
        boolean boolean63 = stackAr46.equals((java.lang.Object) stackAr57);
        boolean boolean64 = stackAr57.isFull();
        boolean boolean65 = stackAr1.equals((java.lang.Object) boolean64);
        java.lang.String str66 = stackAr1.toString();
        boolean boolean67 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[[4]]" + "'", str29, "[[4]]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "[4]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[]" + "'", str60, "[]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        java.lang.String str2 = stackAr1.toString();
        boolean boolean4 = stackAr1.equals((java.lang.Object) 10L);
        boolean boolean5 = stackAr1.isEmpty();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        java.lang.String str15 = stackAr9.toString();
        boolean boolean16 = stackAr9.isEmpty();
        boolean boolean17 = stackAr9.isFull();
        java.lang.Object obj18 = stackAr9.top();
        boolean boolean19 = stackAr1.equals((java.lang.Object) stackAr9);
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        boolean boolean25 = stackAr21.isFull();
        boolean boolean26 = stackAr21.isFull();
        int int27 = stackAr21.size();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        boolean boolean32 = stackAr29.isFull();
        java.lang.Object obj33 = new java.lang.Object();
        stackAr29.push(obj33);
        boolean boolean35 = stackAr21.equals(obj33);
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        boolean boolean40 = stackAr37.isFull();
        boolean boolean41 = stackAr37.isFull();
        boolean boolean42 = stackAr37.isFull();
        int int43 = stackAr37.size();
        org.autotest.StackAr stackAr45 = new org.autotest.StackAr((int) '#');
        boolean boolean47 = stackAr45.equals((java.lang.Object) (byte) 1);
        boolean boolean48 = stackAr45.isFull();
        java.lang.Object obj49 = new java.lang.Object();
        stackAr45.push(obj49);
        boolean boolean51 = stackAr37.equals(obj49);
        stackAr21.push((java.lang.Object) stackAr37);
        boolean boolean53 = stackAr37.isEmpty();
        boolean boolean54 = stackAr37.isEmpty();
        boolean boolean55 = stackAr9.equals((java.lang.Object) boolean54);
        org.autotest.StackAr stackAr57 = new org.autotest.StackAr((int) '#');
        boolean boolean58 = stackAr57.isEmpty();
        int int59 = stackAr57.size();
        boolean boolean60 = stackAr57.isFull();
        org.autotest.StackAr stackAr62 = new org.autotest.StackAr((int) '#');
        boolean boolean64 = stackAr62.equals((java.lang.Object) (byte) 1);
        boolean boolean65 = stackAr62.isFull();
        java.lang.Object obj66 = new java.lang.Object();
        stackAr62.push(obj66);
        boolean boolean68 = stackAr62.isFull();
        java.lang.String str69 = stackAr62.toString();
        stackAr62.push((java.lang.Object) (byte) 0);
        stackAr57.push((java.lang.Object) stackAr62);
        java.lang.Object obj73 = stackAr62.pop();
        java.lang.Object obj74 = stackAr62.top();
        boolean boolean75 = stackAr9.equals((java.lang.Object) stackAr62);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + (byte) 0 + "'", obj73, (byte) 0);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        boolean boolean1 = stackAr0.isEmpty();
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
        int int3 = stackAr2.size();
        stackAr0.push((java.lang.Object) int3);
        java.lang.String str5 = stackAr0.toString();
        java.lang.Object obj6 = stackAr0.top();
        java.lang.Object obj7 = stackAr0.top();
        boolean boolean8 = stackAr0.isEmpty();
        java.lang.Object obj9 = stackAr0.pop();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0]" + "'", str5, "[0]");
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 0 + "'", obj6, 0);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + 0 + "'", obj7, 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + 0 + "'", obj9, 0);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass18 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        boolean boolean5 = stackAr1.isFull();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isFull();
        int int13 = stackAr7.size();
        boolean boolean14 = stackAr1.equals((java.lang.Object) int13);
        boolean boolean15 = stackAr1.isFull();
        boolean boolean16 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr31.equals((java.lang.Object) (byte) 100);
        boolean boolean34 = stackAr31.isEmpty();
        boolean boolean35 = stackAr31.isEmpty();
        boolean boolean36 = stackAr29.equals((java.lang.Object) stackAr31);
        boolean boolean37 = stackAr0.equals((java.lang.Object) stackAr31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj38 = stackAr31.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        boolean boolean16 = stackAr12.isFull();
        boolean boolean17 = stackAr12.isFull();
        int int18 = stackAr12.size();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr20.isEmpty();
        int int22 = stackAr20.size();
        boolean boolean23 = stackAr20.isEmpty();
        boolean boolean24 = stackAr12.equals((java.lang.Object) stackAr20);
        boolean boolean25 = stackAr0.equals((java.lang.Object) boolean24);
        java.lang.String str26 = stackAr0.toString();
        boolean boolean27 = stackAr0.isEmpty();
        java.lang.String str28 = stackAr0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj29 = stackAr0.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '4');
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr3.equals((java.lang.Object) (byte) 1);
        boolean boolean6 = stackAr3.isFull();
        stackAr3.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        java.lang.String str16 = stackAr10.toString();
        boolean boolean17 = stackAr10.isEmpty();
        boolean boolean18 = stackAr3.equals((java.lang.Object) boolean17);
        boolean boolean19 = stackAr1.equals((java.lang.Object) stackAr3);
        java.lang.String str20 = stackAr3.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[4]" + "'", str20, "[4]");
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.String str6 = stackAr1.toString();
        boolean boolean7 = stackAr1.isEmpty();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 100);
        boolean boolean13 = stackAr10.isEmpty();
        boolean boolean14 = stackAr10.isEmpty();
        boolean boolean15 = stackAr1.equals((java.lang.Object) stackAr10);
        int int16 = stackAr1.size();
        boolean boolean17 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        boolean boolean25 = stackAr19.isFull();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        java.lang.Object obj31 = new java.lang.Object();
        stackAr27.push(obj31);
        boolean boolean33 = stackAr27.isFull();
        java.lang.String str34 = stackAr27.toString();
        boolean boolean35 = stackAr19.equals((java.lang.Object) str34);
        boolean boolean36 = stackAr19.isEmpty();
        boolean boolean37 = stackAr19.isFull();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        boolean boolean43 = stackAr39.isFull();
        stackAr19.push((java.lang.Object) boolean43);
        boolean boolean45 = stackAr19.isFull();
        boolean boolean46 = stackAr1.equals((java.lang.Object) stackAr19);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        java.lang.String str5 = stackAr1.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        boolean boolean1 = stackAr0.isEmpty();
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
        int int3 = stackAr2.size();
        stackAr0.push((java.lang.Object) int3);
        java.lang.String str5 = stackAr0.toString();
        java.lang.Object obj6 = stackAr0.top();
        java.lang.Object obj7 = stackAr0.top();
        boolean boolean8 = stackAr0.isEmpty();
        int int9 = stackAr0.size();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0]" + "'", str5, "[0]");
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 0 + "'", obj6, 0);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + 0 + "'", obj7, 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str9 = stackAr8.toString();
        boolean boolean10 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) 1);
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr8.top();
        boolean boolean16 = stackAr8.isFull();
        java.lang.String str17 = stackAr8.toString();
        java.lang.Object obj18 = stackAr8.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = stackAr8.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + 1 + "'", obj15, 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1]" + "'", str17, "[1]");
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + 1 + "'", obj18, 1);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        boolean boolean8 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        boolean boolean16 = stackAr10.isFull();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        java.lang.Object obj22 = new java.lang.Object();
        stackAr18.push(obj22);
        boolean boolean24 = stackAr18.isFull();
        java.lang.String str25 = stackAr18.toString();
        boolean boolean26 = stackAr10.equals((java.lang.Object) str25);
        stackAr1.push((java.lang.Object) stackAr10);
        java.lang.Object obj28 = stackAr1.pop();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.Class<?> wildcardClass7 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr(0);
        int int2 = stackAr1.size();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        stackAr9.push((java.lang.Object) "[]");
        int int14 = stackAr9.size();
        boolean boolean16 = stackAr9.equals((java.lang.Object) 'a');
        boolean boolean17 = stackAr1.equals((java.lang.Object) boolean16);
        java.lang.Object obj18 = null;
        stackAr1.push(obj18);
        boolean boolean20 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        java.lang.Object obj11 = stackAr1.top();
        boolean boolean12 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 1);
        boolean boolean17 = stackAr14.isFull();
        java.lang.String str18 = stackAr14.toString();
        java.lang.Object[] objArray26 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean27 = org.autotest.StackAr.repOkFunction((int) 'a', objArray26);
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray26);
        boolean boolean29 = org.autotest.StackAr.repOkFunction(100, objArray26);
        boolean boolean30 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray26);
        stackAr14.push((java.lang.Object) objArray26);
        boolean boolean32 = stackAr1.equals((java.lang.Object) stackAr14);
        java.lang.Class<?> wildcardClass33 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr1.pop();
        boolean boolean16 = stackAr1.isFull();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean21 = stackAr18.isEmpty();
        boolean boolean23 = stackAr18.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        stackAr25.push((java.lang.Object) '4');
        stackAr18.push((java.lang.Object) stackAr25);
        java.lang.String str32 = stackAr25.toString();
        java.lang.Object obj33 = stackAr25.pop();
        stackAr1.push((java.lang.Object) stackAr25);
        java.lang.String str35 = stackAr1.toString();
        boolean boolean36 = stackAr1.isEmpty();
        java.lang.Object obj37 = stackAr1.pop();
        java.lang.Class<?> wildcardClass38 = obj37.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[4]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[4]" + "'", str32, "[4]");
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + '4' + "'", obj33, '4');
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[[]]" + "'", str35, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "[]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isFull();
        int int13 = stackAr7.size();
        boolean boolean15 = stackAr7.equals((java.lang.Object) 'a');
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        java.lang.String str17 = stackAr1.toString();
        int int18 = stackAr1.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj19 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
        boolean boolean11 = stackAr10.isEmpty();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
        int int13 = stackAr12.size();
        stackAr10.push((java.lang.Object) int13);
        boolean boolean15 = stackAr1.equals((java.lang.Object) int13);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 100);
        boolean boolean20 = stackAr17.isEmpty();
        java.lang.Class<?> wildcardClass21 = stackAr17.getClass();
        stackAr1.push((java.lang.Object) stackAr17);
        boolean boolean23 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass24 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr6.isEmpty();
        int int8 = stackAr6.size();
        boolean boolean9 = stackAr6.isEmpty();
        boolean boolean11 = stackAr6.equals((java.lang.Object) (short) -1);
        stackAr1.push((java.lang.Object) (short) -1);
        java.lang.Object obj13 = stackAr1.pop();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        java.lang.Object obj19 = new java.lang.Object();
        stackAr15.push(obj19);
        boolean boolean22 = stackAr15.equals((java.lang.Object) (byte) -1);
        int int23 = stackAr15.size();
        java.lang.Object obj24 = stackAr15.top();
        boolean boolean25 = stackAr1.equals((java.lang.Object) stackAr15);
        java.lang.Class<?> wildcardClass26 = stackAr15.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (short) -1 + "'", obj13, (short) -1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr8);
        int int23 = stackAr1.size();
        int int24 = stackAr1.size();
        java.lang.Object obj25 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "[[4]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "[[4]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "[[4]]");
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean11 = stackAr10.isFull();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr10);
        boolean boolean13 = stackAr1.isEmpty();
        boolean boolean14 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        java.lang.Object obj20 = new java.lang.Object();
        stackAr16.push(obj20);
        boolean boolean22 = stackAr16.isFull();
        java.lang.String str23 = stackAr16.toString();
        java.lang.Object obj24 = stackAr16.top();
        stackAr1.push((java.lang.Object) stackAr16);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj24);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        java.lang.Object[] objArray6 = new java.lang.Object[] { 1.0d };
        boolean boolean7 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray6);
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) '4', objArray6);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray6);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(0, objArray6);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) '4', objArray6);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean8 = stackAr1.equals((java.lang.Object) (byte) -1);
        boolean boolean9 = stackAr1.isFull();
        int int10 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr4.equals((java.lang.Object) (byte) 1);
        stackAr4.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.String str14 = stackAr10.toString();
        java.lang.Object[] objArray22 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) 'a', objArray22);
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray22);
        boolean boolean25 = org.autotest.StackAr.repOkFunction(100, objArray22);
        boolean boolean26 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray22);
        stackAr10.push((java.lang.Object) objArray22);
        boolean boolean28 = stackAr4.equals((java.lang.Object) objArray22);
        boolean boolean29 = org.autotest.StackAr.repOkFunction(0, objArray22);
        boolean boolean30 = org.autotest.StackAr.repOkFunction(0, objArray22);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) '4', objArray22);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) 1);
        java.lang.Object obj6 = stackAr1.pop();
        int int7 = stackAr1.size();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 1 + "'", obj6, 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        int int11 = stackAr1.size();
        java.lang.String str12 = stackAr1.toString();
        java.lang.Object obj13 = stackAr1.pop();
        java.lang.Object obj14 = stackAr1.top();
        java.lang.Object obj15 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (byte) 0 + "'", obj13, (byte) 0);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        java.lang.String str15 = stackAr9.toString();
        boolean boolean16 = stackAr9.isEmpty();
        boolean boolean17 = stackAr9.isFull();
        java.lang.Object obj18 = stackAr9.top();
        boolean boolean19 = stackAr1.equals((java.lang.Object) stackAr9);
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        boolean boolean25 = stackAr21.isFull();
        boolean boolean26 = stackAr21.isFull();
        int int27 = stackAr21.size();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        boolean boolean32 = stackAr29.isFull();
        java.lang.Object obj33 = new java.lang.Object();
        stackAr29.push(obj33);
        boolean boolean35 = stackAr21.equals(obj33);
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        boolean boolean40 = stackAr37.isFull();
        boolean boolean41 = stackAr37.isFull();
        boolean boolean42 = stackAr37.isFull();
        int int43 = stackAr37.size();
        org.autotest.StackAr stackAr45 = new org.autotest.StackAr((int) '#');
        boolean boolean47 = stackAr45.equals((java.lang.Object) (byte) 1);
        boolean boolean48 = stackAr45.isFull();
        java.lang.Object obj49 = new java.lang.Object();
        stackAr45.push(obj49);
        boolean boolean51 = stackAr37.equals(obj49);
        stackAr21.push((java.lang.Object) stackAr37);
        boolean boolean53 = stackAr37.isEmpty();
        boolean boolean54 = stackAr37.isEmpty();
        boolean boolean55 = stackAr9.equals((java.lang.Object) boolean54);
        java.lang.Class<?> wildcardClass56 = stackAr9.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr1.pop();
        boolean boolean16 = stackAr1.isFull();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr();
        int int18 = stackAr17.size();
        int int19 = stackAr17.size();
        stackAr1.push((java.lang.Object) int19);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[4]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr8);
        int int23 = stackAr1.size();
        java.lang.String str24 = stackAr1.toString();
        java.lang.Object obj25 = stackAr1.pop();
        java.lang.Object obj26 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "[[4]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "[[4]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "[[4]]");
        org.junit.Assert.assertNotNull(obj26);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr12.isEmpty();
        int int14 = stackAr12.size();
        boolean boolean16 = stackAr12.equals((java.lang.Object) 100L);
        boolean boolean17 = stackAr12.isFull();
        stackAr8.push((java.lang.Object) stackAr12);
        boolean boolean19 = stackAr8.isFull();
        boolean boolean20 = stackAr1.equals((java.lang.Object) stackAr8);
        java.lang.Object obj21 = stackAr1.top();
        java.lang.String str22 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.Object[] objArray18 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) 'a', objArray18);
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray18);
        boolean boolean21 = org.autotest.StackAr.repOkFunction(10, objArray18);
        boolean boolean22 = stackAr5.equals((java.lang.Object) objArray18);
        boolean boolean23 = stackAr5.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        boolean boolean6 = stackAr4.isEmpty();
        int int7 = stackAr4.size();
        int int8 = stackAr4.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) stackAr4);
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr11.isEmpty();
        boolean boolean13 = stackAr11.isEmpty();
        int int14 = stackAr11.size();
        boolean boolean15 = stackAr11.isEmpty();
        java.lang.Class<?> wildcardClass16 = stackAr11.getClass();
        stackAr1.push((java.lang.Object) stackAr11);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        boolean boolean23 = stackAr19.isFull();
        boolean boolean24 = stackAr19.isFull();
        int int25 = stackAr19.size();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        java.lang.Object obj31 = new java.lang.Object();
        stackAr27.push(obj31);
        boolean boolean33 = stackAr19.equals(obj31);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        boolean boolean38 = stackAr35.isFull();
        boolean boolean39 = stackAr35.isFull();
        boolean boolean40 = stackAr35.isFull();
        int int41 = stackAr35.size();
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 1);
        boolean boolean46 = stackAr43.isFull();
        java.lang.Object obj47 = new java.lang.Object();
        stackAr43.push(obj47);
        boolean boolean49 = stackAr35.equals(obj47);
        stackAr19.push((java.lang.Object) stackAr35);
        stackAr11.push((java.lang.Object) stackAr35);
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean55 = stackAr53.equals((java.lang.Object) (byte) 1);
        boolean boolean56 = stackAr53.isFull();
        boolean boolean57 = stackAr53.isFull();
        boolean boolean58 = stackAr53.isFull();
        int int59 = stackAr53.size();
        org.autotest.StackAr stackAr61 = new org.autotest.StackAr((int) '#');
        boolean boolean62 = stackAr61.isEmpty();
        int int63 = stackAr61.size();
        boolean boolean64 = stackAr61.isEmpty();
        boolean boolean65 = stackAr53.equals((java.lang.Object) stackAr61);
        java.lang.Class<?> wildcardClass66 = stackAr61.getClass();
        boolean boolean67 = stackAr35.equals((java.lang.Object) wildcardClass66);
        int int68 = stackAr35.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) '4');
        java.lang.Object obj13 = null;
        boolean boolean14 = stackAr7.equals(obj13);
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj16 = stackAr7.top();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        boolean boolean21 = stackAr18.equals((java.lang.Object) '#');
        boolean boolean23 = stackAr18.equals((java.lang.Object) "hi!");
        boolean boolean24 = stackAr18.isFull();
        int int25 = stackAr18.size();
        boolean boolean26 = stackAr18.isFull();
        boolean boolean27 = stackAr18.isEmpty();
        boolean boolean28 = stackAr7.equals((java.lang.Object) boolean27);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + '4' + "'", obj16, '4');
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        java.lang.Object[] objArray6 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean7 = org.autotest.StackAr.repOkFunction((int) 'a', objArray6);
        boolean boolean8 = org.autotest.StackAr.repOkFunction(100, objArray6);
        boolean boolean9 = org.autotest.StackAr.repOkFunction(2, objArray6);
        java.lang.Class<?> wildcardClass10 = objArray6.getClass();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        java.lang.String str29 = stackAr0.toString();
        int int30 = stackAr0.size();
        java.lang.Object obj31 = null;
        stackAr0.push(obj31);
        java.lang.Object obj33 = stackAr0.pop();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100]" + "'", str29, "[100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNull(obj33);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object[] objArray16 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) 'a', objArray16);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray16);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((-1), objArray16);
        boolean boolean20 = stackAr1.equals((java.lang.Object) objArray16);
        boolean boolean21 = stackAr1.isFull();
        boolean boolean22 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.String str2 = stackAr0.toString();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.String str10 = stackAr6.toString();
        java.lang.Object[] objArray18 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) 'a', objArray18);
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray18);
        boolean boolean21 = org.autotest.StackAr.repOkFunction(100, objArray18);
        boolean boolean22 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray18);
        stackAr6.push((java.lang.Object) objArray18);
        boolean boolean24 = org.autotest.StackAr.repOkFunction(10, objArray18);
        boolean boolean25 = org.autotest.StackAr.repOkFunction(0, objArray18);
        boolean boolean26 = stackAr0.equals((java.lang.Object) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) "[4]");
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        stackAr12.push((java.lang.Object) "[]");
        int int17 = stackAr12.size();
        java.lang.String str18 = stackAr12.toString();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        java.lang.String str24 = stackAr20.toString();
        int int25 = stackAr20.size();
        stackAr12.push((java.lang.Object) stackAr20);
        boolean boolean27 = stackAr1.equals((java.lang.Object) stackAr20);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[[]]" + "'", str18, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object obj13 = stackAr1.top();
        java.lang.String str14 = stackAr1.toString();
        java.lang.Class<?> wildcardClass15 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[[]]" + "'", str14, "[[]]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(0, objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        int int11 = stackAr1.size();
        java.lang.String str12 = stackAr1.toString();
        int int13 = stackAr1.size();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        stackAr15.push((java.lang.Object) stackAr19);
        boolean boolean26 = stackAr19.isFull();
        boolean boolean27 = stackAr19.isEmpty();
        boolean boolean28 = stackAr1.equals((java.lang.Object) stackAr19);
        int int29 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
        int int12 = stackAr11.size();
        java.lang.Object[] objArray18 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) 'a', objArray18);
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray18);
        boolean boolean21 = stackAr11.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        java.lang.Object obj27 = new java.lang.Object();
        stackAr23.push(obj27);
        boolean boolean30 = stackAr23.equals((java.lang.Object) (byte) -1);
        boolean boolean31 = stackAr11.equals((java.lang.Object) boolean30);
        boolean boolean32 = stackAr11.isFull();
        boolean boolean33 = stackAr1.equals((java.lang.Object) boolean32);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr35.isEmpty();
        int int37 = stackAr35.size();
        boolean boolean38 = stackAr35.isFull();
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr40.equals((java.lang.Object) (byte) 1);
        boolean boolean43 = stackAr40.isFull();
        java.lang.Object obj44 = new java.lang.Object();
        stackAr40.push(obj44);
        boolean boolean46 = stackAr40.isFull();
        java.lang.String str47 = stackAr40.toString();
        stackAr40.push((java.lang.Object) (byte) 0);
        stackAr35.push((java.lang.Object) stackAr40);
        boolean boolean51 = stackAr40.isFull();
        java.lang.Object[] objArray57 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean58 = org.autotest.StackAr.repOkFunction((int) 'a', objArray57);
        boolean boolean59 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray57);
        stackAr40.push((java.lang.Object) boolean59);
        org.autotest.StackAr stackAr62 = new org.autotest.StackAr((int) '#');
        boolean boolean64 = stackAr62.equals((java.lang.Object) (byte) 100);
        boolean boolean65 = stackAr62.isEmpty();
        stackAr62.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr69 = new org.autotest.StackAr((int) '#');
        boolean boolean71 = stackAr69.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr73 = new org.autotest.StackAr((int) '#');
        boolean boolean75 = stackAr73.equals((java.lang.Object) (byte) 1);
        boolean boolean76 = stackAr73.isFull();
        java.lang.Object obj77 = new java.lang.Object();
        stackAr73.push(obj77);
        stackAr69.push((java.lang.Object) stackAr73);
        int int80 = stackAr69.size();
        stackAr62.push((java.lang.Object) stackAr69);
        boolean boolean82 = stackAr40.equals((java.lang.Object) stackAr62);
        java.lang.String str83 = stackAr40.toString();
        boolean boolean84 = stackAr1.equals((java.lang.Object) stackAr40);
        boolean boolean85 = stackAr40.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean11 = stackAr10.isFull();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr10);
        boolean boolean13 = stackAr10.isEmpty();
        int int14 = stackAr10.size();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
        int int16 = stackAr15.size();
        java.lang.Object[] objArray22 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) 'a', objArray22);
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray22);
        boolean boolean25 = stackAr15.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        java.lang.Object obj31 = new java.lang.Object();
        stackAr27.push(obj31);
        boolean boolean34 = stackAr27.equals((java.lang.Object) (byte) -1);
        boolean boolean35 = stackAr15.equals((java.lang.Object) boolean34);
        boolean boolean36 = stackAr15.isFull();
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr38.isEmpty();
        int int40 = stackAr38.size();
        stackAr38.push((java.lang.Object) (byte) 100);
        stackAr15.push((java.lang.Object) (byte) 100);
        boolean boolean44 = stackAr15.isEmpty();
        java.lang.Object obj45 = stackAr15.top();
        boolean boolean46 = stackAr10.equals(obj45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj47 = stackAr10.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + obj45 + "' != '" + (byte) 100 + "'", obj45, (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        boolean boolean6 = stackAr4.isEmpty();
        int int7 = stackAr4.size();
        int int8 = stackAr4.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) stackAr4);
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr11.isEmpty();
        boolean boolean13 = stackAr11.isEmpty();
        int int14 = stackAr11.size();
        boolean boolean15 = stackAr11.isEmpty();
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        java.lang.Class<?> wildcardClass17 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) '4');
        java.lang.Object obj13 = null;
        boolean boolean14 = stackAr7.equals(obj13);
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj16 = stackAr1.top();
        boolean boolean17 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[4]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        java.lang.String str2 = stackAr1.toString();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        int int6 = stackAr4.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        boolean boolean12 = stackAr8.isFull();
        int int13 = stackAr8.size();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        stackAr15.push((java.lang.Object) "[]");
        stackAr8.push((java.lang.Object) stackAr15);
        java.lang.Object obj21 = stackAr15.pop();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean24 = stackAr23.isFull();
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr26.isEmpty();
        boolean boolean28 = stackAr26.isEmpty();
        int int29 = stackAr26.size();
        int int30 = stackAr26.size();
        boolean boolean31 = stackAr23.equals((java.lang.Object) stackAr26);
        boolean boolean32 = stackAr15.equals((java.lang.Object) boolean31);
        boolean boolean33 = stackAr4.equals((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr15);
        java.lang.Object obj35 = stackAr1.top();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        stackAr37.push((java.lang.Object) "[]");
        java.lang.Class<?> wildcardClass42 = stackAr37.getClass();
        boolean boolean43 = stackAr1.equals((java.lang.Object) wildcardClass42);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "[]" + "'", obj21, "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.Object obj12 = stackAr1.top();
        java.lang.Object obj13 = stackAr1.top();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        java.lang.Object obj19 = new java.lang.Object();
        stackAr15.push(obj19);
        boolean boolean21 = stackAr15.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        java.lang.Object obj27 = new java.lang.Object();
        stackAr23.push(obj27);
        boolean boolean29 = stackAr23.isFull();
        java.lang.String str30 = stackAr23.toString();
        boolean boolean31 = stackAr15.equals((java.lang.Object) str30);
        boolean boolean32 = stackAr15.isEmpty();
        boolean boolean33 = stackAr15.isFull();
        java.lang.String str34 = stackAr15.toString();
        boolean boolean35 = stackAr1.equals((java.lang.Object) str34);
        java.lang.String str36 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + (byte) 0 + "'", obj12, (byte) 0);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (byte) 0 + "'", obj13, (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(100, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(100, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(100, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr8.equals((java.lang.Object) (short) 1);
        int int18 = stackAr8.size();
        java.lang.Object[] objArray27 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) 'a', objArray27);
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean30 = org.autotest.StackAr.repOkFunction(100, objArray27);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) '#', objArray27);
        stackAr8.push((java.lang.Object) '#');
        java.lang.Object obj34 = stackAr8.top();
        java.lang.Object obj35 = null;
        stackAr8.push(obj35);
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr38.equals((java.lang.Object) (byte) 1);
        boolean boolean41 = stackAr38.isFull();
        java.lang.Object obj42 = new java.lang.Object();
        stackAr38.push(obj42);
        boolean boolean44 = stackAr38.isFull();
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        java.lang.Object obj50 = new java.lang.Object();
        stackAr46.push(obj50);
        boolean boolean52 = stackAr46.isFull();
        java.lang.String str53 = stackAr46.toString();
        boolean boolean54 = stackAr38.equals((java.lang.Object) str53);
        boolean boolean55 = stackAr38.isEmpty();
        boolean boolean56 = stackAr38.isFull();
        org.autotest.StackAr stackAr58 = new org.autotest.StackAr((int) '#');
        boolean boolean60 = stackAr58.equals((java.lang.Object) (byte) 1);
        boolean boolean61 = stackAr58.isFull();
        boolean boolean62 = stackAr58.isFull();
        stackAr38.push((java.lang.Object) boolean62);
        boolean boolean64 = stackAr38.isFull();
        boolean boolean65 = stackAr38.isEmpty();
        java.lang.Object obj66 = stackAr38.top();
        boolean boolean67 = stackAr8.equals(obj66);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + '#' + "'", obj34, '#');
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + obj66 + "' != '" + false + "'", obj66, false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        boolean boolean12 = stackAr9.equals((java.lang.Object) '#');
        boolean boolean14 = stackAr9.equals((java.lang.Object) "hi!");
        boolean boolean15 = stackAr9.isFull();
        int int16 = stackAr9.size();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean19 = stackAr18.isFull();
        boolean boolean20 = stackAr9.equals((java.lang.Object) stackAr18);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean25 = stackAr22.isEmpty();
        boolean boolean27 = stackAr22.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        boolean boolean32 = stackAr29.isFull();
        stackAr29.push((java.lang.Object) '4');
        stackAr22.push((java.lang.Object) stackAr29);
        boolean boolean36 = stackAr22.isEmpty();
        java.lang.String str37 = stackAr22.toString();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr(0);
        int int40 = stackAr39.size();
        boolean boolean41 = stackAr22.equals((java.lang.Object) stackAr39);
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr43.isEmpty();
        int int45 = stackAr43.size();
        boolean boolean46 = stackAr43.isEmpty();
        boolean boolean47 = stackAr43.isEmpty();
        boolean boolean48 = stackAr43.isFull();
        int int49 = stackAr43.size();
        boolean boolean50 = stackAr22.equals((java.lang.Object) stackAr43);
        java.lang.Object obj51 = stackAr22.top();
        boolean boolean52 = stackAr9.equals((java.lang.Object) stackAr22);
        java.lang.Class<?> wildcardClass53 = stackAr22.getClass();
        boolean boolean54 = stackAr1.equals((java.lang.Object) stackAr22);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[[4]]" + "'", str37, "[[4]]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "[4]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.Object obj21 = new java.lang.Object();
        stackAr17.push(obj21);
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr17);
        java.lang.Object obj24 = stackAr17.top();
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr26.equals((java.lang.Object) (byte) 1);
        boolean boolean29 = stackAr26.isFull();
        java.lang.Object obj30 = new java.lang.Object();
        stackAr26.push(obj30);
        java.lang.String str32 = stackAr26.toString();
        int int33 = stackAr26.size();
        stackAr17.push((java.lang.Object) int33);
        int int35 = stackAr17.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr3.equals((java.lang.Object) (byte) 1);
        boolean boolean6 = stackAr3.isFull();
        boolean boolean7 = stackAr3.isFull();
        boolean boolean8 = stackAr3.isFull();
        int int9 = stackAr3.size();
        boolean boolean11 = stackAr3.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
        boolean boolean13 = stackAr12.isEmpty();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
        int int15 = stackAr14.size();
        stackAr12.push((java.lang.Object) int15);
        boolean boolean17 = stackAr3.equals((java.lang.Object) int15);
        stackAr1.push((java.lang.Object) boolean17);
        int int19 = stackAr1.size();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
        int int21 = stackAr20.size();
        java.lang.Object[] objArray27 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) 'a', objArray27);
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean30 = stackAr20.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean34 = stackAr32.equals((java.lang.Object) (byte) 1);
        boolean boolean35 = stackAr32.isFull();
        java.lang.Object obj36 = new java.lang.Object();
        stackAr32.push(obj36);
        boolean boolean39 = stackAr32.equals((java.lang.Object) (byte) -1);
        boolean boolean40 = stackAr20.equals((java.lang.Object) boolean39);
        boolean boolean41 = stackAr20.isFull();
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr43.isEmpty();
        int int45 = stackAr43.size();
        stackAr43.push((java.lang.Object) (byte) 100);
        stackAr20.push((java.lang.Object) (byte) 100);
        java.lang.Object obj49 = stackAr20.pop();
        boolean boolean50 = stackAr1.equals(obj49);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + (byte) 100 + "'", obj49, (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        int int9 = stackAr1.size();
        int int10 = stackAr1.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        java.lang.String str15 = stackAr12.toString();
        boolean boolean16 = stackAr12.isEmpty();
        int int17 = stackAr12.size();
        boolean boolean18 = stackAr1.equals((java.lang.Object) stackAr12);
        boolean boolean19 = stackAr12.isEmpty();
        java.lang.Class<?> wildcardClass20 = stackAr12.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        java.lang.String str15 = stackAr9.toString();
        boolean boolean16 = stackAr9.isEmpty();
        boolean boolean17 = stackAr9.isFull();
        java.lang.Object obj18 = stackAr9.top();
        boolean boolean19 = stackAr1.equals((java.lang.Object) stackAr9);
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        java.lang.Object obj29 = new java.lang.Object();
        stackAr25.push(obj29);
        stackAr21.push((java.lang.Object) stackAr25);
        int int32 = stackAr21.size();
        boolean boolean33 = stackAr9.equals((java.lang.Object) int32);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        int int5 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr5.isFull();
        java.lang.String str13 = stackAr5.toString();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        boolean boolean19 = stackAr15.isFull();
        boolean boolean20 = stackAr15.isFull();
        int int21 = stackAr15.size();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 100);
        boolean boolean26 = stackAr15.equals((java.lang.Object) stackAr23);
        boolean boolean27 = stackAr5.equals((java.lang.Object) stackAr23);
        boolean boolean28 = stackAr5.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        stackAr6.push((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        boolean boolean31 = stackAr28.isEmpty();
        stackAr28.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        stackAr35.push((java.lang.Object) stackAr39);
        int int46 = stackAr35.size();
        stackAr28.push((java.lang.Object) stackAr35);
        boolean boolean48 = stackAr6.equals((java.lang.Object) stackAr28);
        java.lang.String str49 = stackAr6.toString();
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean53 = stackAr51.equals((java.lang.Object) (byte) 1);
        boolean boolean54 = stackAr51.isFull();
        stackAr51.push((java.lang.Object) '4');
        java.lang.Object obj57 = null;
        boolean boolean58 = stackAr51.equals(obj57);
        boolean boolean59 = stackAr51.isEmpty();
        java.lang.String str60 = stackAr51.toString();
        boolean boolean61 = stackAr6.equals((java.lang.Object) stackAr51);
        java.lang.Object obj62 = stackAr51.pop();
        boolean boolean63 = stackAr51.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj64 = stackAr51.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[4]" + "'", str60, "[4]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + obj62 + "' != '" + '4' + "'", obj62, '4');
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isFull();
        boolean boolean16 = stackAr1.isEmpty();
        boolean boolean17 = stackAr1.isEmpty();
        int int18 = stackAr1.size();
        java.lang.Object obj19 = stackAr1.top();
        java.lang.Class<?> wildcardClass20 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "[4]");
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        int int7 = stackAr1.size();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.pop();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) (byte) 10);
        boolean boolean13 = stackAr1.equals((java.lang.Object) (byte) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + (short) 0 + "'", obj10, (short) 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        int int9 = stackAr1.size();
        int int10 = stackAr1.size();
        boolean boolean11 = stackAr1.isFull();
        java.lang.Object obj12 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "[]" + "'", obj12, "[]");
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean6 = stackAr1.equals((java.lang.Object) "[]");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) 'a');
        java.lang.String str10 = stackAr1.toString();
        java.lang.String str11 = stackAr1.toString();
        int int12 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.String str6 = stackAr1.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr1.toString();
        boolean boolean16 = stackAr1.isEmpty();
        java.lang.Object obj17 = stackAr1.top();
        java.lang.Object obj18 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[4]]" + "'", str15, "[[4]]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "[4]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "[4]");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) 0.0f);
        int int5 = stackAr1.size();
        java.lang.String str6 = stackAr1.toString();
        java.lang.Object[] objArray17 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) 'a', objArray17);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray17);
        boolean boolean20 = org.autotest.StackAr.repOkFunction(100, objArray17);
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray17);
        boolean boolean22 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray17);
        boolean boolean23 = org.autotest.StackAr.repOkFunction(100, objArray17);
        boolean boolean24 = org.autotest.StackAr.repOkFunction(0, objArray17);
        boolean boolean25 = stackAr1.equals((java.lang.Object) 0);
        boolean boolean26 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean8 = stackAr1.equals((java.lang.Object) (byte) -1);
        java.lang.String str9 = stackAr1.toString();
        java.lang.Object obj10 = stackAr1.top();
        java.lang.String str11 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isEmpty();
        boolean boolean20 = stackAr1.isFull();
        java.lang.String str21 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        java.lang.Object obj11 = stackAr1.pop();
        boolean boolean12 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        boolean boolean10 = stackAr8.isEmpty();
        int int11 = stackAr8.size();
        boolean boolean12 = stackAr8.isFull();
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) boolean13);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        boolean boolean20 = stackAr16.isFull();
        int int21 = stackAr16.size();
        int int22 = stackAr16.size();
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr16);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean26 = stackAr25.isEmpty();
        boolean boolean28 = stackAr25.equals((java.lang.Object) 0.0f);
        java.lang.Class<?> wildcardClass29 = stackAr25.getClass();
        stackAr1.push((java.lang.Object) stackAr25);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(100, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(100, objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.String str6 = stackAr1.toString();
        boolean boolean7 = stackAr1.isEmpty();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 100);
        boolean boolean13 = stackAr10.isEmpty();
        boolean boolean14 = stackAr10.isEmpty();
        boolean boolean15 = stackAr1.equals((java.lang.Object) stackAr10);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        boolean boolean19 = stackAr17.isEmpty();
        int int20 = stackAr17.size();
        int int21 = stackAr17.size();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        boolean boolean27 = stackAr23.isFull();
        boolean boolean28 = stackAr23.isFull();
        int int29 = stackAr23.size();
        boolean boolean31 = stackAr23.equals((java.lang.Object) 'a');
        boolean boolean32 = stackAr17.equals((java.lang.Object) boolean31);
        java.lang.String str33 = stackAr17.toString();
        boolean boolean34 = stackAr17.isEmpty();
        boolean boolean35 = stackAr17.isEmpty();
        boolean boolean36 = stackAr17.isEmpty();
        stackAr10.push((java.lang.Object) stackAr17);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        boolean boolean46 = stackAr39.equals((java.lang.Object) (byte) -1);
        int int47 = stackAr39.size();
        boolean boolean48 = stackAr39.isFull();
        org.autotest.StackAr stackAr50 = new org.autotest.StackAr((int) '#');
        boolean boolean51 = stackAr50.isEmpty();
        int int52 = stackAr50.size();
        boolean boolean53 = stackAr50.isEmpty();
        boolean boolean55 = stackAr50.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr57 = new org.autotest.StackAr((int) '#');
        boolean boolean59 = stackAr57.equals((java.lang.Object) (byte) 1);
        boolean boolean60 = stackAr57.isFull();
        stackAr57.push((java.lang.Object) '4');
        stackAr50.push((java.lang.Object) stackAr57);
        boolean boolean64 = stackAr50.isEmpty();
        boolean boolean65 = stackAr50.isFull();
        stackAr39.push((java.lang.Object) stackAr50);
        java.lang.Object obj67 = stackAr39.top();
        int int68 = stackAr39.size();
        boolean boolean69 = stackAr17.equals((java.lang.Object) int68);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "[[4]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "[[4]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "[[4]]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isEmpty();
        int int13 = stackAr1.size();
        int int14 = stackAr1.size();
        java.lang.Object obj15 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        java.lang.Object obj29 = new java.lang.Object();
        stackAr25.push(obj29);
        boolean boolean31 = stackAr17.equals(obj29);
        stackAr1.push((java.lang.Object) stackAr17);
        boolean boolean33 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
        int int35 = stackAr34.size();
        java.lang.Object[] objArray41 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean42 = org.autotest.StackAr.repOkFunction((int) 'a', objArray41);
        boolean boolean43 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray41);
        boolean boolean44 = stackAr34.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        java.lang.Object obj50 = new java.lang.Object();
        stackAr46.push(obj50);
        boolean boolean53 = stackAr46.equals((java.lang.Object) (byte) -1);
        boolean boolean54 = stackAr34.equals((java.lang.Object) boolean53);
        boolean boolean55 = stackAr34.isFull();
        org.autotest.StackAr stackAr57 = new org.autotest.StackAr((int) '#');
        boolean boolean58 = stackAr57.isEmpty();
        int int59 = stackAr57.size();
        stackAr57.push((java.lang.Object) (byte) 100);
        stackAr34.push((java.lang.Object) (byte) 100);
        stackAr34.push((java.lang.Object) 10.0f);
        java.lang.Object obj65 = stackAr34.top();
        stackAr1.push((java.lang.Object) stackAr34);
        boolean boolean67 = stackAr34.isFull();
        java.lang.Object[] objArray76 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean77 = org.autotest.StackAr.repOkFunction((int) 'a', objArray76);
        boolean boolean78 = org.autotest.StackAr.repOkFunction(0, objArray76);
        boolean boolean79 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray76);
        boolean boolean80 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray76);
        boolean boolean81 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray76);
        boolean boolean82 = stackAr34.equals((java.lang.Object) objArray76);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + obj65 + "' != '" + 10.0f + "'", obj65, 10.0f);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(1, objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(3, objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object[] objArray16 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) 'a', objArray16);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray16);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((-1), objArray16);
        boolean boolean20 = stackAr1.equals((java.lang.Object) objArray16);
        boolean boolean21 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass22 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.Object obj12 = stackAr1.top();
        java.lang.Object obj13 = stackAr1.top();
        boolean boolean14 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "[]");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        boolean boolean8 = stackAr1.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        boolean boolean14 = stackAr10.isFull();
        int int15 = stackAr10.size();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        stackAr17.push((java.lang.Object) "[]");
        stackAr10.push((java.lang.Object) stackAr17);
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr17);
        java.lang.String str24 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[4]" + "'", str24, "[4]");
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        boolean boolean16 = stackAr12.isFull();
        boolean boolean17 = stackAr12.isFull();
        int int18 = stackAr12.size();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr20.isEmpty();
        int int22 = stackAr20.size();
        boolean boolean23 = stackAr20.isEmpty();
        boolean boolean24 = stackAr12.equals((java.lang.Object) stackAr20);
        boolean boolean25 = stackAr0.equals((java.lang.Object) boolean24);
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        boolean boolean31 = stackAr27.isFull();
        int int32 = stackAr27.size();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr34.equals((java.lang.Object) (byte) 1);
        stackAr34.push((java.lang.Object) "[]");
        stackAr27.push((java.lang.Object) stackAr34);
        java.lang.Object obj40 = stackAr34.pop();
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean43 = stackAr34.equals((java.lang.Object) (short) 1);
        int int44 = stackAr34.size();
        java.lang.Object[] objArray53 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean54 = org.autotest.StackAr.repOkFunction((int) 'a', objArray53);
        boolean boolean55 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray53);
        boolean boolean56 = org.autotest.StackAr.repOkFunction(100, objArray53);
        boolean boolean57 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray53);
        boolean boolean58 = org.autotest.StackAr.repOkFunction((int) '#', objArray53);
        stackAr34.push((java.lang.Object) '#');
        boolean boolean60 = stackAr34.isFull();
        boolean boolean61 = stackAr0.equals((java.lang.Object) stackAr34);
        int int62 = stackAr0.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + obj40 + "' != '" + "[]" + "'", obj40, "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (byte) 100);
        boolean boolean2 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        int int7 = stackAr1.size();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.String str9 = stackAr1.toString();
        java.lang.String str10 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0]" + "'", str9, "[0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[0]" + "'", str10, "[0]");
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 1);
        boolean boolean16 = stackAr13.isFull();
        stackAr13.push((java.lang.Object) '4');
        boolean boolean20 = stackAr13.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        boolean boolean26 = stackAr22.isFull();
        int int27 = stackAr22.size();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        stackAr29.push((java.lang.Object) "[]");
        stackAr22.push((java.lang.Object) stackAr29);
        boolean boolean35 = stackAr13.equals((java.lang.Object) stackAr29);
        java.lang.Class<?> wildcardClass36 = stackAr29.getClass();
        boolean boolean37 = stackAr1.equals((java.lang.Object) wildcardClass36);
        java.lang.Object obj38 = stackAr1.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj39 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + obj38 + "' != '" + 0 + "'", obj38, 0);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        java.lang.String str14 = stackAr8.toString();
        java.lang.Object obj15 = stackAr8.top();
        stackAr1.push((java.lang.Object) stackAr8);
        int int17 = stackAr1.size();
        int int18 = stackAr1.size();
        java.lang.Class<?> wildcardClass19 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[4]" + "'", str14, "[4]");
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '4' + "'", obj15, '4');
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr(100);
        boolean boolean2 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr((int) (short) 1);
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr();
        int int4 = stackAr3.size();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        boolean boolean10 = stackAr6.isFull();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr12.isEmpty();
        int int14 = stackAr12.size();
        boolean boolean15 = stackAr12.isEmpty();
        boolean boolean17 = stackAr12.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        stackAr19.push((java.lang.Object) '4');
        stackAr12.push((java.lang.Object) stackAr19);
        java.lang.String str26 = stackAr19.toString();
        java.lang.Class<?> wildcardClass27 = stackAr19.getClass();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        boolean boolean32 = stackAr29.isFull();
        java.lang.Object obj33 = new java.lang.Object();
        stackAr29.push(obj33);
        boolean boolean36 = stackAr29.equals((java.lang.Object) (byte) -1);
        java.lang.Class<?> wildcardClass37 = stackAr29.getClass();
        java.lang.Object[] objArray38 = new java.lang.Object[] { (short) 1, stackAr3, boolean10, stackAr19, wildcardClass37 };
        boolean boolean39 = org.autotest.StackAr.repOkFunction((int) 'a', objArray38);
        java.lang.Class<?> wildcardClass40 = objArray38.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) 'a');
        java.lang.String str10 = stackAr1.toString();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        java.lang.String str13 = stackAr12.toString();
        boolean boolean15 = stackAr12.equals((java.lang.Object) 10L);
        stackAr1.push((java.lang.Object) boolean15);
        int int17 = stackAr1.size();
        boolean boolean18 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass19 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        java.lang.Object[] objArray13 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) 'a', objArray13);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray13);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(100, objArray13);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray13);
        stackAr1.push((java.lang.Object) objArray13);
        boolean boolean19 = stackAr1.isEmpty();
        int int20 = stackAr1.size();
        int int21 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) 1);
        java.lang.String str6 = stackAr1.toString();
        java.lang.Object obj7 = stackAr1.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1]" + "'", str6, "[1]");
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + 1 + "'", obj7, 1);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        java.lang.String str24 = stackAr20.toString();
        java.lang.Object[] objArray32 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) 'a', objArray32);
        boolean boolean34 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray32);
        boolean boolean35 = org.autotest.StackAr.repOkFunction(100, objArray32);
        boolean boolean36 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray32);
        stackAr20.push((java.lang.Object) objArray32);
        boolean boolean38 = org.autotest.StackAr.repOkFunction(10, objArray32);
        boolean boolean39 = org.autotest.StackAr.repOkFunction(0, objArray32);
        boolean boolean40 = org.autotest.StackAr.repOkFunction((int) ' ', objArray32);
        stackAr1.push((java.lang.Object) ' ');
        java.lang.Object obj42 = stackAr1.pop();
        org.autotest.StackAr stackAr44 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr44.isEmpty();
        boolean boolean47 = stackAr44.equals((java.lang.Object) '#');
        int int48 = stackAr44.size();
        java.lang.String str49 = stackAr44.toString();
        boolean boolean50 = stackAr1.equals((java.lang.Object) stackAr44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj51 = stackAr44.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + obj42 + "' != '" + ' ' + "'", obj42, ' ');
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        boolean boolean1 = stackAr0.isEmpty();
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
        int int3 = stackAr2.size();
        stackAr0.push((java.lang.Object) int3);
        java.lang.String str5 = stackAr0.toString();
        boolean boolean6 = stackAr0.isFull();
        java.lang.Object obj7 = stackAr0.top();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isEmpty();
        boolean boolean14 = stackAr9.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        stackAr16.push((java.lang.Object) '4');
        stackAr9.push((java.lang.Object) stackAr16);
        java.lang.Class<?> wildcardClass23 = stackAr9.getClass();
        boolean boolean24 = stackAr0.equals((java.lang.Object) stackAr9);
        java.lang.Object obj25 = stackAr0.top();
        java.lang.String str26 = stackAr0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0]" + "'", str5, "[0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + 0 + "'", obj7, 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + 0 + "'", obj25, 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[0]" + "'", str26, "[0]");
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr21.isEmpty();
        int int23 = stackAr21.size();
        boolean boolean24 = stackAr21.isEmpty();
        boolean boolean26 = stackAr21.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        stackAr28.push((java.lang.Object) '4');
        stackAr21.push((java.lang.Object) stackAr28);
        boolean boolean35 = stackAr21.isFull();
        java.lang.Object obj36 = stackAr21.top();
        stackAr1.push((java.lang.Object) stackAr21);
        int int38 = stackAr1.size();
        java.lang.String str39 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "[4]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '4');
        boolean boolean2 = stackAr1.isFull();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr4.equals((java.lang.Object) (byte) 100);
        boolean boolean7 = stackAr4.isEmpty();
        stackAr4.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr11.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        java.lang.Object obj19 = new java.lang.Object();
        stackAr15.push(obj19);
        stackAr11.push((java.lang.Object) stackAr15);
        int int22 = stackAr11.size();
        stackAr4.push((java.lang.Object) stackAr11);
        java.lang.Object obj24 = stackAr4.pop();
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr26.equals((java.lang.Object) (byte) 1);
        boolean boolean29 = stackAr26.isFull();
        boolean boolean30 = stackAr26.isFull();
        boolean boolean31 = stackAr26.isFull();
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str34 = stackAr33.toString();
        boolean boolean35 = stackAr33.isFull();
        stackAr33.push((java.lang.Object) 1);
        boolean boolean38 = stackAr33.isEmpty();
        boolean boolean39 = stackAr26.equals((java.lang.Object) stackAr33);
        java.lang.Object obj40 = stackAr33.top();
        java.lang.Object obj41 = stackAr33.pop();
        stackAr4.push(obj41);
        org.autotest.StackAr stackAr44 = new org.autotest.StackAr((int) '#');
        boolean boolean46 = stackAr44.equals((java.lang.Object) (byte) 1);
        boolean boolean47 = stackAr44.isFull();
        stackAr44.push((java.lang.Object) '4');
        java.lang.String str50 = stackAr44.toString();
        java.lang.Object obj51 = stackAr44.pop();
        stackAr4.push(obj51);
        stackAr1.push((java.lang.Object) stackAr4);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + obj40 + "' != '" + 1 + "'", obj40, 1);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + 1 + "'", obj41, 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[4]" + "'", str50, "[4]");
        org.junit.Assert.assertEquals("'" + obj51 + "' != '" + '4' + "'", obj51, '4');
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) ' ');
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        boolean boolean4 = stackAr3.isEmpty();
        boolean boolean6 = stackAr3.equals((java.lang.Object) '#');
        boolean boolean8 = stackAr3.equals((java.lang.Object) "hi!");
        boolean boolean9 = stackAr3.isFull();
        int int10 = stackAr3.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean13 = stackAr12.isFull();
        boolean boolean14 = stackAr3.equals((java.lang.Object) stackAr12);
        boolean boolean15 = stackAr12.isEmpty();
        boolean boolean16 = stackAr1.equals((java.lang.Object) stackAr12);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        stackAr6.push((java.lang.Object) "[]");
        java.lang.Object obj11 = stackAr6.pop();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr6);
        int int13 = stackAr6.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "[]" + "'", obj11, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        boolean boolean1 = stackAr0.isEmpty();
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
        int int3 = stackAr2.size();
        stackAr0.push((java.lang.Object) int3);
        java.lang.String str5 = stackAr0.toString();
        boolean boolean6 = stackAr0.isFull();
        java.lang.Object obj7 = stackAr0.top();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isEmpty();
        boolean boolean14 = stackAr9.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        stackAr16.push((java.lang.Object) '4');
        stackAr9.push((java.lang.Object) stackAr16);
        java.lang.Class<?> wildcardClass23 = stackAr9.getClass();
        boolean boolean24 = stackAr0.equals((java.lang.Object) stackAr9);
        boolean boolean25 = stackAr0.isFull();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0]" + "'", str5, "[0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + 0 + "'", obj7, 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '4');
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr3.equals((java.lang.Object) (byte) 1);
        boolean boolean6 = stackAr3.isFull();
        stackAr3.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        java.lang.String str16 = stackAr10.toString();
        boolean boolean17 = stackAr10.isEmpty();
        boolean boolean18 = stackAr3.equals((java.lang.Object) boolean17);
        boolean boolean19 = stackAr1.equals((java.lang.Object) stackAr3);
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
        int int21 = stackAr20.size();
        java.lang.Object[] objArray27 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) 'a', objArray27);
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean30 = stackAr20.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean34 = stackAr32.equals((java.lang.Object) (byte) 1);
        boolean boolean35 = stackAr32.isFull();
        java.lang.Object obj36 = new java.lang.Object();
        stackAr32.push(obj36);
        boolean boolean39 = stackAr32.equals((java.lang.Object) (byte) -1);
        boolean boolean40 = stackAr20.equals((java.lang.Object) boolean39);
        boolean boolean41 = stackAr20.isFull();
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr43.isEmpty();
        int int45 = stackAr43.size();
        stackAr43.push((java.lang.Object) (byte) 100);
        stackAr20.push((java.lang.Object) (byte) 100);
        java.lang.Object obj49 = stackAr20.pop();
        stackAr1.push(obj49);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + (byte) 100 + "'", obj49, (byte) 100);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        boolean boolean9 = stackAr5.isFull();
        int int10 = stackAr5.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        stackAr12.push((java.lang.Object) "[]");
        stackAr5.push((java.lang.Object) stackAr12);
        java.lang.Object obj18 = stackAr12.pop();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean21 = stackAr20.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        boolean boolean25 = stackAr23.isEmpty();
        int int26 = stackAr23.size();
        int int27 = stackAr23.size();
        boolean boolean28 = stackAr20.equals((java.lang.Object) stackAr23);
        boolean boolean29 = stackAr12.equals((java.lang.Object) boolean28);
        boolean boolean30 = stackAr1.equals((java.lang.Object) stackAr12);
        int int31 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + "[]" + "'", obj18, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        boolean boolean25 = stackAr21.isFull();
        stackAr1.push((java.lang.Object) boolean25);
        boolean boolean27 = stackAr1.isFull();
        boolean boolean28 = stackAr1.isEmpty();
        java.lang.Object obj29 = stackAr1.top();
        int int30 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + false + "'", obj29, false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isEmpty();
        boolean boolean13 = stackAr1.equals((java.lang.Object) stackAr9);
        java.lang.String str14 = stackAr9.toString();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str17 = stackAr16.toString();
        stackAr9.push((java.lang.Object) stackAr16);
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        boolean boolean24 = stackAr20.isFull();
        boolean boolean25 = stackAr20.isFull();
        int int26 = stackAr20.size();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        java.lang.Object obj32 = new java.lang.Object();
        stackAr28.push(obj32);
        boolean boolean34 = stackAr20.equals(obj32);
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 1);
        boolean boolean39 = stackAr36.isFull();
        boolean boolean40 = stackAr36.isFull();
        boolean boolean41 = stackAr36.isFull();
        int int42 = stackAr36.size();
        org.autotest.StackAr stackAr44 = new org.autotest.StackAr((int) '#');
        boolean boolean46 = stackAr44.equals((java.lang.Object) (byte) 1);
        boolean boolean47 = stackAr44.isFull();
        java.lang.Object obj48 = new java.lang.Object();
        stackAr44.push(obj48);
        boolean boolean50 = stackAr36.equals(obj48);
        stackAr20.push((java.lang.Object) stackAr36);
        boolean boolean52 = stackAr20.isFull();
        java.lang.Object obj53 = stackAr20.pop();
        boolean boolean54 = stackAr20.isFull();
        stackAr9.push((java.lang.Object) stackAr20);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        stackAr1.push((java.lang.Object) (-1L));
        java.lang.String str13 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.String str5 = stackAr1.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr6.isEmpty();
        int int8 = stackAr6.size();
        boolean boolean9 = stackAr6.isEmpty();
        boolean boolean11 = stackAr6.equals((java.lang.Object) (short) -1);
        stackAr1.push((java.lang.Object) (short) -1);
        java.lang.Object obj13 = stackAr1.pop();
        java.lang.String str14 = stackAr1.toString();
        int int15 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (short) -1 + "'", obj13, (short) -1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        java.lang.Object obj29 = new java.lang.Object();
        stackAr25.push(obj29);
        boolean boolean31 = stackAr17.equals(obj29);
        stackAr1.push((java.lang.Object) stackAr17);
        boolean boolean33 = stackAr17.isEmpty();
        boolean boolean34 = stackAr17.isEmpty();
        int int35 = stackAr17.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = stackAr17.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        java.lang.String str29 = stackAr0.toString();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr();
        int int31 = stackAr30.size();
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr(1);
        boolean boolean34 = stackAr33.isFull();
        stackAr30.push((java.lang.Object) boolean34);
        boolean boolean36 = stackAr0.equals((java.lang.Object) stackAr30);
        boolean boolean37 = stackAr30.isEmpty();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        boolean boolean45 = stackAr39.isFull();
        java.lang.String str46 = stackAr39.toString();
        java.lang.Object obj47 = stackAr39.top();
        java.lang.Object obj48 = stackAr39.top();
        java.lang.Object obj49 = stackAr39.top();
        boolean boolean50 = stackAr39.isEmpty();
        boolean boolean51 = stackAr30.equals((java.lang.Object) boolean50);
        java.lang.Object obj52 = stackAr30.top();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100]" + "'", str29, "[100]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + false + "'", obj52, false);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isFull();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isEmpty();
        boolean boolean21 = stackAr17.isEmpty();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        stackAr1.push((java.lang.Object) int23);
        boolean boolean25 = stackAr1.isEmpty();
        int int26 = stackAr1.size();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        java.lang.Object obj32 = new java.lang.Object();
        stackAr28.push(obj32);
        boolean boolean35 = stackAr28.equals((java.lang.Object) (byte) -1);
        int int36 = stackAr28.size();
        boolean boolean37 = stackAr28.isFull();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr39.isEmpty();
        int int41 = stackAr39.size();
        boolean boolean42 = stackAr39.isEmpty();
        boolean boolean44 = stackAr39.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        stackAr46.push((java.lang.Object) '4');
        stackAr39.push((java.lang.Object) stackAr46);
        boolean boolean53 = stackAr39.isEmpty();
        boolean boolean54 = stackAr39.isFull();
        stackAr28.push((java.lang.Object) stackAr39);
        java.lang.Object obj56 = stackAr39.top();
        stackAr1.push(obj56);
        org.autotest.StackAr stackAr59 = new org.autotest.StackAr((int) '#');
        boolean boolean60 = stackAr59.isEmpty();
        boolean boolean61 = stackAr59.isEmpty();
        int int62 = stackAr59.size();
        boolean boolean63 = stackAr59.isEmpty();
        int int64 = stackAr59.size();
        stackAr1.push((java.lang.Object) stackAr59);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "[4]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass13 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean23 = stackAr8.isEmpty();
        java.lang.Object obj24 = stackAr8.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "[4]");
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        java.lang.String str11 = stackAr0.toString();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr(0);
        boolean boolean14 = stackAr0.equals((java.lang.Object) 0);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        boolean boolean20 = stackAr16.isFull();
        int int21 = stackAr16.size();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        stackAr23.push((java.lang.Object) "[]");
        stackAr16.push((java.lang.Object) stackAr23);
        java.lang.Object obj29 = stackAr23.pop();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean32 = stackAr31.isFull();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        boolean boolean36 = stackAr34.isEmpty();
        int int37 = stackAr34.size();
        int int38 = stackAr34.size();
        boolean boolean39 = stackAr31.equals((java.lang.Object) stackAr34);
        boolean boolean40 = stackAr23.equals((java.lang.Object) boolean39);
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr42.equals((java.lang.Object) (byte) 100);
        boolean boolean45 = stackAr42.isEmpty();
        boolean boolean46 = stackAr42.isEmpty();
        java.lang.String str47 = stackAr42.toString();
        boolean boolean48 = stackAr42.isEmpty();
        int int49 = stackAr42.size();
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean53 = stackAr51.equals((java.lang.Object) (byte) 100);
        boolean boolean54 = stackAr51.isEmpty();
        boolean boolean55 = stackAr51.isEmpty();
        boolean boolean56 = stackAr42.equals((java.lang.Object) stackAr51);
        stackAr23.push((java.lang.Object) stackAr51);
        stackAr0.push((java.lang.Object) stackAr51);
        org.autotest.StackAr stackAr60 = new org.autotest.StackAr((int) '#');
        boolean boolean62 = stackAr60.equals((java.lang.Object) (byte) 1);
        boolean boolean63 = stackAr60.isFull();
        java.lang.Object obj64 = new java.lang.Object();
        stackAr60.push(obj64);
        org.autotest.StackAr stackAr67 = new org.autotest.StackAr((int) '#');
        boolean boolean68 = stackAr67.isEmpty();
        int int69 = stackAr67.size();
        boolean boolean70 = stackAr67.isEmpty();
        boolean boolean72 = stackAr67.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr74 = new org.autotest.StackAr((int) '#');
        boolean boolean76 = stackAr74.equals((java.lang.Object) (byte) 1);
        boolean boolean77 = stackAr74.isFull();
        stackAr74.push((java.lang.Object) '4');
        stackAr67.push((java.lang.Object) stackAr74);
        stackAr60.push((java.lang.Object) stackAr67);
        boolean boolean82 = stackAr67.isEmpty();
        boolean boolean83 = stackAr0.equals((java.lang.Object) boolean82);
        int int84 = stackAr0.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + "[]" + "'", obj29, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        java.lang.String str29 = stackAr0.toString();
        int int30 = stackAr0.size();
        java.lang.Object obj31 = null;
        stackAr0.push(obj31);
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        int int36 = stackAr34.size();
        boolean boolean38 = stackAr34.equals((java.lang.Object) 100L);
        boolean boolean39 = stackAr34.isFull();
        java.lang.String str40 = stackAr34.toString();
        stackAr0.push((java.lang.Object) stackAr34);
        boolean boolean42 = stackAr0.isFull();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100]" + "'", str29, "[100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object obj13 = stackAr1.top();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        java.lang.String str16 = stackAr15.toString();
        stackAr1.push((java.lang.Object) stackAr15);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean25 = stackAr24.isEmpty();
        stackAr19.push((java.lang.Object) stackAr24);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str29 = stackAr28.toString();
        boolean boolean30 = stackAr28.isFull();
        stackAr28.push((java.lang.Object) 1);
        boolean boolean33 = stackAr28.isEmpty();
        stackAr24.push((java.lang.Object) boolean33);
        java.lang.Object obj35 = stackAr24.top();
        java.lang.Object obj36 = stackAr24.top();
        int int37 = stackAr24.size();
        stackAr1.push((java.lang.Object) int37);
        java.lang.String str39 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + false + "'", obj35, false);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + false + "'", obj36, false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[[],[],1]" + "'", str39, "[[],[],1]");
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        int int12 = stackAr1.size();
        java.lang.Object obj13 = stackAr1.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj14 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(obj13);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.lang.Object[] objArray11 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) 'a', objArray11);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray11);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(100, objArray11);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray11);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray11);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) '#', objArray11);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray11);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.String str7 = stackAr1.toString();
        int int8 = stackAr1.size();
        boolean boolean9 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        int int11 = stackAr1.size();
        java.lang.String str12 = stackAr1.toString();
        int int13 = stackAr1.size();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        stackAr15.push((java.lang.Object) stackAr19);
        boolean boolean26 = stackAr19.isFull();
        boolean boolean27 = stackAr19.isEmpty();
        boolean boolean28 = stackAr1.equals((java.lang.Object) stackAr19);
        java.lang.String str29 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        java.lang.Object obj26 = new java.lang.Object();
        stackAr22.push(obj26);
        boolean boolean28 = stackAr22.isFull();
        java.lang.String str29 = stackAr22.toString();
        stackAr22.push((java.lang.Object) (byte) 0);
        stackAr17.push((java.lang.Object) stackAr22);
        boolean boolean33 = stackAr1.equals((java.lang.Object) stackAr22);
        boolean boolean34 = stackAr22.isEmpty();
        java.lang.String str35 = stackAr22.toString();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        boolean boolean40 = stackAr37.isFull();
        stackAr37.push((java.lang.Object) '4');
        boolean boolean44 = stackAr37.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        boolean boolean50 = stackAr46.isFull();
        int int51 = stackAr46.size();
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean55 = stackAr53.equals((java.lang.Object) (byte) 1);
        stackAr53.push((java.lang.Object) "[]");
        stackAr46.push((java.lang.Object) stackAr53);
        boolean boolean59 = stackAr37.equals((java.lang.Object) stackAr53);
        java.lang.Class<?> wildcardClass60 = stackAr53.getClass();
        boolean boolean61 = stackAr22.equals((java.lang.Object) stackAr53);
        java.lang.Class<?> wildcardClass62 = stackAr53.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr24.isEmpty();
        int int26 = stackAr24.size();
        boolean boolean27 = stackAr24.isEmpty();
        boolean boolean29 = stackAr24.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr(0);
        stackAr24.push((java.lang.Object) 0);
        stackAr8.push((java.lang.Object) 0);
        int int34 = stackAr8.size();
        java.lang.Object obj35 = stackAr8.pop();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        boolean boolean40 = stackAr37.isFull();
        boolean boolean41 = stackAr37.isFull();
        int int42 = stackAr37.size();
        org.autotest.StackAr stackAr44 = new org.autotest.StackAr((int) '#');
        boolean boolean46 = stackAr44.equals((java.lang.Object) (byte) 1);
        stackAr44.push((java.lang.Object) "[]");
        stackAr37.push((java.lang.Object) stackAr44);
        boolean boolean50 = stackAr37.isEmpty();
        java.lang.Object obj51 = stackAr37.top();
        stackAr8.push(obj51);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + 0 + "'", obj35, 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "[[]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "[[]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "[[]]");
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        java.lang.String str12 = stackAr11.toString();
        boolean boolean13 = stackAr1.equals((java.lang.Object) str12);
        boolean boolean14 = stackAr1.isEmpty();
        boolean boolean15 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass16 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        java.lang.Object obj19 = stackAr1.pop();
        java.lang.Class<?> wildcardClass20 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        java.lang.String str21 = stackAr0.toString();
        boolean boolean22 = stackAr0.isEmpty();
        int int23 = stackAr0.size();
        java.lang.String str24 = stackAr0.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.String str6 = stackAr1.toString();
        boolean boolean7 = stackAr1.isEmpty();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 100);
        boolean boolean13 = stackAr10.isEmpty();
        boolean boolean14 = stackAr10.isEmpty();
        boolean boolean15 = stackAr1.equals((java.lang.Object) stackAr10);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        boolean boolean19 = stackAr17.isEmpty();
        int int20 = stackAr17.size();
        int int21 = stackAr17.size();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        boolean boolean27 = stackAr23.isFull();
        boolean boolean28 = stackAr23.isFull();
        int int29 = stackAr23.size();
        boolean boolean31 = stackAr23.equals((java.lang.Object) 'a');
        boolean boolean32 = stackAr17.equals((java.lang.Object) boolean31);
        java.lang.String str33 = stackAr17.toString();
        boolean boolean34 = stackAr17.isEmpty();
        boolean boolean35 = stackAr17.isEmpty();
        boolean boolean36 = stackAr17.isEmpty();
        stackAr10.push((java.lang.Object) stackAr17);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        boolean boolean43 = stackAr39.isFull();
        boolean boolean44 = stackAr39.isFull();
        int int45 = stackAr39.size();
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean49 = stackAr47.equals((java.lang.Object) (byte) 1);
        boolean boolean50 = stackAr47.isFull();
        java.lang.Object obj51 = new java.lang.Object();
        stackAr47.push(obj51);
        boolean boolean53 = stackAr39.equals(obj51);
        org.autotest.StackAr stackAr55 = new org.autotest.StackAr((int) '#');
        boolean boolean57 = stackAr55.equals((java.lang.Object) (byte) 1);
        boolean boolean58 = stackAr55.isFull();
        boolean boolean59 = stackAr55.isFull();
        boolean boolean60 = stackAr55.isFull();
        int int61 = stackAr55.size();
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) '#');
        boolean boolean65 = stackAr63.equals((java.lang.Object) (byte) 1);
        boolean boolean66 = stackAr63.isFull();
        java.lang.Object obj67 = new java.lang.Object();
        stackAr63.push(obj67);
        boolean boolean69 = stackAr55.equals(obj67);
        stackAr39.push((java.lang.Object) stackAr55);
        boolean boolean71 = stackAr39.isFull();
        java.lang.Object obj72 = stackAr39.pop();
        stackAr10.push(obj72);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "[]");
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        boolean boolean9 = stackAr1.isFull();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str12 = stackAr11.toString();
        boolean boolean13 = stackAr11.isFull();
        stackAr11.push((java.lang.Object) 1);
        boolean boolean16 = stackAr1.equals((java.lang.Object) 1);
        java.lang.Class<?> wildcardClass17 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(100, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr16.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        int int23 = stackAr19.size();
        boolean boolean24 = stackAr16.equals((java.lang.Object) stackAr19);
        boolean boolean25 = stackAr8.equals((java.lang.Object) boolean24);
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = stackAr27.isEmpty();
        boolean boolean31 = stackAr27.isEmpty();
        java.lang.String str32 = stackAr27.toString();
        boolean boolean33 = stackAr27.isEmpty();
        int int34 = stackAr27.size();
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 100);
        boolean boolean39 = stackAr36.isEmpty();
        boolean boolean40 = stackAr36.isEmpty();
        boolean boolean41 = stackAr27.equals((java.lang.Object) stackAr36);
        stackAr8.push((java.lang.Object) stackAr36);
        java.lang.String str43 = stackAr36.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        int int5 = stackAr1.size();
        java.lang.String str6 = stackAr1.toString();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        java.lang.Object obj17 = stackAr9.top();
        java.lang.Object obj18 = stackAr9.top();
        stackAr9.push((java.lang.Object) (-1L));
        boolean boolean21 = stackAr1.equals((java.lang.Object) (-1L));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        java.lang.Object[] objArray4 = new java.lang.Object[] { 1.0d };
        boolean boolean5 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray4);
        boolean boolean6 = org.autotest.StackAr.repOkFunction((int) '4', objArray4);
        boolean boolean7 = org.autotest.StackAr.repOkFunction(3, objArray4);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        boolean boolean20 = stackAr1.isFull();
        boolean boolean21 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        boolean boolean10 = stackAr8.isEmpty();
        int int11 = stackAr8.size();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 1);
        stackAr13.push((java.lang.Object) "[]");
        java.lang.Object obj18 = stackAr13.pop();
        boolean boolean19 = stackAr8.equals((java.lang.Object) stackAr13);
        boolean boolean20 = stackAr1.equals((java.lang.Object) stackAr13);
        int int21 = stackAr1.size();
        java.lang.Class<?> wildcardClass22 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + "[]" + "'", obj18, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        boolean boolean29 = stackAr0.isEmpty();
        boolean boolean30 = stackAr0.isEmpty();
        boolean boolean31 = stackAr0.isFull();
        boolean boolean32 = stackAr0.isFull();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) 10.0f);
        boolean boolean31 = stackAr0.isFull();
        int int32 = stackAr0.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((-1), objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(2, objArray7);
        java.lang.Class<?> wildcardClass12 = objArray7.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass6 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean8 = stackAr7.isFull();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr10.isEmpty();
        boolean boolean12 = stackAr10.isEmpty();
        int int13 = stackAr10.size();
        int int14 = stackAr10.size();
        boolean boolean15 = stackAr7.equals((java.lang.Object) stackAr10);
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        int int17 = stackAr1.size();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
        int int19 = stackAr18.size();
        java.lang.Object[] objArray25 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean26 = org.autotest.StackAr.repOkFunction((int) 'a', objArray25);
        boolean boolean27 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray25);
        boolean boolean28 = stackAr18.equals((java.lang.Object) (byte) 10);
        java.lang.String str29 = stackAr18.toString();
        java.lang.String str30 = stackAr18.toString();
        java.lang.String str31 = stackAr18.toString();
        stackAr1.push((java.lang.Object) str31);
        java.lang.Object obj33 = stackAr1.top();
        java.lang.Object[] objArray44 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean45 = org.autotest.StackAr.repOkFunction((int) 'a', objArray44);
        boolean boolean46 = org.autotest.StackAr.repOkFunction(0, objArray44);
        boolean boolean47 = org.autotest.StackAr.repOkFunction(1, objArray44);
        boolean boolean48 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray44);
        boolean boolean49 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray44);
        boolean boolean50 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray44);
        boolean boolean51 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray44);
        stackAr1.push((java.lang.Object) objArray44);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "[]" + "'", obj33, "[]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        java.lang.String str2 = stackAr1.toString();
        int int3 = stackAr1.size();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        boolean boolean11 = stackAr5.isFull();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 1);
        boolean boolean16 = stackAr13.isFull();
        java.lang.Object obj17 = new java.lang.Object();
        stackAr13.push(obj17);
        boolean boolean19 = stackAr13.isFull();
        java.lang.String str20 = stackAr13.toString();
        boolean boolean21 = stackAr5.equals((java.lang.Object) str20);
        boolean boolean22 = stackAr5.isEmpty();
        boolean boolean23 = stackAr5.isFull();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        boolean boolean29 = stackAr25.isFull();
        stackAr5.push((java.lang.Object) boolean29);
        boolean boolean31 = stackAr5.isFull();
        boolean boolean32 = stackAr5.isEmpty();
        java.lang.Object obj33 = stackAr5.top();
        java.lang.Object obj34 = stackAr5.top();
        stackAr1.push((java.lang.Object) stackAr5);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + false + "'", obj33, false);
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + false + "'", obj34, false);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.pop();
        boolean boolean11 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4]" + "'", str7, "[4]");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + '4' + "'", obj8, '4');
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + '4' + "'", obj10, '4');
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        java.lang.String str11 = stackAr7.toString();
        java.lang.Object[] objArray19 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) 'a', objArray19);
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray19);
        boolean boolean22 = org.autotest.StackAr.repOkFunction(100, objArray19);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray19);
        stackAr7.push((java.lang.Object) objArray19);
        boolean boolean25 = stackAr1.equals((java.lang.Object) objArray19);
        java.lang.String str26 = stackAr1.toString();
        int int27 = stackAr1.size();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 100);
        boolean boolean32 = stackAr29.isEmpty();
        boolean boolean33 = stackAr29.isEmpty();
        java.lang.String str34 = stackAr29.toString();
        boolean boolean35 = stackAr29.isEmpty();
        int int36 = stackAr29.size();
        stackAr1.push((java.lang.Object) int36);
        java.lang.Object[] objArray48 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean49 = org.autotest.StackAr.repOkFunction((int) 'a', objArray48);
        boolean boolean50 = org.autotest.StackAr.repOkFunction(0, objArray48);
        boolean boolean51 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray48);
        boolean boolean52 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray48);
        boolean boolean53 = org.autotest.StackAr.repOkFunction(2, objArray48);
        boolean boolean54 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray48);
        boolean boolean55 = org.autotest.StackAr.repOkFunction(10, objArray48);
        stackAr1.push((java.lang.Object) boolean55);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[[]]" + "'", str26, "[[]]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        stackAr5.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        java.lang.String str18 = stackAr12.toString();
        boolean boolean19 = stackAr12.isEmpty();
        boolean boolean20 = stackAr5.equals((java.lang.Object) boolean19);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean25 = stackAr22.isEmpty();
        boolean boolean27 = stackAr22.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        boolean boolean32 = stackAr29.isFull();
        stackAr29.push((java.lang.Object) '4');
        stackAr22.push((java.lang.Object) stackAr29);
        boolean boolean36 = stackAr22.isEmpty();
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr38.isEmpty();
        int int40 = stackAr38.size();
        boolean boolean41 = stackAr38.isFull();
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 1);
        boolean boolean46 = stackAr43.isFull();
        java.lang.Object obj47 = new java.lang.Object();
        stackAr43.push(obj47);
        boolean boolean49 = stackAr43.isFull();
        java.lang.String str50 = stackAr43.toString();
        stackAr43.push((java.lang.Object) (byte) 0);
        stackAr38.push((java.lang.Object) stackAr43);
        boolean boolean54 = stackAr22.equals((java.lang.Object) stackAr43);
        stackAr5.push((java.lang.Object) stackAr22);
        java.lang.Object obj56 = stackAr5.top();
        boolean boolean58 = stackAr5.equals((java.lang.Object) (-1L));
        boolean boolean59 = stackAr5.isFull();
        boolean boolean60 = stackAr1.equals((java.lang.Object) stackAr5);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "[[4]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "[[4]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "[[4]]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr16.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        int int23 = stackAr19.size();
        boolean boolean24 = stackAr16.equals((java.lang.Object) stackAr19);
        boolean boolean25 = stackAr8.equals((java.lang.Object) boolean24);
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = stackAr27.isEmpty();
        boolean boolean31 = stackAr27.isEmpty();
        java.lang.String str32 = stackAr27.toString();
        boolean boolean33 = stackAr27.isEmpty();
        int int34 = stackAr27.size();
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 100);
        boolean boolean39 = stackAr36.isEmpty();
        boolean boolean40 = stackAr36.isEmpty();
        boolean boolean41 = stackAr27.equals((java.lang.Object) stackAr36);
        stackAr8.push((java.lang.Object) stackAr36);
        boolean boolean43 = stackAr36.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        java.lang.String str2 = stackAr1.toString();
        int int3 = stackAr1.size();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        boolean boolean9 = stackAr5.isFull();
        boolean boolean10 = stackAr5.isFull();
        int int11 = stackAr5.size();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 1);
        boolean boolean16 = stackAr13.isFull();
        java.lang.Object obj17 = new java.lang.Object();
        stackAr13.push(obj17);
        boolean boolean19 = stackAr5.equals(obj17);
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        boolean boolean25 = stackAr21.isFull();
        boolean boolean26 = stackAr21.isFull();
        int int27 = stackAr21.size();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        boolean boolean32 = stackAr29.isFull();
        java.lang.Object obj33 = new java.lang.Object();
        stackAr29.push(obj33);
        boolean boolean35 = stackAr21.equals(obj33);
        stackAr5.push((java.lang.Object) stackAr21);
        boolean boolean37 = stackAr5.isFull();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr39.isEmpty();
        int int41 = stackAr39.size();
        boolean boolean42 = stackAr39.isEmpty();
        boolean boolean44 = stackAr39.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        stackAr46.push((java.lang.Object) '4');
        stackAr39.push((java.lang.Object) stackAr46);
        boolean boolean53 = stackAr39.isEmpty();
        boolean boolean54 = stackAr39.isFull();
        boolean boolean55 = stackAr39.isEmpty();
        java.lang.Object obj56 = stackAr39.pop();
        boolean boolean58 = stackAr39.equals((java.lang.Object) 0);
        boolean boolean59 = stackAr39.isFull();
        stackAr5.push((java.lang.Object) boolean59);
        boolean boolean61 = stackAr1.equals((java.lang.Object) stackAr5);
        boolean boolean62 = stackAr5.isEmpty();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "[4]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        java.lang.String str11 = stackAr7.toString();
        java.lang.Object[] objArray19 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) 'a', objArray19);
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray19);
        boolean boolean22 = org.autotest.StackAr.repOkFunction(100, objArray19);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray19);
        stackAr7.push((java.lang.Object) objArray19);
        boolean boolean25 = stackAr1.equals((java.lang.Object) objArray19);
        java.lang.String str26 = stackAr1.toString();
        int int27 = stackAr1.size();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 100);
        boolean boolean32 = stackAr29.isEmpty();
        boolean boolean33 = stackAr29.isEmpty();
        java.lang.String str34 = stackAr29.toString();
        boolean boolean35 = stackAr29.isEmpty();
        int int36 = stackAr29.size();
        stackAr1.push((java.lang.Object) int36);
        int int38 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[[]]" + "'", str26, "[[]]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        java.lang.Object obj6 = stackAr1.top();
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "[]" + "'", obj6, "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[[]]" + "'", str7, "[[]]");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + "[]" + "'", obj8, "[]");
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) '4', objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction(0, objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean7 = stackAr6.isEmpty();
        stackAr1.push((java.lang.Object) stackAr6);
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str11 = stackAr10.toString();
        boolean boolean12 = stackAr10.isFull();
        stackAr10.push((java.lang.Object) 1);
        boolean boolean15 = stackAr10.isEmpty();
        stackAr6.push((java.lang.Object) boolean15);
        java.lang.Object obj17 = stackAr6.top();
        java.lang.Object obj18 = stackAr6.top();
        java.lang.Object obj19 = stackAr6.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = stackAr6.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + false + "'", obj18, false);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + false + "'", obj19, false);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) 'a');
        java.lang.String str10 = stackAr1.toString();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        java.lang.String str13 = stackAr12.toString();
        boolean boolean15 = stackAr12.equals((java.lang.Object) 10L);
        stackAr1.push((java.lang.Object) boolean15);
        java.lang.Object obj17 = stackAr1.top();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) (short) 1);
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr();
        int int22 = stackAr21.size();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr24.equals((java.lang.Object) (byte) 1);
        boolean boolean27 = stackAr24.isFull();
        boolean boolean28 = stackAr24.isFull();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr30.isEmpty();
        int int32 = stackAr30.size();
        boolean boolean33 = stackAr30.isEmpty();
        boolean boolean35 = stackAr30.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        boolean boolean40 = stackAr37.isFull();
        stackAr37.push((java.lang.Object) '4');
        stackAr30.push((java.lang.Object) stackAr37);
        java.lang.String str44 = stackAr37.toString();
        java.lang.Class<?> wildcardClass45 = stackAr37.getClass();
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean49 = stackAr47.equals((java.lang.Object) (byte) 1);
        boolean boolean50 = stackAr47.isFull();
        java.lang.Object obj51 = new java.lang.Object();
        stackAr47.push(obj51);
        boolean boolean54 = stackAr47.equals((java.lang.Object) (byte) -1);
        java.lang.Class<?> wildcardClass55 = stackAr47.getClass();
        java.lang.Object[] objArray56 = new java.lang.Object[] { (short) 1, stackAr21, boolean28, stackAr37, wildcardClass55 };
        boolean boolean57 = org.autotest.StackAr.repOkFunction((int) 'a', objArray56);
        stackAr1.push((java.lang.Object) 'a');
        java.lang.Object obj59 = stackAr1.top();
        int int60 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[4]" + "'", str44, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + 'a' + "'", obj59, 'a');
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        java.lang.String str11 = stackAr0.toString();
        java.lang.String str12 = stackAr0.toString();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 1);
        boolean boolean17 = stackAr14.isFull();
        java.lang.Object obj18 = new java.lang.Object();
        stackAr14.push(obj18);
        boolean boolean20 = stackAr14.isFull();
        java.lang.Object obj21 = null;
        stackAr14.push(obj21);
        boolean boolean23 = stackAr14.isFull();
        stackAr14.push((java.lang.Object) "[a]");
        boolean boolean26 = stackAr0.equals((java.lang.Object) "[a]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray4 = new java.lang.Object[] { 1.0d };
        boolean boolean5 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray4);
        java.lang.Class<?> wildcardClass6 = objArray4.getClass();
        boolean boolean7 = stackAr0.equals((java.lang.Object) objArray4);
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr13.isEmpty();
        int int15 = stackAr13.size();
        boolean boolean17 = stackAr13.equals((java.lang.Object) 100L);
        boolean boolean18 = stackAr13.isFull();
        stackAr9.push((java.lang.Object) stackAr13);
        boolean boolean20 = stackAr9.isEmpty();
        java.lang.Object obj21 = stackAr9.top();
        stackAr0.push((java.lang.Object) stackAr9);
        java.lang.Class<?> wildcardClass23 = stackAr9.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "[]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        java.lang.String str29 = stackAr0.toString();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr();
        int int31 = stackAr30.size();
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr(1);
        boolean boolean34 = stackAr33.isFull();
        stackAr30.push((java.lang.Object) boolean34);
        boolean boolean36 = stackAr0.equals((java.lang.Object) stackAr30);
        boolean boolean37 = stackAr30.isEmpty();
        boolean boolean38 = stackAr30.isFull();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100]" + "'", str29, "[100]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr8.toString();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean18 = stackAr17.isFull();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr20.isEmpty();
        boolean boolean22 = stackAr20.isEmpty();
        int int23 = stackAr20.size();
        int int24 = stackAr20.size();
        boolean boolean25 = stackAr17.equals((java.lang.Object) stackAr20);
        stackAr8.push((java.lang.Object) boolean25);
        java.lang.Object obj27 = stackAr8.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + false + "'", obj27, false);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        int int7 = stackAr1.size();
        java.lang.Class<?> wildcardClass8 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.String str6 = stackAr1.toString();
        boolean boolean7 = stackAr1.isEmpty();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 100);
        boolean boolean13 = stackAr10.isEmpty();
        boolean boolean14 = stackAr10.isEmpty();
        boolean boolean15 = stackAr1.equals((java.lang.Object) stackAr10);
        boolean boolean16 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        int int7 = stackAr1.size();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr11.isEmpty();
        boolean boolean13 = stackAr11.isEmpty();
        int int14 = stackAr11.size();
        boolean boolean15 = stackAr11.isFull();
        boolean boolean16 = stackAr11.isEmpty();
        int int17 = stackAr11.size();
        stackAr1.push((java.lang.Object) stackAr11);
        boolean boolean19 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass20 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        java.lang.String str2 = stackAr1.toString();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr4.equals((java.lang.Object) (byte) 1);
        boolean boolean7 = stackAr4.isFull();
        boolean boolean8 = stackAr4.isFull();
        boolean boolean9 = stackAr4.isFull();
        int int10 = stackAr4.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean18 = stackAr4.equals(obj16);
        boolean boolean19 = stackAr1.equals((java.lang.Object) boolean18);
        java.lang.String str20 = stackAr1.toString();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        java.lang.String str26 = stackAr22.toString();
        java.lang.Class<?> wildcardClass27 = stackAr22.getClass();
        stackAr1.push((java.lang.Object) stackAr22);
        java.lang.Class<?> wildcardClass29 = stackAr1.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str14 = stackAr1.toString();
        java.lang.String str15 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[[[]]]" + "'", str14, "[[[]]]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[[]]]" + "'", str15, "[[[]]]");
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        boolean boolean9 = stackAr5.isFull();
        int int10 = stackAr5.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        stackAr12.push((java.lang.Object) "[]");
        stackAr5.push((java.lang.Object) stackAr12);
        java.lang.Object obj18 = stackAr12.pop();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean21 = stackAr20.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        boolean boolean25 = stackAr23.isEmpty();
        int int26 = stackAr23.size();
        int int27 = stackAr23.size();
        boolean boolean28 = stackAr20.equals((java.lang.Object) stackAr23);
        boolean boolean29 = stackAr12.equals((java.lang.Object) boolean28);
        boolean boolean30 = stackAr1.equals((java.lang.Object) stackAr12);
        java.lang.String str31 = stackAr12.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + "[]" + "'", obj18, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.pop();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
        int int12 = stackAr11.size();
        java.lang.Object[] objArray18 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) 'a', objArray18);
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray18);
        boolean boolean21 = stackAr11.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        java.lang.Object obj27 = new java.lang.Object();
        stackAr23.push(obj27);
        boolean boolean30 = stackAr23.equals((java.lang.Object) (byte) -1);
        boolean boolean31 = stackAr11.equals((java.lang.Object) boolean30);
        boolean boolean32 = stackAr11.isFull();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        int int36 = stackAr34.size();
        stackAr34.push((java.lang.Object) (byte) 100);
        stackAr11.push((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr();
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr42.equals((java.lang.Object) (byte) 100);
        boolean boolean45 = stackAr42.isEmpty();
        boolean boolean46 = stackAr42.isEmpty();
        boolean boolean47 = stackAr40.equals((java.lang.Object) stackAr42);
        boolean boolean48 = stackAr11.equals((java.lang.Object) stackAr42);
        boolean boolean49 = stackAr1.equals((java.lang.Object) stackAr11);
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean53 = stackAr51.equals((java.lang.Object) (byte) 1);
        stackAr51.push((java.lang.Object) "[]");
        int int56 = stackAr51.size();
        java.lang.String str57 = stackAr51.toString();
        org.autotest.StackAr stackAr58 = new org.autotest.StackAr();
        int int59 = stackAr58.size();
        java.lang.Object[] objArray65 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean66 = org.autotest.StackAr.repOkFunction((int) 'a', objArray65);
        boolean boolean67 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray65);
        boolean boolean68 = stackAr58.equals((java.lang.Object) (byte) 10);
        java.lang.String str69 = stackAr58.toString();
        stackAr51.push((java.lang.Object) str69);
        org.autotest.StackAr stackAr72 = new org.autotest.StackAr((int) '#');
        boolean boolean73 = stackAr72.isEmpty();
        int int74 = stackAr72.size();
        boolean boolean75 = stackAr72.isEmpty();
        int int76 = stackAr72.size();
        boolean boolean77 = stackAr72.isFull();
        boolean boolean78 = stackAr51.equals((java.lang.Object) boolean77);
        java.lang.Object obj79 = null;
        stackAr51.push(obj79);
        boolean boolean81 = stackAr11.equals((java.lang.Object) stackAr51);
        boolean boolean82 = stackAr51.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4]" + "'", str7, "[4]");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + '4' + "'", obj8, '4');
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + '4' + "'", obj10, '4');
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[[]]" + "'", str57, "[[]]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(100, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        java.lang.String str7 = stackAr6.toString();
        boolean boolean9 = stackAr6.equals((java.lang.Object) 10L);
        boolean boolean10 = stackAr6.isFull();
        boolean boolean11 = stackAr6.isEmpty();
        boolean boolean12 = stackAr1.equals((java.lang.Object) boolean11);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        java.lang.String str20 = stackAr1.toString();
        java.lang.String str21 = stackAr1.toString();
        java.lang.String str22 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        java.lang.Object[] objArray13 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) 'a', objArray13);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray13);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(100, objArray13);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray13);
        stackAr1.push((java.lang.Object) objArray13);
        boolean boolean19 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) (short) 0);
        boolean boolean22 = stackAr21.isEmpty();
        stackAr1.push((java.lang.Object) boolean22);
        java.lang.String str24 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 1);
        boolean boolean16 = stackAr13.isFull();
        stackAr13.push((java.lang.Object) '4');
        boolean boolean20 = stackAr13.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        boolean boolean26 = stackAr22.isFull();
        int int27 = stackAr22.size();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        stackAr29.push((java.lang.Object) "[]");
        stackAr22.push((java.lang.Object) stackAr29);
        boolean boolean35 = stackAr13.equals((java.lang.Object) stackAr29);
        java.lang.Class<?> wildcardClass36 = stackAr29.getClass();
        boolean boolean37 = stackAr1.equals((java.lang.Object) wildcardClass36);
        boolean boolean38 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr40.isEmpty();
        int int42 = stackAr40.size();
        boolean boolean43 = stackAr40.isEmpty();
        java.lang.String str44 = stackAr40.toString();
        stackAr1.push((java.lang.Object) stackAr40);
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean49 = stackAr47.equals((java.lang.Object) (byte) 1);
        boolean boolean50 = stackAr47.isFull();
        java.lang.Object obj51 = new java.lang.Object();
        stackAr47.push(obj51);
        boolean boolean53 = stackAr47.isFull();
        java.lang.String str54 = stackAr47.toString();
        java.lang.Object obj55 = stackAr47.top();
        java.lang.Object[] objArray62 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean63 = org.autotest.StackAr.repOkFunction((int) 'a', objArray62);
        boolean boolean64 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray62);
        boolean boolean65 = org.autotest.StackAr.repOkFunction((-1), objArray62);
        boolean boolean66 = stackAr47.equals((java.lang.Object) objArray62);
        stackAr40.push((java.lang.Object) stackAr47);
        java.lang.Object obj68 = stackAr40.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(obj68);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        stackAr6.push((java.lang.Object) '4');
        java.lang.String str12 = stackAr6.toString();
        java.lang.Object obj13 = stackAr6.top();
        boolean boolean14 = stackAr6.isEmpty();
        boolean boolean15 = stackAr1.equals((java.lang.Object) boolean14);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.Object obj21 = new java.lang.Object();
        stackAr17.push(obj21);
        boolean boolean24 = stackAr17.equals((java.lang.Object) (byte) -1);
        int int25 = stackAr17.size();
        java.lang.Object obj26 = stackAr17.top();
        boolean boolean27 = stackAr1.equals((java.lang.Object) stackAr17);
        java.lang.Class<?> wildcardClass28 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[4]" + "'", str12, "[4]");
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + '4' + "'", obj13, '4');
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        java.lang.String str3 = stackAr1.toString();
        boolean boolean4 = stackAr1.isEmpty();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        int int9 = stackAr1.size();
        java.lang.Object obj10 = stackAr1.pop();
        int int11 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(100, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(1, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((-1), objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean8 = stackAr1.equals((java.lang.Object) (byte) -1);
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        boolean boolean11 = stackAr1.isEmpty();
        boolean boolean13 = stackAr1.equals((java.lang.Object) 1L);
        java.lang.Object obj14 = stackAr1.top();
        boolean boolean15 = stackAr1.isEmpty();
        java.lang.String str16 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + (byte) 0 + "'", obj14, (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        boolean boolean10 = stackAr8.isEmpty();
        int int11 = stackAr8.size();
        boolean boolean12 = stackAr8.isFull();
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) boolean13);
        stackAr1.push((java.lang.Object) "[4]");
        java.lang.Object obj17 = stackAr1.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "[4]" + "'", obj17, "[4]");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.lang.Object[] objArray6 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean7 = org.autotest.StackAr.repOkFunction((int) 'a', objArray6);
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray6);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) '4', objArray6);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.pop();
        java.lang.String str10 = stackAr1.toString();
        java.lang.String str11 = stackAr1.toString();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr13.isEmpty();
        int int15 = stackAr13.size();
        boolean boolean16 = stackAr13.isEmpty();
        boolean boolean18 = stackAr13.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr(0);
        stackAr13.push((java.lang.Object) 0);
        int int22 = stackAr13.size();
        java.lang.String str23 = stackAr13.toString();
        boolean boolean24 = stackAr1.equals((java.lang.Object) str23);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[0]" + "'", str23, "[0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str14 = stackAr1.toString();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        boolean boolean20 = stackAr16.isFull();
        int int21 = stackAr16.size();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        stackAr23.push((java.lang.Object) "[]");
        stackAr16.push((java.lang.Object) stackAr23);
        java.lang.Object obj29 = stackAr23.pop();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean32 = stackAr23.equals((java.lang.Object) (short) 1);
        int int33 = stackAr23.size();
        java.lang.Object[] objArray42 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean43 = org.autotest.StackAr.repOkFunction((int) 'a', objArray42);
        boolean boolean44 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray42);
        boolean boolean45 = org.autotest.StackAr.repOkFunction(100, objArray42);
        boolean boolean46 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray42);
        boolean boolean47 = org.autotest.StackAr.repOkFunction((int) '#', objArray42);
        stackAr23.push((java.lang.Object) '#');
        java.lang.Object obj49 = stackAr23.top();
        java.lang.Object obj50 = null;
        stackAr23.push(obj50);
        boolean boolean52 = stackAr1.equals(obj50);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[[[]]]" + "'", str14, "[[[]]]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + "[]" + "'", obj29, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + '#' + "'", obj49, '#');
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        java.lang.String str7 = stackAr1.toString();
        int int8 = stackAr1.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        java.lang.String str20 = stackAr16.toString();
        java.lang.Object[] objArray28 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) 'a', objArray28);
        boolean boolean30 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray28);
        boolean boolean31 = org.autotest.StackAr.repOkFunction(100, objArray28);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray28);
        stackAr16.push((java.lang.Object) objArray28);
        boolean boolean34 = org.autotest.StackAr.repOkFunction(10, objArray28);
        boolean boolean35 = org.autotest.StackAr.repOkFunction(0, objArray28);
        boolean boolean36 = org.autotest.StackAr.repOkFunction((int) ' ', objArray28);
        boolean boolean37 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray28);
        boolean boolean38 = org.autotest.StackAr.repOkFunction(3, objArray28);
        boolean boolean39 = stackAr1.equals((java.lang.Object) boolean38);
        java.lang.Object obj40 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        java.lang.Object obj26 = new java.lang.Object();
        stackAr22.push(obj26);
        boolean boolean28 = stackAr22.isFull();
        java.lang.String str29 = stackAr22.toString();
        stackAr22.push((java.lang.Object) (byte) 0);
        stackAr17.push((java.lang.Object) stackAr22);
        boolean boolean33 = stackAr1.equals((java.lang.Object) stackAr22);
        boolean boolean34 = stackAr22.isEmpty();
        java.lang.String str35 = stackAr22.toString();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        boolean boolean40 = stackAr37.isFull();
        stackAr37.push((java.lang.Object) '4');
        boolean boolean44 = stackAr37.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        boolean boolean50 = stackAr46.isFull();
        int int51 = stackAr46.size();
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean55 = stackAr53.equals((java.lang.Object) (byte) 1);
        stackAr53.push((java.lang.Object) "[]");
        stackAr46.push((java.lang.Object) stackAr53);
        boolean boolean59 = stackAr37.equals((java.lang.Object) stackAr53);
        java.lang.Class<?> wildcardClass60 = stackAr53.getClass();
        boolean boolean61 = stackAr22.equals((java.lang.Object) stackAr53);
        java.lang.Object obj62 = stackAr53.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + obj62 + "' != '" + "[]" + "'", obj62, "[]");
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        java.lang.Object[] objArray6 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean7 = org.autotest.StackAr.repOkFunction((int) 'a', objArray6);
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray6);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((-1), objArray6);
        java.lang.Class<?> wildcardClass10 = objArray6.getClass();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        java.lang.String str16 = stackAr1.toString();
        java.lang.Object obj17 = stackAr1.pop();
        boolean boolean18 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[[4]]" + "'", str16, "[[4]]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "[4]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        java.lang.String str1 = stackAr0.toString();
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str4 = stackAr3.toString();
        boolean boolean5 = stackAr3.isFull();
        stackAr3.push((java.lang.Object) 1);
        java.lang.Object obj8 = stackAr3.top();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.String str14 = stackAr10.toString();
        int int15 = stackAr10.size();
        boolean boolean16 = stackAr10.isFull();
        boolean boolean17 = stackAr3.equals((java.lang.Object) boolean16);
        int int18 = stackAr3.size();
        boolean boolean19 = stackAr0.equals((java.lang.Object) int18);
        int int20 = stackAr0.size();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "[]" + "'", str1, "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1 + "'", obj8, 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '4');
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr3.equals((java.lang.Object) (byte) 1);
        boolean boolean6 = stackAr3.isFull();
        stackAr3.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        java.lang.String str16 = stackAr10.toString();
        boolean boolean17 = stackAr10.isEmpty();
        boolean boolean18 = stackAr3.equals((java.lang.Object) boolean17);
        boolean boolean19 = stackAr1.equals((java.lang.Object) stackAr3);
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr25.isEmpty();
        int int27 = stackAr25.size();
        boolean boolean29 = stackAr25.equals((java.lang.Object) 100L);
        boolean boolean30 = stackAr25.isFull();
        stackAr21.push((java.lang.Object) stackAr25);
        boolean boolean32 = stackAr25.isFull();
        java.lang.String str33 = stackAr25.toString();
        boolean boolean34 = stackAr3.equals((java.lang.Object) stackAr25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj35 = stackAr25.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr1.toString();
        java.lang.Object obj16 = stackAr1.pop();
        boolean boolean17 = stackAr1.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        int int21 = stackAr19.size();
        boolean boolean22 = stackAr19.isEmpty();
        boolean boolean24 = stackAr19.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr26.equals((java.lang.Object) (byte) 1);
        boolean boolean29 = stackAr26.isFull();
        stackAr26.push((java.lang.Object) '4');
        stackAr19.push((java.lang.Object) stackAr26);
        boolean boolean33 = stackAr19.isEmpty();
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        boolean boolean38 = stackAr35.isFull();
        java.lang.Object obj39 = new java.lang.Object();
        stackAr35.push(obj39);
        boolean boolean41 = stackAr19.equals((java.lang.Object) stackAr35);
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr43.isEmpty();
        int int45 = stackAr43.size();
        boolean boolean46 = stackAr43.isEmpty();
        int int47 = stackAr43.size();
        boolean boolean48 = stackAr43.isFull();
        boolean boolean49 = stackAr43.isEmpty();
        boolean boolean50 = stackAr19.equals((java.lang.Object) stackAr43);
        boolean boolean51 = stackAr19.isFull();
        boolean boolean52 = stackAr1.equals((java.lang.Object) boolean51);
        java.lang.String str53 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[4]]" + "'", str15, "[[4]]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[4]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.Object obj21 = new java.lang.Object();
        stackAr17.push(obj21);
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr17);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr25.isEmpty();
        int int27 = stackAr25.size();
        boolean boolean28 = stackAr25.isEmpty();
        int int29 = stackAr25.size();
        boolean boolean30 = stackAr25.isFull();
        boolean boolean31 = stackAr25.isEmpty();
        boolean boolean32 = stackAr1.equals((java.lang.Object) stackAr25);
        java.lang.Object obj33 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "[4]");
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isEmpty();
        boolean boolean13 = stackAr1.equals((java.lang.Object) stackAr9);
        java.lang.String str14 = stackAr9.toString();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str17 = stackAr16.toString();
        stackAr9.push((java.lang.Object) stackAr16);
        boolean boolean19 = stackAr16.isFull();
        boolean boolean20 = stackAr16.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        java.lang.String str4 = stackAr1.toString();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) (short) 0);
        boolean boolean9 = stackAr8.isEmpty();
        boolean boolean10 = stackAr1.equals((java.lang.Object) stackAr8);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((-1), objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        boolean boolean10 = stackAr1.isFull();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        boolean boolean16 = stackAr12.isFull();
        int int17 = stackAr12.size();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        stackAr19.push((java.lang.Object) "[]");
        stackAr12.push((java.lang.Object) stackAr19);
        java.lang.Object obj25 = stackAr19.pop();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean28 = stackAr27.isFull();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr30.isEmpty();
        boolean boolean32 = stackAr30.isEmpty();
        int int33 = stackAr30.size();
        int int34 = stackAr30.size();
        boolean boolean35 = stackAr27.equals((java.lang.Object) stackAr30);
        boolean boolean36 = stackAr19.equals((java.lang.Object) boolean35);
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr38.equals((java.lang.Object) (byte) 100);
        boolean boolean41 = stackAr38.isEmpty();
        boolean boolean42 = stackAr38.isEmpty();
        java.lang.String str43 = stackAr38.toString();
        boolean boolean44 = stackAr38.isEmpty();
        int int45 = stackAr38.size();
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean49 = stackAr47.equals((java.lang.Object) (byte) 100);
        boolean boolean50 = stackAr47.isEmpty();
        boolean boolean51 = stackAr47.isEmpty();
        boolean boolean52 = stackAr38.equals((java.lang.Object) stackAr47);
        stackAr19.push((java.lang.Object) stackAr47);
        java.lang.Object obj54 = stackAr19.top();
        boolean boolean55 = stackAr1.equals(obj54);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + "[]" + "'", obj25, "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr8.equals((java.lang.Object) (short) 1);
        int int18 = stackAr8.size();
        java.lang.Object[] objArray27 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) 'a', objArray27);
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean30 = org.autotest.StackAr.repOkFunction(100, objArray27);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) '#', objArray27);
        stackAr8.push((java.lang.Object) '#');
        java.lang.Object obj34 = stackAr8.top();
        boolean boolean35 = stackAr8.isFull();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        java.lang.String str38 = stackAr37.toString();
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr40.equals((java.lang.Object) (byte) 1);
        boolean boolean43 = stackAr40.isFull();
        boolean boolean44 = stackAr40.isFull();
        boolean boolean45 = stackAr40.isFull();
        int int46 = stackAr40.size();
        org.autotest.StackAr stackAr48 = new org.autotest.StackAr((int) '#');
        boolean boolean50 = stackAr48.equals((java.lang.Object) (byte) 1);
        boolean boolean51 = stackAr48.isFull();
        java.lang.Object obj52 = new java.lang.Object();
        stackAr48.push(obj52);
        boolean boolean54 = stackAr40.equals(obj52);
        boolean boolean55 = stackAr37.equals((java.lang.Object) boolean54);
        boolean boolean56 = stackAr8.equals((java.lang.Object) stackAr37);
        java.lang.Class<?> wildcardClass57 = stackAr8.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + '#' + "'", obj34, '#');
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 0);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.String str3 = stackAr1.toString();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean8 = stackAr5.isFull();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        boolean boolean16 = stackAr10.isFull();
        java.lang.String str17 = stackAr10.toString();
        stackAr10.push((java.lang.Object) (byte) 0);
        stackAr5.push((java.lang.Object) stackAr10);
        boolean boolean21 = stackAr10.isFull();
        boolean boolean22 = stackAr10.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) boolean22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr3.equals((java.lang.Object) (byte) 1);
        stackAr3.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.String str13 = stackAr9.toString();
        java.lang.Object[] objArray21 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean22 = org.autotest.StackAr.repOkFunction((int) 'a', objArray21);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray21);
        boolean boolean24 = org.autotest.StackAr.repOkFunction(100, objArray21);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray21);
        stackAr9.push((java.lang.Object) objArray21);
        boolean boolean27 = stackAr3.equals((java.lang.Object) objArray21);
        boolean boolean28 = org.autotest.StackAr.repOkFunction(0, objArray21);
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) 'a', objArray21);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr(0);
        int int2 = stackAr1.size();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        int int6 = stackAr4.size();
        boolean boolean7 = stackAr4.isEmpty();
        boolean boolean9 = stackAr4.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr11.equals((java.lang.Object) (byte) 1);
        boolean boolean14 = stackAr11.isFull();
        stackAr11.push((java.lang.Object) '4');
        stackAr4.push((java.lang.Object) stackAr11);
        boolean boolean18 = stackAr4.isFull();
        boolean boolean20 = stackAr4.equals((java.lang.Object) 100.0d);
        boolean boolean21 = stackAr1.equals((java.lang.Object) 100.0d);
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        java.lang.Object obj27 = new java.lang.Object();
        stackAr23.push(obj27);
        boolean boolean29 = stackAr23.isFull();
        java.lang.String str30 = stackAr23.toString();
        int int31 = stackAr23.size();
        java.lang.String str32 = stackAr23.toString();
        int int33 = stackAr23.size();
        boolean boolean34 = stackAr23.isEmpty();
        java.lang.Object[] objArray43 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean44 = org.autotest.StackAr.repOkFunction((int) 'a', objArray43);
        boolean boolean45 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray43);
        boolean boolean46 = org.autotest.StackAr.repOkFunction(100, objArray43);
        boolean boolean47 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray43);
        boolean boolean48 = org.autotest.StackAr.repOkFunction((int) '#', objArray43);
        boolean boolean49 = stackAr23.equals((java.lang.Object) objArray43);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) objArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(1, objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        stackAr6.push((java.lang.Object) "[]");
        int int11 = stackAr6.size();
        java.lang.Object obj12 = stackAr6.top();
        java.lang.String str13 = stackAr6.toString();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr6);
        java.lang.String str15 = stackAr1.toString();
        boolean boolean16 = stackAr1.isEmpty();
        boolean boolean17 = stackAr1.isFull();
        java.lang.String str18 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "[]" + "'", obj12, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[[]]" + "'", str13, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        int int9 = stackAr1.size();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr11.isEmpty();
        int int13 = stackAr11.size();
        boolean boolean14 = stackAr11.isEmpty();
        boolean boolean15 = stackAr11.isEmpty();
        boolean boolean16 = stackAr11.isFull();
        int int17 = stackAr11.size();
        boolean boolean18 = stackAr11.isEmpty();
        stackAr1.push((java.lang.Object) stackAr11);
        java.lang.String str20 = stackAr11.toString();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        stackAr22.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        boolean boolean32 = stackAr29.isFull();
        java.lang.Object obj33 = new java.lang.Object();
        stackAr29.push(obj33);
        java.lang.String str35 = stackAr29.toString();
        boolean boolean36 = stackAr29.isEmpty();
        boolean boolean37 = stackAr22.equals((java.lang.Object) boolean36);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr39.isEmpty();
        int int41 = stackAr39.size();
        boolean boolean42 = stackAr39.isEmpty();
        boolean boolean44 = stackAr39.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        stackAr46.push((java.lang.Object) '4');
        stackAr39.push((java.lang.Object) stackAr46);
        boolean boolean53 = stackAr39.isEmpty();
        org.autotest.StackAr stackAr55 = new org.autotest.StackAr((int) '#');
        boolean boolean56 = stackAr55.isEmpty();
        int int57 = stackAr55.size();
        boolean boolean58 = stackAr55.isFull();
        org.autotest.StackAr stackAr60 = new org.autotest.StackAr((int) '#');
        boolean boolean62 = stackAr60.equals((java.lang.Object) (byte) 1);
        boolean boolean63 = stackAr60.isFull();
        java.lang.Object obj64 = new java.lang.Object();
        stackAr60.push(obj64);
        boolean boolean66 = stackAr60.isFull();
        java.lang.String str67 = stackAr60.toString();
        stackAr60.push((java.lang.Object) (byte) 0);
        stackAr55.push((java.lang.Object) stackAr60);
        boolean boolean71 = stackAr39.equals((java.lang.Object) stackAr60);
        stackAr22.push((java.lang.Object) stackAr39);
        org.autotest.StackAr stackAr74 = new org.autotest.StackAr((int) '#');
        boolean boolean75 = stackAr74.isEmpty();
        boolean boolean76 = stackAr74.isEmpty();
        boolean boolean77 = stackAr74.isFull();
        boolean boolean78 = stackAr74.isEmpty();
        java.lang.String str79 = stackAr74.toString();
        java.lang.String str80 = stackAr74.toString();
        boolean boolean81 = stackAr39.equals((java.lang.Object) str80);
        org.autotest.StackAr stackAr83 = new org.autotest.StackAr((int) '#');
        boolean boolean85 = stackAr83.equals((java.lang.Object) (byte) 1);
        boolean boolean86 = stackAr83.isFull();
        boolean boolean87 = stackAr83.isFull();
        int int88 = stackAr83.size();
        org.autotest.StackAr stackAr90 = new org.autotest.StackAr((int) '#');
        boolean boolean92 = stackAr90.equals((java.lang.Object) (byte) 1);
        stackAr90.push((java.lang.Object) "[]");
        stackAr83.push((java.lang.Object) stackAr90);
        boolean boolean96 = stackAr39.equals((java.lang.Object) stackAr90);
        boolean boolean97 = stackAr11.equals((java.lang.Object) boolean96);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[]" + "'", str79, "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean8 = stackAr7.isFull();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr10.isEmpty();
        boolean boolean12 = stackAr10.isEmpty();
        int int13 = stackAr10.size();
        int int14 = stackAr10.size();
        boolean boolean15 = stackAr7.equals((java.lang.Object) stackAr10);
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        java.lang.String str17 = stackAr1.toString();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        int int21 = stackAr19.size();
        boolean boolean22 = stackAr19.isEmpty();
        boolean boolean24 = stackAr19.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr26.equals((java.lang.Object) (byte) 1);
        boolean boolean29 = stackAr26.isFull();
        stackAr26.push((java.lang.Object) '4');
        stackAr19.push((java.lang.Object) stackAr26);
        boolean boolean33 = stackAr19.isEmpty();
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr35.isEmpty();
        int int37 = stackAr35.size();
        boolean boolean38 = stackAr35.isFull();
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr40.equals((java.lang.Object) (byte) 1);
        boolean boolean43 = stackAr40.isFull();
        java.lang.Object obj44 = new java.lang.Object();
        stackAr40.push(obj44);
        boolean boolean46 = stackAr40.isFull();
        java.lang.String str47 = stackAr40.toString();
        stackAr40.push((java.lang.Object) (byte) 0);
        stackAr35.push((java.lang.Object) stackAr40);
        boolean boolean51 = stackAr19.equals((java.lang.Object) stackAr40);
        java.lang.Object obj52 = stackAr19.pop();
        boolean boolean53 = stackAr19.isEmpty();
        org.autotest.StackAr stackAr55 = new org.autotest.StackAr((int) '#');
        boolean boolean57 = stackAr55.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr59 = new org.autotest.StackAr((int) '#');
        boolean boolean60 = stackAr59.isEmpty();
        int int61 = stackAr59.size();
        boolean boolean63 = stackAr59.equals((java.lang.Object) 100L);
        boolean boolean64 = stackAr59.isFull();
        stackAr55.push((java.lang.Object) stackAr59);
        java.lang.String str66 = stackAr59.toString();
        boolean boolean67 = stackAr19.equals((java.lang.Object) stackAr59);
        boolean boolean68 = stackAr59.isFull();
        boolean boolean69 = stackAr1.equals((java.lang.Object) stackAr59);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "[4]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.String str8 = stackAr1.toString();
        int int9 = stackAr1.size();
        java.lang.Object obj10 = stackAr1.pop();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        stackAr12.push((java.lang.Object) "[]");
        int int17 = stackAr12.size();
        java.lang.String str18 = stackAr12.toString();
        java.lang.Object obj19 = stackAr12.pop();
        boolean boolean20 = stackAr1.equals(obj19);
        boolean boolean21 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "[]" + "'", obj6, "[]");
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "[]" + "'", obj7, "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[[]]" + "'", str8, "[[]]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "[]" + "'", obj10, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[[]]" + "'", str18, "[[]]");
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + "[]" + "'", obj19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.String str7 = stackAr1.toString();
        int int8 = stackAr1.size();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.String str10 = stackAr1.toString();
        boolean boolean11 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4]" + "'", str7, "[4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + '4' + "'", obj9, '4');
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[4]" + "'", str10, "[4]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr16.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        int int23 = stackAr19.size();
        boolean boolean24 = stackAr16.equals((java.lang.Object) stackAr19);
        boolean boolean25 = stackAr8.equals((java.lang.Object) boolean24);
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = stackAr27.isEmpty();
        boolean boolean31 = stackAr27.isEmpty();
        java.lang.String str32 = stackAr27.toString();
        boolean boolean33 = stackAr27.isEmpty();
        int int34 = stackAr27.size();
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 100);
        boolean boolean39 = stackAr36.isEmpty();
        boolean boolean40 = stackAr36.isEmpty();
        boolean boolean41 = stackAr27.equals((java.lang.Object) stackAr36);
        stackAr8.push((java.lang.Object) stackAr36);
        org.autotest.StackAr stackAr44 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr44.isEmpty();
        int int46 = stackAr44.size();
        boolean boolean47 = stackAr44.isEmpty();
        int int48 = stackAr44.size();
        org.autotest.StackAr stackAr50 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean51 = stackAr50.isFull();
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean54 = stackAr53.isEmpty();
        boolean boolean55 = stackAr53.isEmpty();
        int int56 = stackAr53.size();
        int int57 = stackAr53.size();
        boolean boolean58 = stackAr50.equals((java.lang.Object) stackAr53);
        boolean boolean59 = stackAr44.equals((java.lang.Object) boolean58);
        int int60 = stackAr44.size();
        stackAr36.push((java.lang.Object) int60);
        boolean boolean62 = stackAr36.isFull();
        int int63 = stackAr36.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        boolean boolean16 = stackAr1.isFull();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        java.lang.Object obj22 = new java.lang.Object();
        stackAr18.push(obj22);
        boolean boolean24 = stackAr18.isFull();
        java.lang.String str25 = stackAr18.toString();
        int int26 = stackAr18.size();
        java.lang.Object obj27 = stackAr18.pop();
        stackAr1.push(obj27);
        boolean boolean29 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        java.lang.String str11 = stackAr7.toString();
        java.lang.Object[] objArray19 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) 'a', objArray19);
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray19);
        boolean boolean22 = org.autotest.StackAr.repOkFunction(100, objArray19);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray19);
        stackAr7.push((java.lang.Object) objArray19);
        boolean boolean25 = stackAr1.equals((java.lang.Object) objArray19);
        java.lang.String str26 = stackAr1.toString();
        int int27 = stackAr1.size();
        boolean boolean28 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[[]]" + "'", str26, "[[]]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = stackAr1.pop();
        java.lang.String str9 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[[]]" + "'", str7, "[[]]");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + "[]" + "'", obj8, "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean8 = stackAr1.equals((java.lang.Object) (byte) -1);
        int int9 = stackAr1.size();
        boolean boolean10 = stackAr1.isFull();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr12.isEmpty();
        int int14 = stackAr12.size();
        boolean boolean15 = stackAr12.isEmpty();
        boolean boolean17 = stackAr12.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        stackAr19.push((java.lang.Object) '4');
        stackAr12.push((java.lang.Object) stackAr19);
        boolean boolean26 = stackAr12.isEmpty();
        boolean boolean27 = stackAr12.isFull();
        stackAr1.push((java.lang.Object) stackAr12);
        boolean boolean29 = stackAr12.isFull();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr(2);
        stackAr12.push((java.lang.Object) 2);
        java.lang.Object obj33 = stackAr12.pop();
        java.lang.Object obj34 = stackAr12.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + 2 + "'", obj33, 2);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "[4]");
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray4 = new java.lang.Object[] { 1.0d };
        boolean boolean5 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray4);
        java.lang.Class<?> wildcardClass6 = objArray4.getClass();
        boolean boolean7 = stackAr0.equals((java.lang.Object) objArray4);
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr13.isEmpty();
        int int15 = stackAr13.size();
        boolean boolean17 = stackAr13.equals((java.lang.Object) 100L);
        boolean boolean18 = stackAr13.isFull();
        stackAr9.push((java.lang.Object) stackAr13);
        boolean boolean20 = stackAr9.isEmpty();
        java.lang.Object obj21 = stackAr9.top();
        stackAr0.push((java.lang.Object) stackAr9);
        java.lang.String str23 = stackAr0.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[[[]]]" + "'", str23, "[[[]]]");
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        java.lang.Object obj11 = stackAr1.pop();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr13.isEmpty();
        boolean boolean15 = stackAr13.isEmpty();
        int int16 = stackAr13.size();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean19 = stackAr18.isEmpty();
        stackAr13.push((java.lang.Object) stackAr18);
        boolean boolean21 = stackAr1.equals((java.lang.Object) stackAr18);
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        boolean boolean27 = stackAr23.isFull();
        int int28 = stackAr23.size();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 1);
        stackAr30.push((java.lang.Object) "[]");
        stackAr23.push((java.lang.Object) stackAr30);
        java.lang.Object obj36 = stackAr30.pop();
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean39 = stackAr30.equals((java.lang.Object) (short) 1);
        int int40 = stackAr30.size();
        java.lang.Object[] objArray49 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean50 = org.autotest.StackAr.repOkFunction((int) 'a', objArray49);
        boolean boolean51 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray49);
        boolean boolean52 = org.autotest.StackAr.repOkFunction(100, objArray49);
        boolean boolean53 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray49);
        boolean boolean54 = org.autotest.StackAr.repOkFunction((int) '#', objArray49);
        stackAr30.push((java.lang.Object) '#');
        boolean boolean56 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean57 = stackAr1.isEmpty();
        boolean boolean58 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + "[]" + "'", obj36, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        boolean boolean8 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        boolean boolean16 = stackAr10.isFull();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        java.lang.Object obj22 = new java.lang.Object();
        stackAr18.push(obj22);
        boolean boolean24 = stackAr18.isFull();
        java.lang.String str25 = stackAr18.toString();
        boolean boolean26 = stackAr10.equals((java.lang.Object) str25);
        stackAr1.push((java.lang.Object) stackAr10);
        boolean boolean28 = stackAr10.isEmpty();
        java.lang.String str29 = stackAr10.toString();
        boolean boolean30 = stackAr10.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) 'a');
        java.lang.String str2 = stackAr1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = new java.lang.Object();
        stackAr8.push(obj12);
        boolean boolean14 = stackAr8.isFull();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        java.lang.Object obj20 = new java.lang.Object();
        stackAr16.push(obj20);
        boolean boolean22 = stackAr16.isFull();
        java.lang.String str23 = stackAr16.toString();
        boolean boolean24 = stackAr8.equals((java.lang.Object) str23);
        boolean boolean25 = stackAr8.isEmpty();
        boolean boolean26 = stackAr8.isFull();
        boolean boolean27 = stackAr8.isFull();
        boolean boolean28 = stackAr1.equals((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 1);
        boolean boolean33 = stackAr30.isFull();
        boolean boolean34 = stackAr30.isFull();
        boolean boolean35 = stackAr30.isFull();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr37.isEmpty();
        boolean boolean39 = stackAr37.isEmpty();
        int int40 = stackAr37.size();
        boolean boolean41 = stackAr37.isFull();
        boolean boolean42 = stackAr37.isEmpty();
        boolean boolean43 = stackAr30.equals((java.lang.Object) boolean42);
        stackAr30.push((java.lang.Object) "[4]");
        java.lang.Object obj46 = stackAr30.top();
        stackAr1.push(obj46);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + "[4]" + "'", obj46, "[4]");
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction(100, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((-1), objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(0, objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr11.isEmpty();
        int int13 = stackAr11.size();
        boolean boolean14 = stackAr11.isEmpty();
        boolean boolean16 = stackAr11.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        stackAr18.push((java.lang.Object) '4');
        stackAr11.push((java.lang.Object) stackAr18);
        java.lang.String str25 = stackAr18.toString();
        int int26 = stackAr18.size();
        boolean boolean27 = stackAr18.isFull();
        boolean boolean28 = stackAr1.equals((java.lang.Object) boolean27);
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 1);
        boolean boolean33 = stackAr30.isFull();
        stackAr30.push((java.lang.Object) '4');
        boolean boolean37 = stackAr30.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        boolean boolean43 = stackAr39.isFull();
        int int44 = stackAr39.size();
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        stackAr46.push((java.lang.Object) "[]");
        stackAr39.push((java.lang.Object) stackAr46);
        boolean boolean52 = stackAr30.equals((java.lang.Object) stackAr46);
        stackAr1.push((java.lang.Object) stackAr46);
        java.lang.Object obj54 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "[[]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "[[]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "[[]]");
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        java.lang.String str25 = stackAr19.toString();
        boolean boolean26 = stackAr19.isEmpty();
        boolean boolean27 = stackAr19.isFull();
        stackAr6.push((java.lang.Object) boolean27);
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr30.isEmpty();
        boolean boolean32 = stackAr30.isEmpty();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr34.equals((java.lang.Object) (byte) 100);
        boolean boolean37 = stackAr34.isEmpty();
        boolean boolean38 = stackAr34.isFull();
        boolean boolean39 = stackAr30.equals((java.lang.Object) boolean38);
        boolean boolean40 = stackAr30.isEmpty();
        boolean boolean41 = stackAr6.equals((java.lang.Object) stackAr30);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.Object obj21 = new java.lang.Object();
        stackAr17.push(obj21);
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr17);
        java.lang.Object obj24 = stackAr17.pop();
        boolean boolean25 = stackAr17.isEmpty();
        boolean boolean26 = stackAr17.isFull();
        java.lang.Class<?> wildcardClass27 = stackAr17.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        int int5 = stackAr1.size();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        boolean boolean9 = stackAr1.isEmpty();
        int int10 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr2.isEmpty();
        boolean boolean5 = stackAr2.equals((java.lang.Object) '#');
        int int6 = stackAr2.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 100);
        boolean boolean11 = stackAr8.isEmpty();
        java.lang.Class<?> wildcardClass12 = stackAr8.getClass();
        boolean boolean13 = stackAr2.equals((java.lang.Object) wildcardClass12);
        java.lang.Object[] objArray20 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) 'a', objArray20);
        boolean boolean22 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray20);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray20);
        boolean boolean24 = stackAr2.equals((java.lang.Object) objArray20);
        boolean boolean25 = org.autotest.StackAr.repOkFunction(0, objArray20);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        java.lang.Object obj26 = new java.lang.Object();
        stackAr22.push(obj26);
        boolean boolean28 = stackAr22.isFull();
        java.lang.String str29 = stackAr22.toString();
        stackAr22.push((java.lang.Object) (byte) 0);
        stackAr17.push((java.lang.Object) stackAr22);
        boolean boolean33 = stackAr1.equals((java.lang.Object) stackAr22);
        java.lang.Object obj34 = stackAr1.pop();
        boolean boolean35 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr41.isEmpty();
        int int43 = stackAr41.size();
        boolean boolean45 = stackAr41.equals((java.lang.Object) 100L);
        boolean boolean46 = stackAr41.isFull();
        stackAr37.push((java.lang.Object) stackAr41);
        java.lang.String str48 = stackAr41.toString();
        boolean boolean49 = stackAr1.equals((java.lang.Object) stackAr41);
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean53 = stackAr51.equals((java.lang.Object) (byte) 1);
        boolean boolean54 = stackAr51.isFull();
        java.lang.Object obj55 = new java.lang.Object();
        stackAr51.push(obj55);
        boolean boolean57 = stackAr51.isFull();
        java.lang.String str58 = stackAr51.toString();
        int int59 = stackAr51.size();
        boolean boolean60 = stackAr51.isFull();
        int int61 = stackAr51.size();
        stackAr1.push((java.lang.Object) int61);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "[4]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        java.lang.String str5 = stackAr1.toString();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isFull();
        int int13 = stackAr7.size();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr15.isEmpty();
        int int17 = stackAr15.size();
        boolean boolean18 = stackAr15.isEmpty();
        boolean boolean19 = stackAr7.equals((java.lang.Object) stackAr15);
        java.lang.String str20 = stackAr15.toString();
        boolean boolean21 = stackAr1.equals((java.lang.Object) str20);
        java.lang.String str22 = stackAr1.toString();
        boolean boolean23 = stackAr1.isEmpty();
        boolean boolean24 = stackAr1.isEmpty();
        boolean boolean25 = stackAr1.isFull();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj2 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        java.lang.Object[] objArray5 = new java.lang.Object[] { 1.0d };
        boolean boolean6 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray5);
        boolean boolean7 = org.autotest.StackAr.repOkFunction((int) 'a', objArray5);
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray5);
        boolean boolean9 = org.autotest.StackAr.repOkFunction(10, objArray5);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        java.lang.String str20 = stackAr1.toString();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        boolean boolean26 = stackAr22.isFull();
        boolean boolean27 = stackAr22.isFull();
        int int28 = stackAr22.size();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr30.isEmpty();
        int int32 = stackAr30.size();
        boolean boolean33 = stackAr30.isEmpty();
        boolean boolean34 = stackAr22.equals((java.lang.Object) stackAr30);
        java.lang.String str35 = stackAr30.toString();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str38 = stackAr37.toString();
        stackAr30.push((java.lang.Object) stackAr37);
        stackAr1.push((java.lang.Object) stackAr30);
        int int41 = stackAr30.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(10, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(2, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(2, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        boolean boolean1 = stackAr0.isEmpty();
        boolean boolean2 = stackAr0.isFull();
        boolean boolean3 = stackAr0.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = stackAr0.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str9 = stackAr8.toString();
        boolean boolean10 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) 1);
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr8.top();
        boolean boolean16 = stackAr8.isFull();
        java.lang.String str17 = stackAr8.toString();
        int int18 = stackAr8.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + 1 + "'", obj15, 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1]" + "'", str17, "[1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr1.pop();
        boolean boolean16 = stackAr1.isFull();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean21 = stackAr18.isEmpty();
        boolean boolean23 = stackAr18.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        stackAr25.push((java.lang.Object) '4');
        stackAr18.push((java.lang.Object) stackAr25);
        java.lang.String str32 = stackAr25.toString();
        java.lang.Object obj33 = stackAr25.pop();
        stackAr1.push((java.lang.Object) stackAr25);
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 1);
        boolean boolean39 = stackAr36.isFull();
        boolean boolean40 = stackAr36.isFull();
        int int41 = stackAr36.size();
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 1);
        stackAr43.push((java.lang.Object) "[]");
        stackAr36.push((java.lang.Object) stackAr43);
        java.lang.Object obj49 = stackAr43.pop();
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean52 = stackAr51.isFull();
        org.autotest.StackAr stackAr54 = new org.autotest.StackAr((int) '#');
        boolean boolean55 = stackAr54.isEmpty();
        boolean boolean56 = stackAr54.isEmpty();
        int int57 = stackAr54.size();
        int int58 = stackAr54.size();
        boolean boolean59 = stackAr51.equals((java.lang.Object) stackAr54);
        boolean boolean60 = stackAr43.equals((java.lang.Object) boolean59);
        org.autotest.StackAr stackAr62 = new org.autotest.StackAr((int) '#');
        boolean boolean64 = stackAr62.equals((java.lang.Object) (byte) 100);
        boolean boolean65 = stackAr62.isEmpty();
        boolean boolean66 = stackAr62.isEmpty();
        java.lang.String str67 = stackAr62.toString();
        boolean boolean68 = stackAr62.isEmpty();
        int int69 = stackAr62.size();
        org.autotest.StackAr stackAr71 = new org.autotest.StackAr((int) '#');
        boolean boolean73 = stackAr71.equals((java.lang.Object) (byte) 100);
        boolean boolean74 = stackAr71.isEmpty();
        boolean boolean75 = stackAr71.isEmpty();
        boolean boolean76 = stackAr62.equals((java.lang.Object) stackAr71);
        stackAr43.push((java.lang.Object) stackAr71);
        java.lang.Object obj78 = stackAr43.top();
        boolean boolean79 = stackAr43.isEmpty();
        stackAr1.push((java.lang.Object) boolean79);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[4]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[4]" + "'", str32, "[4]");
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + '4' + "'", obj33, '4');
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + "[]" + "'", obj49, "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.Object[] objArray18 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) 'a', objArray18);
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray18);
        boolean boolean21 = org.autotest.StackAr.repOkFunction(10, objArray18);
        boolean boolean22 = stackAr5.equals((java.lang.Object) objArray18);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr24.equals((java.lang.Object) (byte) 1);
        boolean boolean27 = stackAr24.isFull();
        boolean boolean28 = stackAr24.isFull();
        boolean boolean29 = stackAr24.isFull();
        int int30 = stackAr24.size();
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr32.isEmpty();
        int int34 = stackAr32.size();
        boolean boolean35 = stackAr32.isEmpty();
        boolean boolean36 = stackAr24.equals((java.lang.Object) stackAr32);
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr(0);
        int int39 = stackAr38.size();
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr41.isEmpty();
        int int43 = stackAr41.size();
        boolean boolean44 = stackAr41.isEmpty();
        boolean boolean46 = stackAr41.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr48 = new org.autotest.StackAr((int) '#');
        boolean boolean50 = stackAr48.equals((java.lang.Object) (byte) 1);
        boolean boolean51 = stackAr48.isFull();
        stackAr48.push((java.lang.Object) '4');
        stackAr41.push((java.lang.Object) stackAr48);
        boolean boolean55 = stackAr41.isFull();
        boolean boolean57 = stackAr41.equals((java.lang.Object) 100.0d);
        boolean boolean58 = stackAr38.equals((java.lang.Object) 100.0d);
        stackAr32.push((java.lang.Object) 100.0d);
        stackAr5.push((java.lang.Object) stackAr32);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isFull();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        boolean boolean25 = stackAr19.isFull();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        java.lang.Object obj31 = new java.lang.Object();
        stackAr27.push(obj31);
        boolean boolean33 = stackAr27.isFull();
        java.lang.String str34 = stackAr27.toString();
        boolean boolean35 = stackAr19.equals((java.lang.Object) str34);
        boolean boolean36 = stackAr19.isEmpty();
        java.lang.String str37 = stackAr19.toString();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        java.lang.String str40 = stackAr39.toString();
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int) '#');
        boolean boolean43 = stackAr42.isEmpty();
        int int44 = stackAr42.size();
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        boolean boolean50 = stackAr46.isFull();
        int int51 = stackAr46.size();
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean55 = stackAr53.equals((java.lang.Object) (byte) 1);
        stackAr53.push((java.lang.Object) "[]");
        stackAr46.push((java.lang.Object) stackAr53);
        java.lang.Object obj59 = stackAr53.pop();
        org.autotest.StackAr stackAr61 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean62 = stackAr61.isFull();
        org.autotest.StackAr stackAr64 = new org.autotest.StackAr((int) '#');
        boolean boolean65 = stackAr64.isEmpty();
        boolean boolean66 = stackAr64.isEmpty();
        int int67 = stackAr64.size();
        int int68 = stackAr64.size();
        boolean boolean69 = stackAr61.equals((java.lang.Object) stackAr64);
        boolean boolean70 = stackAr53.equals((java.lang.Object) boolean69);
        boolean boolean71 = stackAr42.equals((java.lang.Object) stackAr53);
        stackAr39.push((java.lang.Object) stackAr53);
        stackAr19.push((java.lang.Object) stackAr39);
        boolean boolean74 = stackAr1.equals((java.lang.Object) stackAr39);
        java.lang.Class<?> wildcardClass75 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + "[]" + "'", obj59, "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr4.equals((java.lang.Object) (byte) 1);
        stackAr4.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.String str14 = stackAr10.toString();
        java.lang.Object[] objArray22 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) 'a', objArray22);
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray22);
        boolean boolean25 = org.autotest.StackAr.repOkFunction(100, objArray22);
        boolean boolean26 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray22);
        stackAr10.push((java.lang.Object) objArray22);
        boolean boolean28 = stackAr4.equals((java.lang.Object) objArray22);
        boolean boolean29 = org.autotest.StackAr.repOkFunction(0, objArray22);
        boolean boolean30 = org.autotest.StackAr.repOkFunction((int) '#', objArray22);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray22);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean8 = stackAr1.equals((java.lang.Object) (byte) -1);
        java.lang.String str9 = stackAr1.toString();
        java.lang.Object obj10 = stackAr1.pop();
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.String str12 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr1.toString();
        java.lang.Object obj16 = stackAr1.pop();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean26 = stackAr22.equals((java.lang.Object) 100L);
        boolean boolean27 = stackAr22.isFull();
        stackAr18.push((java.lang.Object) stackAr22);
        java.lang.Object obj29 = stackAr18.top();
        stackAr1.push((java.lang.Object) stackAr18);
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr32.isEmpty();
        boolean boolean35 = stackAr32.equals((java.lang.Object) '#');
        boolean boolean37 = stackAr32.equals((java.lang.Object) "hi!");
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        stackAr39.push((java.lang.Object) '4');
        java.lang.String str45 = stackAr39.toString();
        java.lang.Object obj46 = stackAr39.top();
        stackAr32.push((java.lang.Object) stackAr39);
        stackAr18.push((java.lang.Object) stackAr32);
        boolean boolean49 = stackAr32.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[4]]" + "'", str15, "[[4]]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[4]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4]" + "'", str45, "[4]");
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + '4' + "'", obj46, '4');
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        boolean boolean16 = stackAr1.isFull();
        int int17 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isFull();
        int int13 = stackAr7.size();
        boolean boolean15 = stackAr7.equals((java.lang.Object) 'a');
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        java.lang.String str17 = stackAr1.toString();
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        java.lang.String str2 = stackAr1.toString();
        int int3 = stackAr1.size();
        int int4 = stackAr1.size();
        boolean boolean5 = stackAr1.isEmpty();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr3.equals((java.lang.Object) (byte) 1);
        boolean boolean6 = stackAr3.isFull();
        java.lang.Object obj7 = new java.lang.Object();
        stackAr3.push(obj7);
        boolean boolean9 = stackAr3.isFull();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr11.equals((java.lang.Object) (byte) 1);
        boolean boolean14 = stackAr11.isFull();
        java.lang.Object obj15 = new java.lang.Object();
        stackAr11.push(obj15);
        boolean boolean17 = stackAr11.isFull();
        java.lang.String str18 = stackAr11.toString();
        boolean boolean19 = stackAr3.equals((java.lang.Object) str18);
        boolean boolean20 = stackAr3.isEmpty();
        java.lang.Object[] objArray29 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean30 = org.autotest.StackAr.repOkFunction((int) 'a', objArray29);
        boolean boolean31 = org.autotest.StackAr.repOkFunction(0, objArray29);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray29);
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray29);
        boolean boolean34 = org.autotest.StackAr.repOkFunction((int) '4', objArray29);
        stackAr3.push((java.lang.Object) objArray29);
        boolean boolean36 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray29);
        boolean boolean37 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray29);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        java.lang.Object obj29 = new java.lang.Object();
        stackAr25.push(obj29);
        boolean boolean31 = stackAr17.equals(obj29);
        stackAr1.push((java.lang.Object) stackAr17);
        boolean boolean33 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
        int int35 = stackAr34.size();
        java.lang.Object[] objArray41 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean42 = org.autotest.StackAr.repOkFunction((int) 'a', objArray41);
        boolean boolean43 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray41);
        boolean boolean44 = stackAr34.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        java.lang.Object obj50 = new java.lang.Object();
        stackAr46.push(obj50);
        boolean boolean53 = stackAr46.equals((java.lang.Object) (byte) -1);
        boolean boolean54 = stackAr34.equals((java.lang.Object) boolean53);
        boolean boolean55 = stackAr34.isFull();
        org.autotest.StackAr stackAr57 = new org.autotest.StackAr((int) '#');
        boolean boolean58 = stackAr57.isEmpty();
        int int59 = stackAr57.size();
        stackAr57.push((java.lang.Object) (byte) 100);
        stackAr34.push((java.lang.Object) (byte) 100);
        stackAr34.push((java.lang.Object) 10.0f);
        java.lang.Object obj65 = stackAr34.top();
        stackAr1.push((java.lang.Object) stackAr34);
        int int67 = stackAr34.size();
        boolean boolean68 = stackAr34.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + obj65 + "' != '" + 10.0f + "'", obj65, 10.0f);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        int int7 = stackAr1.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isFull();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean13 = stackAr9.equals((java.lang.Object) 100L);
        boolean boolean14 = stackAr9.isFull();
        stackAr5.push((java.lang.Object) stackAr9);
        java.lang.Object obj16 = stackAr5.top();
        boolean boolean17 = stackAr1.equals((java.lang.Object) stackAr5);
        java.lang.Object obj18 = stackAr5.top();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "[]");
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        int int5 = stackAr1.size();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object obj13 = stackAr1.top();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        java.lang.String str16 = stackAr15.toString();
        stackAr1.push((java.lang.Object) stackAr15);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean25 = stackAr24.isEmpty();
        stackAr19.push((java.lang.Object) stackAr24);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str29 = stackAr28.toString();
        boolean boolean30 = stackAr28.isFull();
        stackAr28.push((java.lang.Object) 1);
        boolean boolean33 = stackAr28.isEmpty();
        stackAr24.push((java.lang.Object) boolean33);
        java.lang.Object obj35 = stackAr24.top();
        java.lang.Object obj36 = stackAr24.top();
        int int37 = stackAr24.size();
        stackAr1.push((java.lang.Object) int37);
        java.lang.Object obj39 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + false + "'", obj35, false);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + false + "'", obj36, false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + 1 + "'", obj39, 1);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = new java.lang.Object();
        stackAr8.push(obj12);
        java.lang.String str14 = stackAr8.toString();
        boolean boolean15 = stackAr8.isEmpty();
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean21 = stackAr18.isEmpty();
        boolean boolean23 = stackAr18.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        stackAr25.push((java.lang.Object) '4');
        stackAr18.push((java.lang.Object) stackAr25);
        boolean boolean32 = stackAr18.isEmpty();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        int int36 = stackAr34.size();
        boolean boolean37 = stackAr34.isFull();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        boolean boolean45 = stackAr39.isFull();
        java.lang.String str46 = stackAr39.toString();
        stackAr39.push((java.lang.Object) (byte) 0);
        stackAr34.push((java.lang.Object) stackAr39);
        boolean boolean50 = stackAr18.equals((java.lang.Object) stackAr39);
        stackAr1.push((java.lang.Object) stackAr18);
        int int52 = stackAr18.size();
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr();
        int int54 = stackAr53.size();
        java.lang.Object[] objArray60 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean61 = org.autotest.StackAr.repOkFunction((int) 'a', objArray60);
        boolean boolean62 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray60);
        boolean boolean63 = stackAr53.equals((java.lang.Object) (byte) 10);
        java.lang.String str64 = stackAr53.toString();
        java.lang.String str65 = stackAr53.toString();
        java.lang.String str66 = stackAr53.toString();
        java.lang.String str67 = stackAr53.toString();
        org.autotest.StackAr stackAr68 = new org.autotest.StackAr();
        int int69 = stackAr68.size();
        java.lang.Object[] objArray75 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean76 = org.autotest.StackAr.repOkFunction((int) 'a', objArray75);
        boolean boolean77 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray75);
        boolean boolean78 = stackAr68.equals((java.lang.Object) (byte) 10);
        java.lang.String str79 = stackAr68.toString();
        org.autotest.StackAr stackAr81 = new org.autotest.StackAr(0);
        boolean boolean82 = stackAr68.equals((java.lang.Object) 0);
        int int83 = stackAr68.size();
        stackAr53.push((java.lang.Object) stackAr68);
        boolean boolean85 = stackAr18.equals((java.lang.Object) stackAr53);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "[]" + "'", str64, "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "[]" + "'", str65, "[]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[]" + "'", str66, "[]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "[]" + "'", str79, "[]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        stackAr6.push((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        boolean boolean31 = stackAr28.isEmpty();
        stackAr28.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        stackAr35.push((java.lang.Object) stackAr39);
        int int46 = stackAr35.size();
        stackAr28.push((java.lang.Object) stackAr35);
        boolean boolean48 = stackAr6.equals((java.lang.Object) stackAr28);
        java.lang.String str49 = stackAr6.toString();
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean53 = stackAr51.equals((java.lang.Object) (byte) 1);
        boolean boolean54 = stackAr51.isFull();
        stackAr51.push((java.lang.Object) '4');
        java.lang.Object obj57 = null;
        boolean boolean58 = stackAr51.equals(obj57);
        boolean boolean59 = stackAr51.isEmpty();
        java.lang.String str60 = stackAr51.toString();
        boolean boolean61 = stackAr6.equals((java.lang.Object) stackAr51);
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) '#');
        boolean boolean65 = stackAr63.equals((java.lang.Object) (byte) 100);
        boolean boolean66 = stackAr63.isEmpty();
        boolean boolean67 = stackAr63.isEmpty();
        java.lang.String str68 = stackAr63.toString();
        boolean boolean69 = stackAr63.isEmpty();
        boolean boolean70 = stackAr51.equals((java.lang.Object) stackAr63);
        java.lang.Object obj71 = stackAr51.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[4]" + "'", str60, "[4]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + obj71 + "' != '" + '4' + "'", obj71, '4');
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        int int9 = stackAr1.size();
        java.lang.String str10 = stackAr1.toString();
        boolean boolean11 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 1);
        boolean boolean16 = stackAr13.isFull();
        stackAr13.push((java.lang.Object) '4');
        boolean boolean20 = stackAr13.equals((java.lang.Object) 100);
        stackAr1.push((java.lang.Object) 100);
        java.lang.Object obj22 = stackAr1.top();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str25 = stackAr24.toString();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr(0);
        int int28 = stackAr27.size();
        stackAr24.push((java.lang.Object) stackAr27);
        java.lang.Object obj30 = stackAr24.pop();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr();
        int int32 = stackAr31.size();
        java.lang.Object[] objArray38 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean39 = org.autotest.StackAr.repOkFunction((int) 'a', objArray38);
        boolean boolean40 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray38);
        boolean boolean41 = stackAr31.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 1);
        boolean boolean46 = stackAr43.isFull();
        java.lang.Object obj47 = new java.lang.Object();
        stackAr43.push(obj47);
        boolean boolean50 = stackAr43.equals((java.lang.Object) (byte) -1);
        boolean boolean51 = stackAr31.equals((java.lang.Object) boolean50);
        boolean boolean52 = stackAr31.isFull();
        org.autotest.StackAr stackAr54 = new org.autotest.StackAr((int) '#');
        boolean boolean55 = stackAr54.isEmpty();
        int int56 = stackAr54.size();
        stackAr54.push((java.lang.Object) (byte) 100);
        stackAr31.push((java.lang.Object) (byte) 100);
        java.lang.String str60 = stackAr31.toString();
        org.autotest.StackAr stackAr61 = new org.autotest.StackAr();
        int int62 = stackAr61.size();
        org.autotest.StackAr stackAr64 = new org.autotest.StackAr(1);
        boolean boolean65 = stackAr64.isFull();
        stackAr61.push((java.lang.Object) boolean65);
        boolean boolean67 = stackAr31.equals((java.lang.Object) stackAr61);
        boolean boolean68 = stackAr61.isEmpty();
        stackAr24.push((java.lang.Object) stackAr61);
        boolean boolean70 = stackAr1.equals((java.lang.Object) stackAr61);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + 100 + "'", obj22, 100);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[100]" + "'", str60, "[100]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(10, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) '#', objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(4, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) '4');
        java.lang.Object obj13 = null;
        boolean boolean14 = stackAr7.equals(obj13);
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj16 = stackAr7.top();
        boolean boolean17 = stackAr7.isFull();
        boolean boolean18 = stackAr7.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + '4' + "'", obj16, '4');
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isFull();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isEmpty();
        boolean boolean21 = stackAr17.isEmpty();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        stackAr1.push((java.lang.Object) int23);
        boolean boolean25 = stackAr1.isEmpty();
        int int26 = stackAr1.size();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        java.lang.Object obj32 = new java.lang.Object();
        stackAr28.push(obj32);
        boolean boolean35 = stackAr28.equals((java.lang.Object) (byte) -1);
        int int36 = stackAr28.size();
        boolean boolean37 = stackAr28.isFull();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr39.isEmpty();
        int int41 = stackAr39.size();
        boolean boolean42 = stackAr39.isEmpty();
        boolean boolean44 = stackAr39.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        stackAr46.push((java.lang.Object) '4');
        stackAr39.push((java.lang.Object) stackAr46);
        boolean boolean53 = stackAr39.isEmpty();
        boolean boolean54 = stackAr39.isFull();
        stackAr28.push((java.lang.Object) stackAr39);
        java.lang.Object obj56 = stackAr39.top();
        stackAr1.push(obj56);
        java.lang.Class<?> wildcardClass58 = obj56.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "[4]");
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object obj13 = stackAr1.top();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        java.lang.String str16 = stackAr15.toString();
        stackAr1.push((java.lang.Object) stackAr15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = stackAr15.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr8);
        int int23 = stackAr1.size();
        int int24 = stackAr1.size();
        int int25 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj8);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean6 = stackAr1.equals((java.lang.Object) "[]");
        boolean boolean7 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr24.isEmpty();
        int int26 = stackAr24.size();
        boolean boolean27 = stackAr24.isEmpty();
        boolean boolean29 = stackAr24.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr(0);
        stackAr24.push((java.lang.Object) 0);
        stackAr8.push((java.lang.Object) 0);
        java.lang.String str34 = stackAr8.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[[4],0]" + "'", str34, "[[4],0]");
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.String str7 = stackAr1.toString();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isEmpty();
        boolean boolean13 = stackAr9.isEmpty();
        boolean boolean14 = stackAr9.isFull();
        int int15 = stackAr9.size();
        int int16 = stackAr9.size();
        boolean boolean17 = stackAr1.equals((java.lang.Object) stackAr9);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4]" + "'", str7, "[4]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        java.lang.String str29 = stackAr0.toString();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr31.isEmpty();
        boolean boolean34 = stackAr31.equals((java.lang.Object) '#');
        boolean boolean36 = stackAr31.equals((java.lang.Object) "hi!");
        boolean boolean37 = stackAr31.isFull();
        int int38 = stackAr31.size();
        boolean boolean39 = stackAr31.isFull();
        boolean boolean40 = stackAr0.equals((java.lang.Object) boolean39);
        java.lang.Object obj41 = stackAr0.top();
        java.lang.String str42 = stackAr0.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100]" + "'", str29, "[100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + (byte) 100 + "'", obj41, (byte) 100);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[100]" + "'", str42, "[100]");
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isEmpty();
        java.lang.Object obj18 = stackAr1.pop();
        boolean boolean20 = stackAr1.equals((java.lang.Object) 0);
        boolean boolean21 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass22 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "[4]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr8.equals((java.lang.Object) (short) 1);
        int int18 = stackAr8.size();
        java.lang.Object[] objArray27 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) 'a', objArray27);
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean30 = org.autotest.StackAr.repOkFunction(100, objArray27);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) '#', objArray27);
        stackAr8.push((java.lang.Object) '#');
        java.lang.Object obj34 = stackAr8.top();
        java.lang.Object obj35 = stackAr8.top();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr41.isEmpty();
        int int43 = stackAr41.size();
        boolean boolean45 = stackAr41.equals((java.lang.Object) 100L);
        boolean boolean46 = stackAr41.isFull();
        stackAr37.push((java.lang.Object) stackAr41);
        boolean boolean48 = stackAr41.isFull();
        java.lang.String str49 = stackAr41.toString();
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean53 = stackAr51.equals((java.lang.Object) (byte) 1);
        boolean boolean54 = stackAr51.isFull();
        boolean boolean55 = stackAr51.isFull();
        boolean boolean56 = stackAr51.isFull();
        int int57 = stackAr51.size();
        org.autotest.StackAr stackAr59 = new org.autotest.StackAr((int) '#');
        boolean boolean61 = stackAr59.equals((java.lang.Object) (byte) 100);
        boolean boolean62 = stackAr51.equals((java.lang.Object) stackAr59);
        boolean boolean63 = stackAr41.equals((java.lang.Object) stackAr59);
        org.autotest.StackAr stackAr65 = new org.autotest.StackAr((int) '#');
        boolean boolean67 = stackAr65.equals((java.lang.Object) (byte) 1);
        boolean boolean68 = stackAr65.isFull();
        boolean boolean69 = stackAr65.isFull();
        boolean boolean70 = stackAr65.isFull();
        int int71 = stackAr65.size();
        boolean boolean73 = stackAr65.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr74 = new org.autotest.StackAr();
        boolean boolean75 = stackAr74.isEmpty();
        org.autotest.StackAr stackAr76 = new org.autotest.StackAr();
        int int77 = stackAr76.size();
        stackAr74.push((java.lang.Object) int77);
        boolean boolean79 = stackAr65.equals((java.lang.Object) int77);
        int int80 = stackAr65.size();
        stackAr41.push((java.lang.Object) stackAr65);
        boolean boolean82 = stackAr8.equals((java.lang.Object) stackAr41);
        java.lang.String str83 = stackAr8.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + '#' + "'", obj34, '#');
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + '#' + "'", obj35, '#');
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "[#]" + "'", str83, "[#]");
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        java.lang.Object[] objArray12 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) 'a', objArray12);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray12);
        boolean boolean15 = org.autotest.StackAr.repOkFunction(100, objArray12);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray12);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) '#', objArray12);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray12);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((-1), objArray12);
        boolean boolean20 = org.autotest.StackAr.repOkFunction(10, objArray12);
        boolean boolean21 = org.autotest.StackAr.repOkFunction(4, objArray12);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) 0.0f);
        int int5 = stackAr1.size();
        int int6 = stackAr1.size();
        boolean boolean7 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        java.lang.Object obj17 = stackAr9.top();
        java.lang.Object[] objArray24 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) 'a', objArray24);
        boolean boolean26 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray24);
        boolean boolean27 = org.autotest.StackAr.repOkFunction((-1), objArray24);
        boolean boolean28 = stackAr9.equals((java.lang.Object) objArray24);
        boolean boolean29 = stackAr1.equals((java.lang.Object) objArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 100);
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr9);
        boolean boolean13 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr15.isEmpty();
        int int17 = stackAr15.size();
        boolean boolean18 = stackAr15.isEmpty();
        boolean boolean20 = stackAr15.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        stackAr22.push((java.lang.Object) '4');
        stackAr15.push((java.lang.Object) stackAr22);
        boolean boolean29 = stackAr15.isEmpty();
        java.lang.String str30 = stackAr15.toString();
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr(0);
        int int33 = stackAr32.size();
        boolean boolean34 = stackAr15.equals((java.lang.Object) stackAr32);
        stackAr1.push((java.lang.Object) stackAr15);
        java.lang.Class<?> wildcardClass36 = stackAr15.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[[4]]" + "'", str30, "[[4]]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        int int6 = stackAr1.size();
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        boolean boolean9 = stackAr5.isFull();
        int int10 = stackAr5.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        stackAr12.push((java.lang.Object) "[]");
        stackAr5.push((java.lang.Object) stackAr12);
        java.lang.Object obj18 = stackAr12.pop();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean21 = stackAr20.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        boolean boolean25 = stackAr23.isEmpty();
        int int26 = stackAr23.size();
        int int27 = stackAr23.size();
        boolean boolean28 = stackAr20.equals((java.lang.Object) stackAr23);
        boolean boolean29 = stackAr12.equals((java.lang.Object) boolean28);
        boolean boolean30 = stackAr1.equals((java.lang.Object) stackAr12);
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr();
        int int32 = stackAr31.size();
        java.lang.Object[] objArray38 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean39 = org.autotest.StackAr.repOkFunction((int) 'a', objArray38);
        boolean boolean40 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray38);
        boolean boolean41 = stackAr31.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 1);
        boolean boolean46 = stackAr43.isFull();
        boolean boolean47 = stackAr43.isFull();
        boolean boolean48 = stackAr43.isFull();
        int int49 = stackAr43.size();
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean52 = stackAr51.isEmpty();
        int int53 = stackAr51.size();
        boolean boolean54 = stackAr51.isEmpty();
        boolean boolean55 = stackAr43.equals((java.lang.Object) stackAr51);
        boolean boolean56 = stackAr31.equals((java.lang.Object) boolean55);
        java.lang.String str57 = stackAr31.toString();
        boolean boolean58 = stackAr31.isEmpty();
        boolean boolean59 = stackAr12.equals((java.lang.Object) stackAr31);
        int int60 = stackAr12.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + "[]" + "'", obj18, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        int int9 = stackAr1.size();
        java.lang.Object obj10 = stackAr1.pop();
        java.lang.Class<?> wildcardClass11 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        boolean boolean6 = stackAr4.isEmpty();
        int int7 = stackAr4.size();
        int int8 = stackAr4.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) stackAr4);
        int int10 = stackAr1.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        boolean boolean16 = stackAr12.isFull();
        int int17 = stackAr12.size();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        stackAr19.push((java.lang.Object) "[]");
        stackAr12.push((java.lang.Object) stackAr19);
        java.lang.Object obj25 = stackAr19.pop();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean28 = stackAr19.equals((java.lang.Object) (short) 1);
        int int29 = stackAr19.size();
        java.lang.Object[] objArray38 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean39 = org.autotest.StackAr.repOkFunction((int) 'a', objArray38);
        boolean boolean40 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray38);
        boolean boolean41 = org.autotest.StackAr.repOkFunction(100, objArray38);
        boolean boolean42 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray38);
        boolean boolean43 = org.autotest.StackAr.repOkFunction((int) '#', objArray38);
        stackAr19.push((java.lang.Object) '#');
        boolean boolean45 = stackAr1.equals((java.lang.Object) stackAr19);
        int int46 = stackAr19.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + "[]" + "'", obj25, "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        stackAr6.push((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        boolean boolean31 = stackAr28.isEmpty();
        stackAr28.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        stackAr35.push((java.lang.Object) stackAr39);
        int int46 = stackAr35.size();
        stackAr28.push((java.lang.Object) stackAr35);
        boolean boolean48 = stackAr6.equals((java.lang.Object) stackAr28);
        java.lang.String str49 = stackAr6.toString();
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean53 = stackAr51.equals((java.lang.Object) (byte) 1);
        boolean boolean54 = stackAr51.isFull();
        stackAr51.push((java.lang.Object) '4');
        java.lang.Object obj57 = null;
        boolean boolean58 = stackAr51.equals(obj57);
        boolean boolean59 = stackAr51.isEmpty();
        java.lang.String str60 = stackAr51.toString();
        boolean boolean61 = stackAr6.equals((java.lang.Object) stackAr51);
        java.lang.Object obj62 = stackAr51.pop();
        boolean boolean63 = stackAr51.isFull();
        boolean boolean64 = stackAr51.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[4]" + "'", str60, "[4]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + obj62 + "' != '" + '4' + "'", obj62, '4');
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        int int7 = stackAr1.size();
        boolean boolean8 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) ' ');
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        boolean boolean4 = stackAr3.isEmpty();
        boolean boolean5 = stackAr3.isEmpty();
        int int6 = stackAr3.size();
        boolean boolean7 = stackAr3.isFull();
        boolean boolean8 = stackAr3.isEmpty();
        int int9 = stackAr3.size();
        stackAr1.push((java.lang.Object) int9);
        boolean boolean11 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '4');
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        java.lang.String str4 = stackAr3.toString();
        boolean boolean5 = stackAr1.equals((java.lang.Object) str4);
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr7.isEmpty();
        int int9 = stackAr7.size();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean12 = stackAr7.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 1);
        boolean boolean17 = stackAr14.isFull();
        stackAr14.push((java.lang.Object) '4');
        stackAr7.push((java.lang.Object) stackAr14);
        boolean boolean21 = stackAr7.isEmpty();
        java.lang.String str22 = stackAr7.toString();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr(0);
        int int25 = stackAr24.size();
        boolean boolean26 = stackAr7.equals((java.lang.Object) stackAr24);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr28.isEmpty();
        int int30 = stackAr28.size();
        boolean boolean31 = stackAr28.isEmpty();
        boolean boolean32 = stackAr28.isEmpty();
        boolean boolean33 = stackAr28.isFull();
        int int34 = stackAr28.size();
        boolean boolean35 = stackAr7.equals((java.lang.Object) stackAr28);
        stackAr1.push((java.lang.Object) boolean35);
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr38.equals((java.lang.Object) (byte) 1);
        boolean boolean41 = stackAr38.isFull();
        java.lang.Object obj42 = new java.lang.Object();
        stackAr38.push(obj42);
        boolean boolean44 = stackAr38.isFull();
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        java.lang.Object obj50 = new java.lang.Object();
        stackAr46.push(obj50);
        boolean boolean52 = stackAr46.isFull();
        java.lang.String str53 = stackAr46.toString();
        boolean boolean54 = stackAr38.equals((java.lang.Object) str53);
        boolean boolean55 = stackAr38.isEmpty();
        boolean boolean56 = stackAr38.isFull();
        org.autotest.StackAr stackAr58 = new org.autotest.StackAr((int) '#');
        boolean boolean60 = stackAr58.equals((java.lang.Object) (byte) 1);
        boolean boolean61 = stackAr58.isFull();
        boolean boolean62 = stackAr58.isFull();
        stackAr38.push((java.lang.Object) boolean62);
        boolean boolean64 = stackAr38.isFull();
        boolean boolean65 = stackAr38.isEmpty();
        java.lang.Object obj66 = stackAr38.top();
        stackAr1.push(obj66);
        int int68 = stackAr1.size();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[[4]]" + "'", str22, "[[4]]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + obj66 + "' != '" + false + "'", obj66, false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        stackAr6.push((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        boolean boolean31 = stackAr28.isEmpty();
        stackAr28.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        stackAr35.push((java.lang.Object) stackAr39);
        int int46 = stackAr35.size();
        stackAr28.push((java.lang.Object) stackAr35);
        boolean boolean48 = stackAr6.equals((java.lang.Object) stackAr28);
        java.lang.String str49 = stackAr6.toString();
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean53 = stackAr51.equals((java.lang.Object) (byte) 1);
        boolean boolean54 = stackAr51.isFull();
        stackAr51.push((java.lang.Object) '4');
        java.lang.Object obj57 = null;
        boolean boolean58 = stackAr51.equals(obj57);
        boolean boolean59 = stackAr51.isEmpty();
        java.lang.String str60 = stackAr51.toString();
        boolean boolean61 = stackAr6.equals((java.lang.Object) stackAr51);
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) '#');
        boolean boolean65 = stackAr63.equals((java.lang.Object) (byte) 100);
        boolean boolean66 = stackAr63.isEmpty();
        boolean boolean67 = stackAr63.isEmpty();
        java.lang.String str68 = stackAr63.toString();
        boolean boolean69 = stackAr63.isEmpty();
        boolean boolean70 = stackAr51.equals((java.lang.Object) stackAr63);
        boolean boolean71 = stackAr63.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[4]" + "'", str60, "[4]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[]" + "'", str68, "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (byte) 0);
        java.lang.Object obj2 = null;
        boolean boolean3 = stackAr1.equals(obj2);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        stackAr5.push((java.lang.Object) "[]");
        int int10 = stackAr5.size();
        java.lang.Object obj11 = stackAr5.top();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) (short) 100);
        boolean boolean14 = stackAr5.equals((java.lang.Object) (short) 100);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
        int int16 = stackAr15.size();
        java.lang.Object[] objArray22 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) 'a', objArray22);
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray22);
        boolean boolean25 = stackAr15.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        java.lang.Object obj31 = new java.lang.Object();
        stackAr27.push(obj31);
        boolean boolean34 = stackAr27.equals((java.lang.Object) (byte) -1);
        boolean boolean35 = stackAr15.equals((java.lang.Object) boolean34);
        boolean boolean36 = stackAr15.isFull();
        boolean boolean37 = stackAr5.equals((java.lang.Object) boolean36);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) boolean37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "[]" + "'", obj11, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object obj13 = stackAr1.top();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "[]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        boolean boolean5 = stackAr1.isEmpty();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(0, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr1.pop();
        java.lang.String str16 = stackAr1.toString();
        boolean boolean17 = stackAr1.isFull();
        boolean boolean18 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean21 = stackAr20.isEmpty();
        boolean boolean23 = stackAr20.equals((java.lang.Object) 0.0f);
        int int24 = stackAr20.size();
        java.lang.String str25 = stackAr20.toString();
        stackAr1.push((java.lang.Object) str25);
        boolean boolean27 = stackAr1.isEmpty();
        int int28 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(0, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) ' ', objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(100, objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr8.equals((java.lang.Object) (short) 1);
        int int18 = stackAr8.size();
        java.lang.Object[] objArray27 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) 'a', objArray27);
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean30 = org.autotest.StackAr.repOkFunction(100, objArray27);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) '#', objArray27);
        stackAr8.push((java.lang.Object) '#');
        boolean boolean34 = stackAr8.isEmpty();
        java.lang.Object obj35 = stackAr8.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + '#' + "'", obj35, '#');
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        stackAr9.push((java.lang.Object) "[]");
        int int14 = stackAr9.size();
        boolean boolean16 = stackAr9.equals((java.lang.Object) 'a');
        boolean boolean17 = stackAr1.equals((java.lang.Object) boolean16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isEmpty();
        boolean boolean20 = stackAr1.isFull();
        int int21 = stackAr1.size();
        java.lang.Object obj22 = stackAr1.pop();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr24.equals((java.lang.Object) (byte) 1);
        boolean boolean27 = stackAr24.isFull();
        stackAr24.push((java.lang.Object) '4');
        boolean boolean31 = stackAr24.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr33.equals((java.lang.Object) (byte) 1);
        boolean boolean36 = stackAr33.isFull();
        boolean boolean37 = stackAr33.isFull();
        int int38 = stackAr33.size();
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr40.equals((java.lang.Object) (byte) 1);
        stackAr40.push((java.lang.Object) "[]");
        stackAr33.push((java.lang.Object) stackAr40);
        boolean boolean46 = stackAr24.equals((java.lang.Object) stackAr40);
        boolean boolean47 = stackAr40.isFull();
        boolean boolean48 = stackAr40.isFull();
        boolean boolean49 = stackAr40.isEmpty();
        java.lang.String str50 = stackAr40.toString();
        stackAr1.push((java.lang.Object) stackAr40);
        java.lang.Class<?> wildcardClass52 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "[[]]" + "'", str50, "[[]]");
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) '4', objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction(100, objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        stackAr9.push((java.lang.Object) "[]");
        int int14 = stackAr9.size();
        boolean boolean16 = stackAr9.equals((java.lang.Object) 'a');
        boolean boolean17 = stackAr1.equals((java.lang.Object) boolean16);
        boolean boolean19 = stackAr1.equals((java.lang.Object) 1.0f);
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) (byte) 100);
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        boolean boolean25 = stackAr23.isEmpty();
        int int26 = stackAr23.size();
        int int27 = stackAr23.size();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        boolean boolean32 = stackAr29.isFull();
        boolean boolean33 = stackAr29.isFull();
        boolean boolean34 = stackAr29.isFull();
        int int35 = stackAr29.size();
        boolean boolean37 = stackAr29.equals((java.lang.Object) 'a');
        boolean boolean38 = stackAr23.equals((java.lang.Object) boolean37);
        java.lang.String str39 = stackAr23.toString();
        int int40 = stackAr23.size();
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr42.equals((java.lang.Object) (byte) 1);
        boolean boolean45 = stackAr42.isFull();
        boolean boolean46 = stackAr42.isFull();
        boolean boolean47 = stackAr42.isFull();
        int int48 = stackAr42.size();
        boolean boolean50 = stackAr42.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr();
        boolean boolean52 = stackAr51.isEmpty();
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr();
        int int54 = stackAr53.size();
        stackAr51.push((java.lang.Object) int54);
        boolean boolean56 = stackAr42.equals((java.lang.Object) int54);
        java.lang.Class<?> wildcardClass57 = stackAr42.getClass();
        boolean boolean58 = stackAr23.equals((java.lang.Object) wildcardClass57);
        boolean boolean59 = stackAr21.equals((java.lang.Object) wildcardClass57);
        stackAr1.push((java.lang.Object) wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "[]" + "'", str39, "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr12.isEmpty();
        int int14 = stackAr12.size();
        boolean boolean16 = stackAr12.equals((java.lang.Object) 100L);
        boolean boolean17 = stackAr12.isFull();
        stackAr8.push((java.lang.Object) stackAr12);
        boolean boolean19 = stackAr8.isFull();
        boolean boolean20 = stackAr1.equals((java.lang.Object) stackAr8);
        java.lang.Object obj21 = stackAr1.top();
        boolean boolean22 = stackAr1.isEmpty();
        java.lang.String str23 = stackAr1.toString();
        java.lang.Object obj24 = stackAr1.pop();
        boolean boolean25 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        java.lang.Object obj7 = stackAr1.pop();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isEmpty();
        boolean boolean14 = stackAr9.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        stackAr16.push((java.lang.Object) '4');
        stackAr9.push((java.lang.Object) stackAr16);
        java.lang.String str23 = stackAr16.toString();
        int int24 = stackAr16.size();
        boolean boolean25 = stackAr1.equals((java.lang.Object) int24);
        java.lang.Class<?> wildcardClass26 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (short) 0 + "'", obj7, (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[4]" + "'", str23, "[4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) 'a');
        java.lang.String str10 = stackAr1.toString();
        int int11 = stackAr1.size();
        java.lang.Class<?> wildcardClass12 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        stackAr6.push((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        boolean boolean31 = stackAr28.isEmpty();
        stackAr28.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        stackAr35.push((java.lang.Object) stackAr39);
        int int46 = stackAr35.size();
        stackAr28.push((java.lang.Object) stackAr35);
        boolean boolean48 = stackAr6.equals((java.lang.Object) stackAr28);
        java.lang.Object obj49 = stackAr28.pop();
        int int50 = stackAr28.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        int int12 = stackAr1.size();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean22 = stackAr18.equals((java.lang.Object) 100L);
        boolean boolean23 = stackAr18.isFull();
        stackAr14.push((java.lang.Object) stackAr18);
        boolean boolean25 = stackAr14.isEmpty();
        boolean boolean26 = stackAr1.equals((java.lang.Object) stackAr14);
        java.lang.Object[] objArray35 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean36 = org.autotest.StackAr.repOkFunction((int) 'a', objArray35);
        boolean boolean37 = org.autotest.StackAr.repOkFunction(100, objArray35);
        boolean boolean38 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray35);
        boolean boolean39 = org.autotest.StackAr.repOkFunction(1, objArray35);
        boolean boolean40 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray35);
        stackAr14.push((java.lang.Object) objArray35);
        java.lang.Class<?> wildcardClass42 = objArray35.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(0, objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(2, objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isFull();
        java.lang.Object obj13 = stackAr1.pop();
        java.lang.String str14 = stackAr1.toString();
        boolean boolean15 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) 1);
        java.lang.Object obj6 = stackAr1.pop();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = null;
        stackAr1.push(obj8);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 1 + "'", obj6, 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        java.lang.String str16 = stackAr1.toString();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr(0);
        int int19 = stackAr18.size();
        boolean boolean20 = stackAr1.equals((java.lang.Object) stackAr18);
        java.lang.String str21 = stackAr1.toString();
        java.lang.Object obj22 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[[4]]" + "'", str16, "[[4]]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[[4]]" + "'", str21, "[[4]]");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "[4]");
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.lang.Object[] objArray11 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) 'a', objArray11);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray11);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(100, objArray11);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray11);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray11);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) ' ', objArray11);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray11);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) '#', objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        int int5 = stackAr1.size();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = new java.lang.Object();
        stackAr8.push(obj12);
        java.lang.String str14 = stackAr8.toString();
        boolean boolean15 = stackAr8.isEmpty();
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean21 = stackAr18.isEmpty();
        boolean boolean23 = stackAr18.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        stackAr25.push((java.lang.Object) '4');
        stackAr18.push((java.lang.Object) stackAr25);
        boolean boolean32 = stackAr18.isEmpty();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        int int36 = stackAr34.size();
        boolean boolean37 = stackAr34.isFull();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        boolean boolean45 = stackAr39.isFull();
        java.lang.String str46 = stackAr39.toString();
        stackAr39.push((java.lang.Object) (byte) 0);
        stackAr34.push((java.lang.Object) stackAr39);
        boolean boolean50 = stackAr18.equals((java.lang.Object) stackAr39);
        stackAr1.push((java.lang.Object) stackAr18);
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean54 = stackAr53.isEmpty();
        boolean boolean55 = stackAr53.isEmpty();
        boolean boolean56 = stackAr53.isFull();
        boolean boolean57 = stackAr53.isEmpty();
        java.lang.String str58 = stackAr53.toString();
        java.lang.String str59 = stackAr53.toString();
        boolean boolean60 = stackAr18.equals((java.lang.Object) str59);
        boolean boolean61 = stackAr18.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.String str6 = stackAr1.toString();
        boolean boolean7 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.String str13 = stackAr9.toString();
        java.lang.Object[] objArray21 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean22 = org.autotest.StackAr.repOkFunction((int) 'a', objArray21);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray21);
        boolean boolean24 = org.autotest.StackAr.repOkFunction(100, objArray21);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray21);
        stackAr9.push((java.lang.Object) objArray21);
        boolean boolean27 = stackAr9.isEmpty();
        int int28 = stackAr9.size();
        boolean boolean29 = stackAr1.equals((java.lang.Object) int28);
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr31.isEmpty();
        boolean boolean33 = stackAr31.isEmpty();
        int int34 = stackAr31.size();
        stackAr1.push((java.lang.Object) int34);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.Object obj7 = null;
        boolean boolean8 = stackAr1.equals(obj7);
        java.lang.Object obj9 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + '4' + "'", obj9, '4');
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        java.lang.Object obj17 = stackAr6.pop();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        boolean boolean25 = stackAr19.isFull();
        java.lang.String str26 = stackAr19.toString();
        java.lang.Object obj27 = stackAr19.top();
        java.lang.Object obj28 = stackAr19.top();
        java.lang.Object obj29 = stackAr19.pop();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr31.isEmpty();
        boolean boolean33 = stackAr31.isEmpty();
        int int34 = stackAr31.size();
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean37 = stackAr36.isEmpty();
        stackAr31.push((java.lang.Object) stackAr36);
        boolean boolean39 = stackAr19.equals((java.lang.Object) stackAr36);
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean43 = stackAr41.equals((java.lang.Object) (byte) 1);
        boolean boolean44 = stackAr41.isFull();
        boolean boolean45 = stackAr41.isFull();
        int int46 = stackAr41.size();
        org.autotest.StackAr stackAr48 = new org.autotest.StackAr((int) '#');
        boolean boolean50 = stackAr48.equals((java.lang.Object) (byte) 1);
        stackAr48.push((java.lang.Object) "[]");
        stackAr41.push((java.lang.Object) stackAr48);
        java.lang.Object obj54 = stackAr48.pop();
        org.autotest.StackAr stackAr56 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean57 = stackAr48.equals((java.lang.Object) (short) 1);
        int int58 = stackAr48.size();
        java.lang.Object[] objArray67 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean68 = org.autotest.StackAr.repOkFunction((int) 'a', objArray67);
        boolean boolean69 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray67);
        boolean boolean70 = org.autotest.StackAr.repOkFunction(100, objArray67);
        boolean boolean71 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray67);
        boolean boolean72 = org.autotest.StackAr.repOkFunction((int) '#', objArray67);
        stackAr48.push((java.lang.Object) '#');
        boolean boolean74 = stackAr19.equals((java.lang.Object) '#');
        boolean boolean75 = stackAr6.equals((java.lang.Object) stackAr19);
        boolean boolean76 = stackAr6.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (byte) 0 + "'", obj17, (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + obj54 + "' != '" + "[]" + "'", obj54, "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        int int6 = stackAr1.size();
        java.lang.String str7 = stackAr1.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        int int11 = stackAr1.size();
        java.lang.String str12 = stackAr1.toString();
        int int13 = stackAr1.size();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        stackAr15.push((java.lang.Object) stackAr19);
        boolean boolean26 = stackAr19.isFull();
        boolean boolean27 = stackAr19.isEmpty();
        boolean boolean28 = stackAr1.equals((java.lang.Object) stackAr19);
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 1);
        boolean boolean33 = stackAr30.isFull();
        java.lang.Object obj34 = new java.lang.Object();
        stackAr30.push(obj34);
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr37.isEmpty();
        int int39 = stackAr37.size();
        boolean boolean40 = stackAr37.isEmpty();
        boolean boolean42 = stackAr37.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr44 = new org.autotest.StackAr((int) '#');
        boolean boolean46 = stackAr44.equals((java.lang.Object) (byte) 1);
        boolean boolean47 = stackAr44.isFull();
        stackAr44.push((java.lang.Object) '4');
        stackAr37.push((java.lang.Object) stackAr44);
        stackAr30.push((java.lang.Object) stackAr37);
        int int52 = stackAr30.size();
        java.lang.String str53 = stackAr30.toString();
        java.lang.Object obj54 = stackAr30.pop();
        stackAr1.push((java.lang.Object) stackAr30);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "[[4]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "[[4]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "[[4]]");
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.String str7 = stackAr1.toString();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4]" + "'", str7, "[4]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[4]" + "'", str8, "[4]");
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + '4' + "'", obj9, '4');
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + '4' + "'", obj10, '4');
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isEmpty();
        boolean boolean13 = stackAr1.equals((java.lang.Object) stackAr9);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr(0);
        int int16 = stackAr15.size();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean21 = stackAr18.isEmpty();
        boolean boolean23 = stackAr18.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        stackAr25.push((java.lang.Object) '4');
        stackAr18.push((java.lang.Object) stackAr25);
        boolean boolean32 = stackAr18.isFull();
        boolean boolean34 = stackAr18.equals((java.lang.Object) 100.0d);
        boolean boolean35 = stackAr15.equals((java.lang.Object) 100.0d);
        stackAr9.push((java.lang.Object) 100.0d);
        java.lang.Object obj37 = stackAr9.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + 100.0d + "'", obj37, 100.0d);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr10.isEmpty();
        int int12 = stackAr10.size();
        boolean boolean13 = stackAr10.isEmpty();
        boolean boolean14 = stackAr10.isEmpty();
        boolean boolean15 = stackAr10.isFull();
        int int16 = stackAr10.size();
        boolean boolean17 = stackAr10.isEmpty();
        boolean boolean18 = stackAr1.equals((java.lang.Object) boolean17);
        java.lang.String str19 = stackAr1.toString();
        boolean boolean20 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        boolean boolean6 = stackAr1.isEmpty();
        int int7 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        java.lang.String str7 = stackAr1.toString();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.String str13 = stackAr9.toString();
        int int14 = stackAr9.size();
        stackAr1.push((java.lang.Object) stackAr9);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        java.lang.Object obj25 = new java.lang.Object();
        stackAr21.push(obj25);
        stackAr17.push((java.lang.Object) stackAr21);
        boolean boolean28 = stackAr21.isFull();
        boolean boolean29 = stackAr21.isEmpty();
        java.lang.Object obj30 = stackAr21.pop();
        stackAr1.push((java.lang.Object) stackAr21);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[[]]" + "'", str7, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.String str6 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr2.isEmpty();
        int int4 = stackAr2.size();
        boolean boolean5 = stackAr2.isEmpty();
        boolean boolean7 = stackAr2.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        stackAr9.push((java.lang.Object) '4');
        stackAr2.push((java.lang.Object) stackAr9);
        boolean boolean16 = stackAr2.isFull();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean21 = stackAr18.isEmpty();
        boolean boolean22 = stackAr18.isEmpty();
        boolean boolean23 = stackAr18.isFull();
        int int24 = stackAr18.size();
        stackAr2.push((java.lang.Object) int24);
        java.lang.Object[] objArray33 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean34 = org.autotest.StackAr.repOkFunction((int) 'a', objArray33);
        boolean boolean35 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray33);
        boolean boolean36 = org.autotest.StackAr.repOkFunction(100, objArray33);
        boolean boolean37 = org.autotest.StackAr.repOkFunction(100, objArray33);
        stackAr2.push((java.lang.Object) objArray33);
        boolean boolean39 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray33);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        int int12 = stackAr1.size();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean22 = stackAr18.equals((java.lang.Object) 100L);
        boolean boolean23 = stackAr18.isFull();
        stackAr14.push((java.lang.Object) stackAr18);
        boolean boolean25 = stackAr14.isEmpty();
        boolean boolean26 = stackAr1.equals((java.lang.Object) stackAr14);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        java.lang.Object obj32 = new java.lang.Object();
        stackAr28.push(obj32);
        java.lang.String str34 = stackAr28.toString();
        boolean boolean35 = stackAr28.isEmpty();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        boolean boolean40 = stackAr37.isFull();
        java.lang.Object obj41 = new java.lang.Object();
        stackAr37.push(obj41);
        boolean boolean43 = stackAr37.isFull();
        org.autotest.StackAr stackAr45 = new org.autotest.StackAr((int) '#');
        boolean boolean47 = stackAr45.equals((java.lang.Object) (byte) 1);
        boolean boolean48 = stackAr45.isFull();
        java.lang.Object obj49 = new java.lang.Object();
        stackAr45.push(obj49);
        boolean boolean51 = stackAr45.isFull();
        java.lang.String str52 = stackAr45.toString();
        boolean boolean53 = stackAr37.equals((java.lang.Object) str52);
        stackAr28.push((java.lang.Object) stackAr37);
        boolean boolean55 = stackAr37.isEmpty();
        boolean boolean56 = stackAr37.isEmpty();
        stackAr14.push((java.lang.Object) stackAr37);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr11.isEmpty();
        int int13 = stackAr11.size();
        boolean boolean14 = stackAr11.isEmpty();
        boolean boolean16 = stackAr11.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        stackAr18.push((java.lang.Object) '4');
        stackAr11.push((java.lang.Object) stackAr18);
        java.lang.String str25 = stackAr18.toString();
        int int26 = stackAr18.size();
        boolean boolean27 = stackAr18.isFull();
        boolean boolean28 = stackAr1.equals((java.lang.Object) boolean27);
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 1);
        boolean boolean33 = stackAr30.isFull();
        stackAr30.push((java.lang.Object) '4');
        boolean boolean37 = stackAr30.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        boolean boolean43 = stackAr39.isFull();
        int int44 = stackAr39.size();
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        stackAr46.push((java.lang.Object) "[]");
        stackAr39.push((java.lang.Object) stackAr46);
        boolean boolean52 = stackAr30.equals((java.lang.Object) stackAr46);
        stackAr1.push((java.lang.Object) stackAr46);
        org.autotest.StackAr stackAr55 = new org.autotest.StackAr((int) '#');
        boolean boolean57 = stackAr55.equals((java.lang.Object) (byte) 100);
        boolean boolean58 = stackAr55.isEmpty();
        stackAr55.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr62 = new org.autotest.StackAr((int) '#');
        boolean boolean64 = stackAr62.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr66 = new org.autotest.StackAr((int) '#');
        boolean boolean68 = stackAr66.equals((java.lang.Object) (byte) 1);
        boolean boolean69 = stackAr66.isFull();
        java.lang.Object obj70 = new java.lang.Object();
        stackAr66.push(obj70);
        stackAr62.push((java.lang.Object) stackAr66);
        int int73 = stackAr62.size();
        stackAr55.push((java.lang.Object) stackAr62);
        stackAr1.push((java.lang.Object) stackAr55);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        java.lang.Object obj26 = new java.lang.Object();
        stackAr22.push(obj26);
        boolean boolean28 = stackAr22.isFull();
        java.lang.String str29 = stackAr22.toString();
        stackAr22.push((java.lang.Object) (byte) 0);
        stackAr17.push((java.lang.Object) stackAr22);
        boolean boolean33 = stackAr1.equals((java.lang.Object) stackAr22);
        boolean boolean34 = stackAr22.isEmpty();
        java.lang.String str35 = stackAr22.toString();
        boolean boolean36 = stackAr22.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        boolean boolean11 = stackAr1.isEmpty();
        boolean boolean13 = stackAr1.equals((java.lang.Object) 1L);
        int int14 = stackAr1.size();
        int int15 = stackAr1.size();
        boolean boolean16 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean8 = stackAr1.equals((java.lang.Object) (byte) -1);
        int int9 = stackAr1.size();
        boolean boolean10 = stackAr1.isFull();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr12.isEmpty();
        int int14 = stackAr12.size();
        boolean boolean15 = stackAr12.isEmpty();
        boolean boolean17 = stackAr12.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        stackAr19.push((java.lang.Object) '4');
        stackAr12.push((java.lang.Object) stackAr19);
        boolean boolean26 = stackAr12.isEmpty();
        boolean boolean27 = stackAr12.isFull();
        stackAr1.push((java.lang.Object) stackAr12);
        java.lang.Object obj29 = stackAr12.top();
        java.lang.Class<?> wildcardClass30 = stackAr12.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "[4]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        java.lang.String str29 = stackAr0.toString();
        int int30 = stackAr0.size();
        java.lang.Object obj31 = null;
        stackAr0.push(obj31);
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        int int36 = stackAr34.size();
        boolean boolean38 = stackAr34.equals((java.lang.Object) 100L);
        boolean boolean39 = stackAr34.isFull();
        java.lang.String str40 = stackAr34.toString();
        stackAr0.push((java.lang.Object) stackAr34);
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr43.isEmpty();
        int int45 = stackAr43.size();
        boolean boolean46 = stackAr43.isEmpty();
        boolean boolean48 = stackAr43.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr50 = new org.autotest.StackAr((int) '#');
        boolean boolean52 = stackAr50.equals((java.lang.Object) (byte) 1);
        boolean boolean53 = stackAr50.isFull();
        stackAr50.push((java.lang.Object) '4');
        stackAr43.push((java.lang.Object) stackAr50);
        boolean boolean57 = stackAr43.isEmpty();
        org.autotest.StackAr stackAr59 = new org.autotest.StackAr((int) '#');
        boolean boolean60 = stackAr59.isEmpty();
        int int61 = stackAr59.size();
        boolean boolean62 = stackAr59.isFull();
        org.autotest.StackAr stackAr64 = new org.autotest.StackAr((int) '#');
        boolean boolean66 = stackAr64.equals((java.lang.Object) (byte) 1);
        boolean boolean67 = stackAr64.isFull();
        java.lang.Object obj68 = new java.lang.Object();
        stackAr64.push(obj68);
        boolean boolean70 = stackAr64.isFull();
        java.lang.String str71 = stackAr64.toString();
        stackAr64.push((java.lang.Object) (byte) 0);
        stackAr59.push((java.lang.Object) stackAr64);
        boolean boolean75 = stackAr43.equals((java.lang.Object) stackAr64);
        boolean boolean76 = stackAr0.equals((java.lang.Object) stackAr64);
        boolean boolean77 = stackAr64.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100]" + "'", str29, "[100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr8.equals((java.lang.Object) (short) 1);
        int int18 = stackAr8.size();
        java.lang.Object[] objArray27 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) 'a', objArray27);
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean30 = org.autotest.StackAr.repOkFunction(100, objArray27);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) '#', objArray27);
        stackAr8.push((java.lang.Object) '#');
        boolean boolean34 = stackAr8.isFull();
        java.lang.String str35 = stackAr8.toString();
        java.lang.Class<?> wildcardClass36 = stackAr8.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[#]" + "'", str35, "[#]");
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        int int9 = stackAr1.size();
        java.lang.String str10 = stackAr1.toString();
        int int11 = stackAr1.size();
        boolean boolean12 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 100);
        boolean boolean17 = stackAr14.isEmpty();
        stackAr14.push((java.lang.Object) 'a');
        boolean boolean20 = stackAr14.isFull();
        stackAr1.push((java.lang.Object) boolean20);
        java.lang.String str22 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(0, objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) 0.0f);
        int int5 = stackAr1.size();
        int int6 = stackAr1.size();
        java.lang.String str7 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[]" + "'", str7, "[]");
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        java.lang.String str11 = stackAr7.toString();
        java.lang.Object[] objArray19 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) 'a', objArray19);
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray19);
        boolean boolean22 = org.autotest.StackAr.repOkFunction(100, objArray19);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray19);
        stackAr7.push((java.lang.Object) objArray19);
        boolean boolean25 = stackAr1.equals((java.lang.Object) objArray19);
        boolean boolean26 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        java.lang.String str19 = stackAr1.toString();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        java.lang.String str22 = stackAr21.toString();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr24.isEmpty();
        int int26 = stackAr24.size();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        boolean boolean32 = stackAr28.isFull();
        int int33 = stackAr28.size();
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        stackAr35.push((java.lang.Object) "[]");
        stackAr28.push((java.lang.Object) stackAr35);
        java.lang.Object obj41 = stackAr35.pop();
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean44 = stackAr43.isFull();
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean47 = stackAr46.isEmpty();
        boolean boolean48 = stackAr46.isEmpty();
        int int49 = stackAr46.size();
        int int50 = stackAr46.size();
        boolean boolean51 = stackAr43.equals((java.lang.Object) stackAr46);
        boolean boolean52 = stackAr35.equals((java.lang.Object) boolean51);
        boolean boolean53 = stackAr24.equals((java.lang.Object) stackAr35);
        stackAr21.push((java.lang.Object) stackAr35);
        stackAr1.push((java.lang.Object) stackAr21);
        boolean boolean56 = stackAr21.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + "[]" + "'", obj41, "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr1.pop();
        boolean boolean16 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass17 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[4]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        java.lang.String str3 = stackAr1.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        java.lang.Object[] objArray11 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) 'a', objArray11);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray11);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(100, objArray11);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray11);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray11);
        boolean boolean17 = org.autotest.StackAr.repOkFunction(100, objArray11);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) ' ', objArray11);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        int int13 = stackAr8.size();
        stackAr1.push((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        stackAr16.push((java.lang.Object) "[]");
        int int21 = stackAr16.size();
        java.lang.String str22 = stackAr16.toString();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr24.equals((java.lang.Object) (byte) 1);
        boolean boolean27 = stackAr24.isFull();
        java.lang.String str28 = stackAr24.toString();
        int int29 = stackAr24.size();
        stackAr16.push((java.lang.Object) stackAr24);
        stackAr1.push((java.lang.Object) stackAr16);
        boolean boolean33 = stackAr1.equals((java.lang.Object) "[false,a]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[[]]" + "'", str22, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr12.isEmpty();
        int int14 = stackAr12.size();
        boolean boolean16 = stackAr12.equals((java.lang.Object) 100L);
        boolean boolean17 = stackAr12.isFull();
        stackAr8.push((java.lang.Object) stackAr12);
        boolean boolean19 = stackAr12.isFull();
        java.lang.String str20 = stackAr12.toString();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        boolean boolean26 = stackAr22.isFull();
        boolean boolean27 = stackAr22.isFull();
        int int28 = stackAr22.size();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 100);
        boolean boolean33 = stackAr22.equals((java.lang.Object) stackAr30);
        boolean boolean34 = stackAr12.equals((java.lang.Object) stackAr30);
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 1);
        boolean boolean39 = stackAr36.isFull();
        boolean boolean40 = stackAr36.isFull();
        boolean boolean41 = stackAr36.isFull();
        int int42 = stackAr36.size();
        boolean boolean44 = stackAr36.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr45 = new org.autotest.StackAr();
        boolean boolean46 = stackAr45.isEmpty();
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr();
        int int48 = stackAr47.size();
        stackAr45.push((java.lang.Object) int48);
        boolean boolean50 = stackAr36.equals((java.lang.Object) int48);
        int int51 = stackAr36.size();
        stackAr12.push((java.lang.Object) stackAr36);
        boolean boolean53 = stackAr1.equals((java.lang.Object) stackAr36);
        java.lang.Class<?> wildcardClass54 = stackAr36.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        boolean boolean1 = stackAr0.isEmpty();
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean4 = stackAr3.isEmpty();
        boolean boolean6 = stackAr3.equals((java.lang.Object) 0.0f);
        int int7 = stackAr3.size();
        int int8 = stackAr3.size();
        boolean boolean9 = stackAr3.isEmpty();
        boolean boolean10 = stackAr3.isFull();
        stackAr0.push((java.lang.Object) stackAr3);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = null;
        stackAr1.push(obj8);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[0]" + "'", str7, "[0]");
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        java.lang.String str11 = stackAr0.toString();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr(0);
        boolean boolean14 = stackAr0.equals((java.lang.Object) 0);
        int int15 = stackAr0.size();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        boolean boolean19 = stackAr17.isEmpty();
        int int20 = stackAr17.size();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr0.equals((java.lang.Object) stackAr17);
        java.lang.Object obj23 = null;
        stackAr17.push(obj23);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        boolean boolean8 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        boolean boolean16 = stackAr10.isFull();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        java.lang.Object obj22 = new java.lang.Object();
        stackAr18.push(obj22);
        boolean boolean24 = stackAr18.isFull();
        java.lang.String str25 = stackAr18.toString();
        boolean boolean26 = stackAr10.equals((java.lang.Object) str25);
        stackAr1.push((java.lang.Object) stackAr10);
        boolean boolean28 = stackAr10.isEmpty();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr34.equals((java.lang.Object) (byte) 1);
        boolean boolean37 = stackAr34.isFull();
        java.lang.Object obj38 = new java.lang.Object();
        stackAr34.push(obj38);
        stackAr30.push((java.lang.Object) stackAr34);
        boolean boolean41 = stackAr34.isFull();
        boolean boolean42 = stackAr34.isFull();
        java.lang.String str43 = stackAr34.toString();
        stackAr10.push((java.lang.Object) str43);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        java.lang.Object obj11 = stackAr1.pop();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr13.isEmpty();
        boolean boolean15 = stackAr13.isEmpty();
        int int16 = stackAr13.size();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean19 = stackAr18.isEmpty();
        stackAr13.push((java.lang.Object) stackAr18);
        boolean boolean21 = stackAr1.equals((java.lang.Object) stackAr18);
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        boolean boolean27 = stackAr23.isFull();
        int int28 = stackAr23.size();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 1);
        stackAr30.push((java.lang.Object) "[]");
        stackAr23.push((java.lang.Object) stackAr30);
        java.lang.Object obj36 = stackAr30.pop();
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean39 = stackAr30.equals((java.lang.Object) (short) 1);
        int int40 = stackAr30.size();
        java.lang.Object[] objArray49 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean50 = org.autotest.StackAr.repOkFunction((int) 'a', objArray49);
        boolean boolean51 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray49);
        boolean boolean52 = org.autotest.StackAr.repOkFunction(100, objArray49);
        boolean boolean53 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray49);
        boolean boolean54 = org.autotest.StackAr.repOkFunction((int) '#', objArray49);
        stackAr30.push((java.lang.Object) '#');
        boolean boolean56 = stackAr1.equals((java.lang.Object) '#');
        org.autotest.StackAr stackAr58 = new org.autotest.StackAr((int) '#');
        boolean boolean59 = stackAr58.isEmpty();
        int int60 = stackAr58.size();
        boolean boolean61 = stackAr58.isEmpty();
        boolean boolean63 = stackAr58.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr65 = new org.autotest.StackAr((int) '#');
        boolean boolean67 = stackAr65.equals((java.lang.Object) (byte) 1);
        boolean boolean68 = stackAr65.isFull();
        stackAr65.push((java.lang.Object) '4');
        stackAr58.push((java.lang.Object) stackAr65);
        java.lang.Object obj72 = stackAr58.pop();
        java.lang.String str73 = stackAr58.toString();
        boolean boolean74 = stackAr58.isFull();
        boolean boolean75 = stackAr58.isEmpty();
        org.autotest.StackAr stackAr77 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean78 = stackAr77.isEmpty();
        boolean boolean80 = stackAr77.equals((java.lang.Object) 0.0f);
        int int81 = stackAr77.size();
        java.lang.String str82 = stackAr77.toString();
        stackAr58.push((java.lang.Object) str82);
        boolean boolean84 = stackAr58.isEmpty();
        boolean boolean85 = stackAr1.equals((java.lang.Object) stackAr58);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + "[]" + "'", obj36, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "[4]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "[]" + "'", str73, "[]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "[]" + "'", str82, "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        boolean boolean25 = stackAr21.isFull();
        stackAr1.push((java.lang.Object) boolean25);
        boolean boolean27 = stackAr1.isFull();
        boolean boolean28 = stackAr1.isEmpty();
        java.lang.Object obj29 = stackAr1.top();
        java.lang.Object obj30 = stackAr1.pop();
        java.lang.Object obj31 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + false + "'", obj29, false);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + false + "'", obj30, false);
        org.junit.Assert.assertNotNull(obj31);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        boolean boolean26 = stackAr23.isEmpty();
        boolean boolean28 = stackAr23.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 1);
        boolean boolean33 = stackAr30.isFull();
        stackAr30.push((java.lang.Object) '4');
        stackAr23.push((java.lang.Object) stackAr30);
        java.lang.Object obj37 = stackAr23.pop();
        java.lang.String str38 = stackAr23.toString();
        stackAr0.push((java.lang.Object) stackAr23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj40 = stackAr23.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "[4]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        java.lang.Object obj29 = new java.lang.Object();
        stackAr25.push(obj29);
        boolean boolean31 = stackAr17.equals(obj29);
        stackAr1.push((java.lang.Object) stackAr17);
        boolean boolean33 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
        int int35 = stackAr34.size();
        java.lang.Object[] objArray41 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean42 = org.autotest.StackAr.repOkFunction((int) 'a', objArray41);
        boolean boolean43 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray41);
        boolean boolean44 = stackAr34.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        java.lang.Object obj50 = new java.lang.Object();
        stackAr46.push(obj50);
        boolean boolean53 = stackAr46.equals((java.lang.Object) (byte) -1);
        boolean boolean54 = stackAr34.equals((java.lang.Object) boolean53);
        boolean boolean55 = stackAr34.isFull();
        org.autotest.StackAr stackAr57 = new org.autotest.StackAr((int) '#');
        boolean boolean58 = stackAr57.isEmpty();
        int int59 = stackAr57.size();
        stackAr57.push((java.lang.Object) (byte) 100);
        stackAr34.push((java.lang.Object) (byte) 100);
        stackAr34.push((java.lang.Object) 10.0f);
        java.lang.Object obj65 = stackAr34.top();
        stackAr1.push((java.lang.Object) stackAr34);
        java.lang.Object obj67 = stackAr34.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + obj65 + "' != '" + 10.0f + "'", obj65, 10.0f);
        org.junit.Assert.assertEquals("'" + obj67 + "' != '" + 10.0f + "'", obj67, 10.0f);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean6 = stackAr1.equals((java.lang.Object) "[]");
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        boolean boolean22 = stackAr8.isEmpty();
        java.lang.String str23 = stackAr8.toString();
        java.lang.Object obj24 = stackAr8.pop();
        boolean boolean25 = stackAr1.equals(obj24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj26 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[[4]]" + "'", str23, "[[4]]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "[4]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((-1), objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(2, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(100, objArray8);
        java.lang.Class<?> wildcardClass14 = objArray8.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        java.lang.String str2 = stackAr1.toString();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr4.equals((java.lang.Object) (byte) 1);
        boolean boolean7 = stackAr4.isFull();
        boolean boolean8 = stackAr4.isFull();
        boolean boolean9 = stackAr4.isFull();
        int int10 = stackAr4.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean18 = stackAr4.equals(obj16);
        boolean boolean19 = stackAr1.equals((java.lang.Object) boolean18);
        java.lang.String str20 = stackAr1.toString();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        java.lang.String str26 = stackAr22.toString();
        java.lang.Class<?> wildcardClass27 = stackAr22.getClass();
        stackAr1.push((java.lang.Object) stackAr22);
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 1);
        boolean boolean33 = stackAr30.isFull();
        java.lang.Object obj34 = new java.lang.Object();
        stackAr30.push(obj34);
        java.lang.String str36 = stackAr30.toString();
        int int37 = stackAr30.size();
        stackAr1.push((java.lang.Object) stackAr30);
        int int39 = stackAr30.size();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr8.equals((java.lang.Object) (short) 1);
        int int18 = stackAr8.size();
        java.lang.Object[] objArray27 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) 'a', objArray27);
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean30 = org.autotest.StackAr.repOkFunction(100, objArray27);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) '#', objArray27);
        stackAr8.push((java.lang.Object) '#');
        java.lang.Object obj34 = stackAr8.top();
        java.lang.Object obj35 = stackAr8.top();
        java.lang.String str36 = stackAr8.toString();
        boolean boolean37 = stackAr8.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + '#' + "'", obj34, '#');
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + '#' + "'", obj35, '#');
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[#]" + "'", str36, "[#]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        java.lang.String str15 = stackAr8.toString();
        boolean boolean16 = stackAr8.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = stackAr8.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        boolean boolean16 = stackAr12.isFull();
        boolean boolean17 = stackAr12.isFull();
        int int18 = stackAr12.size();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr20.isEmpty();
        int int22 = stackAr20.size();
        boolean boolean23 = stackAr20.isEmpty();
        boolean boolean24 = stackAr12.equals((java.lang.Object) stackAr20);
        boolean boolean25 = stackAr0.equals((java.lang.Object) boolean24);
        java.lang.String str26 = stackAr0.toString();
        boolean boolean27 = stackAr0.isEmpty();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        boolean boolean32 = stackAr29.isFull();
        java.lang.Object obj33 = new java.lang.Object();
        stackAr29.push(obj33);
        java.lang.String str35 = stackAr29.toString();
        boolean boolean36 = stackAr29.isEmpty();
        boolean boolean37 = stackAr29.isFull();
        java.lang.Object obj38 = stackAr29.top();
        boolean boolean39 = stackAr0.equals(obj38);
        int int40 = stackAr0.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr16.isEmpty();
        int int18 = stackAr16.size();
        boolean boolean19 = stackAr16.isFull();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        java.lang.Object obj25 = new java.lang.Object();
        stackAr21.push(obj25);
        boolean boolean27 = stackAr21.isFull();
        java.lang.String str28 = stackAr21.toString();
        stackAr21.push((java.lang.Object) (byte) 0);
        stackAr16.push((java.lang.Object) stackAr21);
        boolean boolean32 = stackAr21.isFull();
        java.lang.Object[] objArray38 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean39 = org.autotest.StackAr.repOkFunction((int) 'a', objArray38);
        boolean boolean40 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray38);
        stackAr21.push((java.lang.Object) boolean40);
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 100);
        boolean boolean46 = stackAr43.isEmpty();
        stackAr43.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr50 = new org.autotest.StackAr((int) '#');
        boolean boolean52 = stackAr50.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr54 = new org.autotest.StackAr((int) '#');
        boolean boolean56 = stackAr54.equals((java.lang.Object) (byte) 1);
        boolean boolean57 = stackAr54.isFull();
        java.lang.Object obj58 = new java.lang.Object();
        stackAr54.push(obj58);
        stackAr50.push((java.lang.Object) stackAr54);
        int int61 = stackAr50.size();
        stackAr43.push((java.lang.Object) stackAr50);
        boolean boolean63 = stackAr21.equals((java.lang.Object) stackAr43);
        java.lang.Object obj64 = stackAr43.top();
        java.lang.Object obj65 = stackAr43.pop();
        boolean boolean66 = stackAr8.equals((java.lang.Object) stackAr43);
        org.autotest.StackAr stackAr68 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str69 = stackAr68.toString();
        boolean boolean70 = stackAr68.isEmpty();
        int int71 = stackAr68.size();
        java.lang.String str72 = stackAr68.toString();
        org.autotest.StackAr stackAr74 = new org.autotest.StackAr((int) '#');
        boolean boolean76 = stackAr74.equals((java.lang.Object) (byte) 1);
        boolean boolean77 = stackAr74.isFull();
        boolean boolean78 = stackAr74.isFull();
        boolean boolean79 = stackAr74.isFull();
        int int80 = stackAr74.size();
        org.autotest.StackAr stackAr82 = new org.autotest.StackAr((int) '#');
        boolean boolean83 = stackAr82.isEmpty();
        int int84 = stackAr82.size();
        boolean boolean85 = stackAr82.isEmpty();
        boolean boolean86 = stackAr74.equals((java.lang.Object) stackAr82);
        java.lang.String str87 = stackAr82.toString();
        boolean boolean88 = stackAr68.equals((java.lang.Object) str87);
        stackAr8.push((java.lang.Object) boolean88);
        java.lang.Object obj90 = stackAr8.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[]" + "'", str87, "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + obj90 + "' != '" + false + "'", obj90, false);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        int int12 = stackAr1.size();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean22 = stackAr18.equals((java.lang.Object) 100L);
        boolean boolean23 = stackAr18.isFull();
        stackAr14.push((java.lang.Object) stackAr18);
        boolean boolean25 = stackAr14.isEmpty();
        boolean boolean26 = stackAr1.equals((java.lang.Object) stackAr14);
        boolean boolean27 = stackAr14.isEmpty();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr29.isEmpty();
        int int31 = stackAr29.size();
        boolean boolean32 = stackAr29.isFull();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr34.equals((java.lang.Object) (byte) 1);
        boolean boolean37 = stackAr34.isFull();
        java.lang.Object obj38 = new java.lang.Object();
        stackAr34.push(obj38);
        boolean boolean40 = stackAr34.isFull();
        java.lang.String str41 = stackAr34.toString();
        stackAr34.push((java.lang.Object) (byte) 0);
        stackAr29.push((java.lang.Object) stackAr34);
        boolean boolean45 = stackAr34.isFull();
        java.lang.Object[] objArray51 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean52 = org.autotest.StackAr.repOkFunction((int) 'a', objArray51);
        boolean boolean53 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray51);
        stackAr34.push((java.lang.Object) boolean53);
        org.autotest.StackAr stackAr56 = new org.autotest.StackAr((int) '#');
        boolean boolean58 = stackAr56.equals((java.lang.Object) (byte) 100);
        boolean boolean59 = stackAr56.isEmpty();
        stackAr56.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) '#');
        boolean boolean65 = stackAr63.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr67 = new org.autotest.StackAr((int) '#');
        boolean boolean69 = stackAr67.equals((java.lang.Object) (byte) 1);
        boolean boolean70 = stackAr67.isFull();
        java.lang.Object obj71 = new java.lang.Object();
        stackAr67.push(obj71);
        stackAr63.push((java.lang.Object) stackAr67);
        int int74 = stackAr63.size();
        stackAr56.push((java.lang.Object) stackAr63);
        boolean boolean76 = stackAr34.equals((java.lang.Object) stackAr56);
        java.lang.String str77 = stackAr34.toString();
        org.autotest.StackAr stackAr79 = new org.autotest.StackAr((int) '#');
        boolean boolean81 = stackAr79.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr83 = new org.autotest.StackAr((int) '#');
        boolean boolean84 = stackAr83.isEmpty();
        int int85 = stackAr83.size();
        boolean boolean87 = stackAr83.equals((java.lang.Object) 100L);
        boolean boolean88 = stackAr83.isFull();
        stackAr79.push((java.lang.Object) stackAr83);
        boolean boolean90 = stackAr79.isEmpty();
        java.lang.Object obj91 = stackAr79.top();
        java.lang.Object obj92 = stackAr79.top();
        stackAr34.push((java.lang.Object) stackAr79);
        stackAr14.push((java.lang.Object) stackAr34);
        boolean boolean95 = stackAr34.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(obj91);
        org.junit.Assert.assertEquals(obj91.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "[]");
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertEquals(obj92.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj92), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj92), "[]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(1, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(3, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        stackAr9.push((java.lang.Object) "[]");
        int int14 = stackAr9.size();
        boolean boolean16 = stackAr9.equals((java.lang.Object) 'a');
        int int17 = stackAr9.size();
        int int18 = stackAr9.size();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        java.lang.String str23 = stackAr20.toString();
        boolean boolean24 = stackAr20.isEmpty();
        int int25 = stackAr20.size();
        boolean boolean26 = stackAr9.equals((java.lang.Object) stackAr20);
        boolean boolean27 = stackAr1.equals((java.lang.Object) stackAr9);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) 10.0f);
        java.lang.Object obj31 = stackAr0.top();
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr((int) '#');
        boolean boolean34 = stackAr33.isEmpty();
        boolean boolean36 = stackAr33.equals((java.lang.Object) '#');
        int int37 = stackAr33.size();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 100);
        boolean boolean42 = stackAr39.isEmpty();
        java.lang.Class<?> wildcardClass43 = stackAr39.getClass();
        boolean boolean44 = stackAr33.equals((java.lang.Object) wildcardClass43);
        stackAr0.push((java.lang.Object) wildcardClass43);
        java.lang.String str46 = stackAr0.toString();
        java.lang.String str47 = stackAr0.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + 10.0f + "'", obj31, 10.0f);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100,10.0,class org.autotest.StackAr]" + "'", str46, "[100,10.0,class org.autotest.StackAr]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[100,10.0,class org.autotest.StackAr]" + "'", str47, "[100,10.0,class org.autotest.StackAr]");
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.Object obj21 = new java.lang.Object();
        stackAr17.push(obj21);
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr17);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr25.isEmpty();
        int int27 = stackAr25.size();
        boolean boolean28 = stackAr25.isEmpty();
        int int29 = stackAr25.size();
        boolean boolean30 = stackAr25.isFull();
        boolean boolean31 = stackAr25.isEmpty();
        boolean boolean32 = stackAr1.equals((java.lang.Object) stackAr25);
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr34.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr38.equals((java.lang.Object) (byte) 1);
        boolean boolean41 = stackAr38.isFull();
        java.lang.Object obj42 = new java.lang.Object();
        stackAr38.push(obj42);
        stackAr34.push((java.lang.Object) stackAr38);
        int int45 = stackAr34.size();
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean49 = stackAr47.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean52 = stackAr51.isEmpty();
        int int53 = stackAr51.size();
        boolean boolean55 = stackAr51.equals((java.lang.Object) 100L);
        boolean boolean56 = stackAr51.isFull();
        stackAr47.push((java.lang.Object) stackAr51);
        boolean boolean58 = stackAr47.isEmpty();
        boolean boolean59 = stackAr34.equals((java.lang.Object) stackAr47);
        int int60 = stackAr34.size();
        org.autotest.StackAr stackAr62 = new org.autotest.StackAr((int) '#');
        boolean boolean64 = stackAr62.equals((java.lang.Object) (byte) 1);
        boolean boolean65 = stackAr62.isFull();
        java.lang.Object obj66 = new java.lang.Object();
        stackAr62.push(obj66);
        boolean boolean68 = stackAr62.isFull();
        java.lang.String str69 = stackAr62.toString();
        java.lang.Object obj70 = stackAr62.top();
        java.lang.Object obj71 = stackAr62.top();
        boolean boolean72 = stackAr34.equals((java.lang.Object) stackAr62);
        stackAr1.push((java.lang.Object) stackAr62);
        java.lang.Object obj74 = stackAr62.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(obj74);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr1.toString();
        java.lang.Object obj16 = stackAr1.pop();
        java.lang.String str17 = stackAr1.toString();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
        int int19 = stackAr18.size();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr(1);
        boolean boolean22 = stackAr21.isFull();
        stackAr18.push((java.lang.Object) boolean22);
        boolean boolean24 = stackAr1.equals((java.lang.Object) boolean22);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[4]]" + "'", str15, "[[4]]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[4]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        java.lang.Object obj6 = stackAr1.pop();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        boolean boolean12 = stackAr8.isFull();
        boolean boolean13 = stackAr8.isFull();
        int int14 = stackAr8.size();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 100);
        boolean boolean19 = stackAr8.equals((java.lang.Object) stackAr16);
        boolean boolean20 = stackAr8.isEmpty();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean25 = stackAr22.isEmpty();
        boolean boolean27 = stackAr22.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        boolean boolean32 = stackAr29.isFull();
        stackAr29.push((java.lang.Object) '4');
        stackAr22.push((java.lang.Object) stackAr29);
        boolean boolean36 = stackAr22.isEmpty();
        java.lang.String str37 = stackAr22.toString();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr(0);
        int int40 = stackAr39.size();
        boolean boolean41 = stackAr22.equals((java.lang.Object) stackAr39);
        stackAr8.push((java.lang.Object) stackAr22);
        boolean boolean43 = stackAr1.equals((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr45 = new org.autotest.StackAr((int) '#');
        boolean boolean46 = stackAr45.isEmpty();
        int int47 = stackAr45.size();
        boolean boolean48 = stackAr45.isFull();
        org.autotest.StackAr stackAr50 = new org.autotest.StackAr((int) '#');
        boolean boolean52 = stackAr50.equals((java.lang.Object) (byte) 1);
        boolean boolean53 = stackAr50.isFull();
        java.lang.Object obj54 = new java.lang.Object();
        stackAr50.push(obj54);
        boolean boolean56 = stackAr50.isFull();
        java.lang.String str57 = stackAr50.toString();
        stackAr50.push((java.lang.Object) (byte) 0);
        stackAr45.push((java.lang.Object) stackAr50);
        java.lang.Object obj61 = stackAr45.pop();
        boolean boolean62 = stackAr1.equals(obj61);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "[]" + "'", obj6, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[[4]]" + "'", str37, "[[4]]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        java.lang.String str7 = stackAr1.toString();
        java.lang.String str8 = stackAr1.toString();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.top();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 100);
        boolean boolean15 = stackAr12.isEmpty();
        stackAr12.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        java.lang.Object obj27 = new java.lang.Object();
        stackAr23.push(obj27);
        stackAr19.push((java.lang.Object) stackAr23);
        int int30 = stackAr19.size();
        stackAr12.push((java.lang.Object) stackAr19);
        java.lang.Object obj32 = stackAr12.pop();
        java.lang.String str33 = stackAr12.toString();
        boolean boolean34 = stackAr1.equals((java.lang.Object) str33);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[[]]" + "'", str7, "[[]]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[[]]" + "'", str8, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "[]" + "'", obj10, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[0]" + "'", str33, "[0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = null;
        boolean boolean9 = stackAr1.equals(obj8);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr11.isEmpty();
        int int13 = stackAr11.size();
        boolean boolean14 = stackAr11.isEmpty();
        boolean boolean16 = stackAr11.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        stackAr18.push((java.lang.Object) '4');
        stackAr11.push((java.lang.Object) stackAr18);
        java.lang.String str25 = stackAr18.toString();
        int int26 = stackAr18.size();
        boolean boolean27 = stackAr18.isFull();
        boolean boolean28 = stackAr1.equals((java.lang.Object) boolean27);
        boolean boolean29 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[4]" + "'", str25, "[4]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.String str8 = stackAr1.toString();
        int int9 = stackAr1.size();
        java.lang.Class<?> wildcardClass10 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        stackAr5.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr11.equals((java.lang.Object) (byte) 1);
        boolean boolean14 = stackAr11.isFull();
        java.lang.String str15 = stackAr11.toString();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        boolean boolean26 = org.autotest.StackAr.repOkFunction(100, objArray23);
        boolean boolean27 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray23);
        stackAr11.push((java.lang.Object) objArray23);
        boolean boolean29 = stackAr5.equals((java.lang.Object) objArray23);
        boolean boolean30 = org.autotest.StackAr.repOkFunction(0, objArray23);
        boolean boolean31 = org.autotest.StackAr.repOkFunction(0, objArray23);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray23);
        boolean boolean33 = org.autotest.StackAr.repOkFunction(1, objArray23);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass9 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        java.lang.Object obj7 = stackAr1.top();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) (short) 100);
        boolean boolean10 = stackAr1.equals((java.lang.Object) (short) 100);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        stackAr12.push((java.lang.Object) "[]");
        int int17 = stackAr12.size();
        boolean boolean19 = stackAr12.equals((java.lang.Object) 'a');
        boolean boolean20 = stackAr12.isEmpty();
        stackAr1.push((java.lang.Object) boolean20);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr24.equals((java.lang.Object) (byte) 100);
        boolean boolean27 = stackAr24.isEmpty();
        boolean boolean28 = stackAr24.isEmpty();
        boolean boolean29 = stackAr22.equals((java.lang.Object) stackAr24);
        stackAr1.push((java.lang.Object) stackAr22);
        java.lang.String str31 = stackAr22.toString();
        java.lang.Class<?> wildcardClass32 = stackAr22.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "[]" + "'", obj7, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) 'a');
        int int7 = stackAr1.size();
        java.lang.Object obj8 = null;
        stackAr1.push(obj8);
        boolean boolean10 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) 1);
        java.lang.Object obj6 = stackAr1.top();
        int int7 = stackAr1.size();
        java.lang.Object obj8 = stackAr1.pop();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 1 + "'", obj6, 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1 + "'", obj8, 1);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr1.pop();
        boolean boolean16 = stackAr1.isFull();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean21 = stackAr18.isEmpty();
        boolean boolean23 = stackAr18.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        stackAr25.push((java.lang.Object) '4');
        stackAr18.push((java.lang.Object) stackAr25);
        java.lang.String str32 = stackAr25.toString();
        java.lang.Object obj33 = stackAr25.pop();
        stackAr1.push((java.lang.Object) stackAr25);
        java.lang.String str35 = stackAr1.toString();
        java.lang.String str36 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[4]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[4]" + "'", str32, "[4]");
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + '4' + "'", obj33, '4');
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[[]]" + "'", str35, "[[]]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[[]]" + "'", str36, "[[]]");
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = new java.lang.Object();
        stackAr8.push(obj12);
        java.lang.String str14 = stackAr8.toString();
        boolean boolean15 = stackAr8.isEmpty();
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean21 = stackAr18.isEmpty();
        boolean boolean23 = stackAr18.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        stackAr25.push((java.lang.Object) '4');
        stackAr18.push((java.lang.Object) stackAr25);
        boolean boolean32 = stackAr18.isEmpty();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        int int36 = stackAr34.size();
        boolean boolean37 = stackAr34.isFull();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        boolean boolean45 = stackAr39.isFull();
        java.lang.String str46 = stackAr39.toString();
        stackAr39.push((java.lang.Object) (byte) 0);
        stackAr34.push((java.lang.Object) stackAr39);
        boolean boolean50 = stackAr18.equals((java.lang.Object) stackAr39);
        stackAr1.push((java.lang.Object) stackAr18);
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean54 = stackAr53.isEmpty();
        boolean boolean55 = stackAr53.isEmpty();
        boolean boolean56 = stackAr53.isFull();
        boolean boolean57 = stackAr53.isEmpty();
        java.lang.String str58 = stackAr53.toString();
        java.lang.String str59 = stackAr53.toString();
        boolean boolean60 = stackAr18.equals((java.lang.Object) str59);
        org.autotest.StackAr stackAr62 = new org.autotest.StackAr((int) '#');
        boolean boolean64 = stackAr62.equals((java.lang.Object) (byte) 1);
        boolean boolean65 = stackAr62.isFull();
        boolean boolean66 = stackAr62.isFull();
        int int67 = stackAr62.size();
        org.autotest.StackAr stackAr69 = new org.autotest.StackAr((int) '#');
        boolean boolean71 = stackAr69.equals((java.lang.Object) (byte) 1);
        stackAr69.push((java.lang.Object) "[]");
        stackAr62.push((java.lang.Object) stackAr69);
        boolean boolean75 = stackAr18.equals((java.lang.Object) stackAr69);
        java.lang.Class<?> wildcardClass76 = stackAr69.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[]" + "'", str58, "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[]" + "'", str59, "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean11 = stackAr10.isFull();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr10);
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr14.isEmpty();
        int int16 = stackAr14.size();
        boolean boolean17 = stackAr14.isEmpty();
        boolean boolean19 = stackAr14.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        stackAr21.push((java.lang.Object) '4');
        stackAr14.push((java.lang.Object) stackAr21);
        boolean boolean28 = stackAr14.isEmpty();
        java.lang.String str29 = stackAr14.toString();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr(0);
        int int32 = stackAr31.size();
        boolean boolean33 = stackAr14.equals((java.lang.Object) stackAr31);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr35.isEmpty();
        int int37 = stackAr35.size();
        boolean boolean38 = stackAr35.isEmpty();
        boolean boolean39 = stackAr35.isEmpty();
        boolean boolean40 = stackAr35.isFull();
        int int41 = stackAr35.size();
        boolean boolean42 = stackAr14.equals((java.lang.Object) stackAr35);
        java.lang.Object obj43 = stackAr14.top();
        boolean boolean44 = stackAr1.equals((java.lang.Object) stackAr14);
        java.lang.Object obj45 = stackAr14.top();
        java.lang.Class<?> wildcardClass46 = stackAr14.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[[4]]" + "'", str29, "[[4]]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "[4]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "[4]");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        java.lang.String str22 = stackAr8.toString();
        java.lang.String str23 = stackAr8.toString();
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean25 = stackAr8.isEmpty();
        java.lang.Object obj26 = stackAr8.top();
        java.lang.Object obj27 = stackAr8.pop();
        boolean boolean28 = stackAr8.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[[4]]" + "'", str22, "[[4]]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[[4]]" + "'", str23, "[[4]]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "[4]");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "[4]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        boolean boolean10 = stackAr8.isEmpty();
        int int11 = stackAr8.size();
        boolean boolean12 = stackAr8.isFull();
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) boolean13);
        stackAr1.push((java.lang.Object) "[4]");
        java.lang.Object obj17 = stackAr1.top();
        java.lang.String str18 = stackAr1.toString();
        java.lang.String str19 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "[4]" + "'", obj17, "[4]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[[4]]" + "'", str18, "[[4]]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[[4]]" + "'", str19, "[[4]]");
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        java.lang.String str2 = stackAr1.toString();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr4.equals((java.lang.Object) (byte) 1);
        boolean boolean7 = stackAr4.isFull();
        boolean boolean8 = stackAr4.isFull();
        boolean boolean9 = stackAr4.isFull();
        int int10 = stackAr4.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean18 = stackAr4.equals(obj16);
        boolean boolean19 = stackAr1.equals((java.lang.Object) boolean18);
        java.lang.String str20 = stackAr1.toString();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        java.lang.String str26 = stackAr22.toString();
        java.lang.Class<?> wildcardClass27 = stackAr22.getClass();
        stackAr1.push((java.lang.Object) stackAr22);
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 1);
        boolean boolean33 = stackAr30.isFull();
        java.lang.Object obj34 = new java.lang.Object();
        stackAr30.push(obj34);
        java.lang.String str36 = stackAr30.toString();
        int int37 = stackAr30.size();
        stackAr1.push((java.lang.Object) stackAr30);
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr40.equals((java.lang.Object) (byte) 1);
        boolean boolean43 = stackAr40.isFull();
        boolean boolean44 = stackAr40.isFull();
        boolean boolean45 = stackAr40.isFull();
        int int46 = stackAr40.size();
        org.autotest.StackAr stackAr48 = new org.autotest.StackAr((int) '#');
        boolean boolean50 = stackAr48.equals((java.lang.Object) (byte) 100);
        boolean boolean51 = stackAr40.equals((java.lang.Object) stackAr48);
        boolean boolean52 = stackAr40.isEmpty();
        org.autotest.StackAr stackAr54 = new org.autotest.StackAr((int) '#');
        boolean boolean55 = stackAr54.isEmpty();
        int int56 = stackAr54.size();
        boolean boolean57 = stackAr54.isEmpty();
        boolean boolean59 = stackAr54.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr61 = new org.autotest.StackAr((int) '#');
        boolean boolean63 = stackAr61.equals((java.lang.Object) (byte) 1);
        boolean boolean64 = stackAr61.isFull();
        stackAr61.push((java.lang.Object) '4');
        stackAr54.push((java.lang.Object) stackAr61);
        boolean boolean68 = stackAr54.isEmpty();
        java.lang.String str69 = stackAr54.toString();
        org.autotest.StackAr stackAr71 = new org.autotest.StackAr(0);
        int int72 = stackAr71.size();
        boolean boolean73 = stackAr54.equals((java.lang.Object) stackAr71);
        stackAr40.push((java.lang.Object) stackAr54);
        java.lang.String str75 = stackAr54.toString();
        stackAr1.push((java.lang.Object) stackAr54);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[[4]]" + "'", str69, "[[4]]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[[4]]" + "'", str75, "[[4]]");
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr5.isFull();
        java.lang.String str13 = stackAr5.toString();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        boolean boolean19 = stackAr15.isFull();
        boolean boolean20 = stackAr15.isFull();
        int int21 = stackAr15.size();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 100);
        boolean boolean26 = stackAr15.equals((java.lang.Object) stackAr23);
        boolean boolean27 = stackAr5.equals((java.lang.Object) stackAr23);
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        boolean boolean32 = stackAr29.isFull();
        boolean boolean33 = stackAr29.isFull();
        boolean boolean34 = stackAr29.isFull();
        int int35 = stackAr29.size();
        boolean boolean37 = stackAr29.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr();
        boolean boolean39 = stackAr38.isEmpty();
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr();
        int int41 = stackAr40.size();
        stackAr38.push((java.lang.Object) int41);
        boolean boolean43 = stackAr29.equals((java.lang.Object) int41);
        int int44 = stackAr29.size();
        stackAr5.push((java.lang.Object) stackAr29);
        java.lang.Object obj46 = stackAr5.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "[]");
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        stackAr8.push((java.lang.Object) stackAr12);
        int int19 = stackAr8.size();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj21 = stackAr1.pop();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        boolean boolean27 = stackAr23.isFull();
        boolean boolean28 = stackAr23.isFull();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str31 = stackAr30.toString();
        boolean boolean32 = stackAr30.isFull();
        stackAr30.push((java.lang.Object) 1);
        boolean boolean35 = stackAr30.isEmpty();
        boolean boolean36 = stackAr23.equals((java.lang.Object) stackAr30);
        java.lang.Object obj37 = stackAr30.top();
        java.lang.Object obj38 = stackAr30.pop();
        stackAr1.push(obj38);
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean43 = stackAr41.equals((java.lang.Object) (byte) 1);
        boolean boolean44 = stackAr41.isFull();
        stackAr41.push((java.lang.Object) '4');
        java.lang.String str47 = stackAr41.toString();
        java.lang.Object obj48 = stackAr41.pop();
        stackAr1.push(obj48);
        java.lang.Object obj50 = null;
        stackAr1.push(obj50);
        org.autotest.StackAr stackAr52 = new org.autotest.StackAr();
        int int53 = stackAr52.size();
        java.lang.Object[] objArray59 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean60 = org.autotest.StackAr.repOkFunction((int) 'a', objArray59);
        boolean boolean61 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray59);
        boolean boolean62 = stackAr52.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr64 = new org.autotest.StackAr((int) '#');
        boolean boolean66 = stackAr64.equals((java.lang.Object) (byte) 1);
        boolean boolean67 = stackAr64.isFull();
        java.lang.Object obj68 = new java.lang.Object();
        stackAr64.push(obj68);
        boolean boolean71 = stackAr64.equals((java.lang.Object) (byte) -1);
        boolean boolean72 = stackAr52.equals((java.lang.Object) boolean71);
        boolean boolean73 = stackAr52.isFull();
        org.autotest.StackAr stackAr75 = new org.autotest.StackAr((int) '#');
        boolean boolean76 = stackAr75.isEmpty();
        int int77 = stackAr75.size();
        stackAr75.push((java.lang.Object) (byte) 100);
        stackAr52.push((java.lang.Object) (byte) 100);
        java.lang.String str81 = stackAr52.toString();
        boolean boolean82 = stackAr52.isFull();
        stackAr1.push((java.lang.Object) stackAr52);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + 1 + "'", obj37, 1);
        org.junit.Assert.assertEquals("'" + obj38 + "' != '" + 1 + "'", obj38, 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[4]" + "'", str47, "[4]");
        org.junit.Assert.assertEquals("'" + obj48 + "' != '" + '4' + "'", obj48, '4');
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "[100]" + "'", str81, "[100]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        stackAr6.push((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        boolean boolean31 = stackAr28.isEmpty();
        stackAr28.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        stackAr35.push((java.lang.Object) stackAr39);
        int int46 = stackAr35.size();
        stackAr28.push((java.lang.Object) stackAr35);
        boolean boolean48 = stackAr6.equals((java.lang.Object) stackAr28);
        java.lang.Object obj49 = stackAr28.top();
        java.lang.Object obj50 = stackAr28.pop();
        int int51 = stackAr28.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        int int9 = stackAr1.size();
        int int10 = stackAr1.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        java.lang.String str15 = stackAr12.toString();
        boolean boolean16 = stackAr12.isEmpty();
        int int17 = stackAr12.size();
        boolean boolean18 = stackAr1.equals((java.lang.Object) stackAr12);
        boolean boolean19 = stackAr12.isFull();
        boolean boolean20 = stackAr12.isEmpty();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean26 = stackAr22.equals((java.lang.Object) 100L);
        boolean boolean27 = stackAr22.isFull();
        stackAr12.push((java.lang.Object) boolean27);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        int int9 = stackAr1.size();
        java.lang.Object obj10 = stackAr1.top();
        java.lang.Object obj11 = stackAr1.pop();
        java.lang.String str12 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "[]" + "'", obj10, "[]");
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "[]" + "'", obj11, "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.pop();
        boolean boolean11 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 1);
        boolean boolean16 = stackAr13.isFull();
        boolean boolean17 = stackAr13.isFull();
        boolean boolean18 = stackAr13.isFull();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr20.isEmpty();
        boolean boolean22 = stackAr20.isEmpty();
        int int23 = stackAr20.size();
        boolean boolean24 = stackAr20.isFull();
        boolean boolean25 = stackAr20.isEmpty();
        boolean boolean26 = stackAr13.equals((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        boolean boolean32 = stackAr28.isFull();
        int int33 = stackAr28.size();
        int int34 = stackAr28.size();
        boolean boolean35 = stackAr13.equals((java.lang.Object) stackAr28);
        stackAr1.push((java.lang.Object) stackAr28);
        java.lang.Class<?> wildcardClass37 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4]" + "'", str7, "[4]");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + '4' + "'", obj8, '4');
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + '4' + "'", obj10, '4');
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        stackAr6.push((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        boolean boolean31 = stackAr28.isEmpty();
        stackAr28.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        stackAr35.push((java.lang.Object) stackAr39);
        int int46 = stackAr35.size();
        stackAr28.push((java.lang.Object) stackAr35);
        boolean boolean48 = stackAr6.equals((java.lang.Object) stackAr28);
        java.lang.String str49 = stackAr6.toString();
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean53 = stackAr51.equals((java.lang.Object) (byte) 1);
        boolean boolean54 = stackAr51.isFull();
        stackAr51.push((java.lang.Object) '4');
        java.lang.Object obj57 = null;
        boolean boolean58 = stackAr51.equals(obj57);
        boolean boolean59 = stackAr51.isEmpty();
        java.lang.String str60 = stackAr51.toString();
        boolean boolean61 = stackAr6.equals((java.lang.Object) stackAr51);
        int int62 = stackAr51.size();
        java.lang.Class<?> wildcardClass63 = stackAr51.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[4]" + "'", str60, "[4]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        java.lang.String str14 = stackAr8.toString();
        java.lang.Object obj15 = stackAr8.top();
        stackAr1.push((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        boolean boolean22 = stackAr18.isFull();
        int int23 = stackAr18.size();
        java.lang.Class<?> wildcardClass24 = stackAr18.getClass();
        stackAr1.push((java.lang.Object) stackAr18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj26 = stackAr18.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[4]" + "'", str14, "[4]");
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '4' + "'", obj15, '4');
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }
}

