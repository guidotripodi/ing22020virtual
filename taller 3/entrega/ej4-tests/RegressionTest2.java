import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr24.isEmpty();
        int int26 = stackAr24.size();
        boolean boolean27 = stackAr24.isEmpty();
        boolean boolean29 = stackAr24.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr(0);
        stackAr24.push((java.lang.Object) 0);
        stackAr8.push((java.lang.Object) 0);
        int int34 = stackAr8.size();
        java.lang.Object obj35 = stackAr8.pop();
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
        int int37 = stackAr36.size();
        int int38 = stackAr36.size();
        stackAr8.push((java.lang.Object) int38);
        boolean boolean40 = stackAr8.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + 0 + "'", obj35, 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) 0.0f);
        int int5 = stackAr1.size();
        java.lang.String str6 = stackAr1.toString();
        int int7 = stackAr1.size();
        int int8 = stackAr1.size();
        int int9 = stackAr1.size();
        java.lang.String str10 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        int int9 = stackAr1.size();
        int int10 = stackAr1.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        java.lang.String str15 = stackAr12.toString();
        boolean boolean16 = stackAr12.isEmpty();
        int int17 = stackAr12.size();
        boolean boolean18 = stackAr1.equals((java.lang.Object) stackAr12);
        boolean boolean19 = stackAr12.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = stackAr12.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        int int12 = stackAr1.size();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean22 = stackAr18.equals((java.lang.Object) 100L);
        boolean boolean23 = stackAr18.isFull();
        stackAr14.push((java.lang.Object) stackAr18);
        boolean boolean25 = stackAr14.isEmpty();
        boolean boolean26 = stackAr1.equals((java.lang.Object) stackAr14);
        boolean boolean27 = stackAr14.isEmpty();
        java.lang.Object obj28 = stackAr14.pop();
        java.lang.Object obj29 = null;
        boolean boolean30 = stackAr14.equals(obj29);
        int int31 = stackAr14.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        int int9 = stackAr1.size();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr11.isEmpty();
        int int13 = stackAr11.size();
        boolean boolean14 = stackAr11.isEmpty();
        boolean boolean15 = stackAr11.isEmpty();
        boolean boolean16 = stackAr11.isFull();
        int int17 = stackAr11.size();
        boolean boolean18 = stackAr11.isEmpty();
        stackAr1.push((java.lang.Object) stackAr11);
        java.lang.Object obj20 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "[]");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        int int10 = stackAr1.size();
        boolean boolean11 = stackAr1.isFull();
        java.lang.String str12 = stackAr1.toString();
        java.lang.String str13 = stackAr1.toString();
        int int14 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0]" + "'", str12, "[0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0]" + "'", str13, "[0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        java.lang.Object obj19 = stackAr1.pop();
        java.lang.String str20 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr((int) '#');
        boolean boolean4 = stackAr2.equals((java.lang.Object) (byte) 1);
        stackAr2.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        java.lang.String str12 = stackAr8.toString();
        java.lang.Object[] objArray20 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) 'a', objArray20);
        boolean boolean22 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray20);
        boolean boolean23 = org.autotest.StackAr.repOkFunction(100, objArray20);
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray20);
        stackAr8.push((java.lang.Object) objArray20);
        boolean boolean26 = stackAr2.equals((java.lang.Object) objArray20);
        boolean boolean27 = org.autotest.StackAr.repOkFunction(1, objArray20);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = new java.lang.Object();
        stackAr8.push(obj12);
        java.lang.String str14 = stackAr8.toString();
        boolean boolean15 = stackAr8.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.Object obj21 = new java.lang.Object();
        stackAr17.push(obj21);
        boolean boolean23 = stackAr17.isFull();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        java.lang.Object obj29 = new java.lang.Object();
        stackAr25.push(obj29);
        boolean boolean31 = stackAr25.isFull();
        java.lang.String str32 = stackAr25.toString();
        boolean boolean33 = stackAr17.equals((java.lang.Object) str32);
        stackAr8.push((java.lang.Object) stackAr17);
        boolean boolean35 = stackAr1.equals((java.lang.Object) stackAr17);
        java.lang.Class<?> wildcardClass36 = stackAr17.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        boolean boolean8 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        boolean boolean16 = stackAr10.isFull();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        java.lang.Object obj22 = new java.lang.Object();
        stackAr18.push(obj22);
        boolean boolean24 = stackAr18.isFull();
        java.lang.String str25 = stackAr18.toString();
        boolean boolean26 = stackAr10.equals((java.lang.Object) str25);
        stackAr1.push((java.lang.Object) stackAr10);
        java.lang.Object obj28 = stackAr10.top();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr30.isEmpty();
        int int32 = stackAr30.size();
        boolean boolean33 = stackAr30.isEmpty();
        boolean boolean35 = stackAr30.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        boolean boolean40 = stackAr37.isFull();
        stackAr37.push((java.lang.Object) '4');
        stackAr30.push((java.lang.Object) stackAr37);
        boolean boolean44 = stackAr30.isFull();
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean47 = stackAr46.isEmpty();
        int int48 = stackAr46.size();
        boolean boolean49 = stackAr46.isEmpty();
        boolean boolean50 = stackAr46.isEmpty();
        boolean boolean51 = stackAr46.isFull();
        int int52 = stackAr46.size();
        stackAr30.push((java.lang.Object) int52);
        java.lang.Object[] objArray61 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean62 = org.autotest.StackAr.repOkFunction((int) 'a', objArray61);
        boolean boolean63 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray61);
        boolean boolean64 = org.autotest.StackAr.repOkFunction(100, objArray61);
        boolean boolean65 = org.autotest.StackAr.repOkFunction(100, objArray61);
        stackAr30.push((java.lang.Object) objArray61);
        java.lang.Class<?> wildcardClass67 = objArray61.getClass();
        boolean boolean68 = stackAr10.equals((java.lang.Object) objArray61);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean11 = stackAr10.isFull();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr10);
        boolean boolean13 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr15.isEmpty();
        int int17 = stackAr15.size();
        boolean boolean18 = stackAr15.isFull();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        java.lang.Object obj24 = new java.lang.Object();
        stackAr20.push(obj24);
        boolean boolean26 = stackAr20.isFull();
        java.lang.String str27 = stackAr20.toString();
        stackAr20.push((java.lang.Object) (byte) 0);
        stackAr15.push((java.lang.Object) stackAr20);
        boolean boolean31 = stackAr20.isFull();
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr33.equals((java.lang.Object) (byte) 1);
        boolean boolean36 = stackAr33.isFull();
        java.lang.Object obj37 = new java.lang.Object();
        stackAr33.push(obj37);
        java.lang.String str39 = stackAr33.toString();
        boolean boolean40 = stackAr33.isEmpty();
        boolean boolean41 = stackAr33.isFull();
        stackAr20.push((java.lang.Object) boolean41);
        boolean boolean43 = stackAr20.isFull();
        java.lang.Class<?> wildcardClass44 = stackAr20.getClass();
        stackAr1.push((java.lang.Object) wildcardClass44);
        java.lang.Object obj46 = null;
        boolean boolean47 = stackAr1.equals(obj46);
        java.lang.Object obj48 = stackAr1.top();
        java.lang.Class<?> wildcardClass49 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "class org.autotest.StackAr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "class org.autotest.StackAr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "class org.autotest.StackAr");
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        boolean boolean1 = stackAr0.isEmpty();
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
        int int3 = stackAr2.size();
        stackAr0.push((java.lang.Object) int3);
        java.lang.String str5 = stackAr0.toString();
        java.lang.Object obj6 = stackAr0.top();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) 'a');
        boolean boolean9 = stackAr0.equals((java.lang.Object) 'a');
        java.lang.Object obj10 = stackAr0.pop();
        int int11 = stackAr0.size();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0]" + "'", str5, "[0]");
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 0 + "'", obj6, 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 0 + "'", obj10, 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        boolean boolean6 = stackAr4.isEmpty();
        int int7 = stackAr4.size();
        int int8 = stackAr4.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) stackAr4);
        int int10 = stackAr1.size();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 100);
        boolean boolean16 = stackAr13.isEmpty();
        boolean boolean17 = stackAr13.isEmpty();
        boolean boolean18 = stackAr11.equals((java.lang.Object) stackAr13);
        stackAr1.push((java.lang.Object) stackAr13);
        java.lang.Object obj20 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "[]");
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr1.toString();
        java.lang.String str16 = stackAr1.toString();
        boolean boolean17 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[4]]" + "'", str15, "[[4]]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[[4]]" + "'", str16, "[[4]]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr11.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr15.isEmpty();
        int int17 = stackAr15.size();
        boolean boolean19 = stackAr15.equals((java.lang.Object) 100L);
        boolean boolean20 = stackAr15.isFull();
        stackAr11.push((java.lang.Object) stackAr15);
        boolean boolean22 = stackAr11.isEmpty();
        java.lang.Object obj23 = stackAr11.top();
        int int24 = stackAr11.size();
        boolean boolean25 = stackAr1.equals((java.lang.Object) int24);
        boolean boolean26 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj27 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.Object obj12 = stackAr1.top();
        boolean boolean13 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        stackAr15.push((java.lang.Object) stackAr19);
        int int26 = stackAr15.size();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr32.isEmpty();
        int int34 = stackAr32.size();
        boolean boolean36 = stackAr32.equals((java.lang.Object) 100L);
        boolean boolean37 = stackAr32.isFull();
        stackAr28.push((java.lang.Object) stackAr32);
        boolean boolean39 = stackAr28.isEmpty();
        boolean boolean40 = stackAr15.equals((java.lang.Object) stackAr28);
        boolean boolean41 = stackAr28.isEmpty();
        java.lang.Object obj42 = stackAr28.pop();
        java.lang.Object obj43 = null;
        boolean boolean44 = stackAr28.equals(obj43);
        java.lang.String str45 = stackAr28.toString();
        boolean boolean46 = stackAr1.equals((java.lang.Object) stackAr28);
        boolean boolean47 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        java.lang.String str15 = stackAr9.toString();
        boolean boolean16 = stackAr9.isEmpty();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        java.lang.Object obj22 = new java.lang.Object();
        stackAr18.push(obj22);
        boolean boolean24 = stackAr18.isFull();
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr26.equals((java.lang.Object) (byte) 1);
        boolean boolean29 = stackAr26.isFull();
        java.lang.Object obj30 = new java.lang.Object();
        stackAr26.push(obj30);
        boolean boolean32 = stackAr26.isFull();
        java.lang.String str33 = stackAr26.toString();
        boolean boolean34 = stackAr18.equals((java.lang.Object) str33);
        stackAr9.push((java.lang.Object) stackAr18);
        boolean boolean36 = stackAr1.equals((java.lang.Object) stackAr18);
        int int37 = stackAr18.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        boolean boolean15 = stackAr8.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.Object obj21 = new java.lang.Object();
        stackAr17.push(obj21);
        boolean boolean23 = stackAr17.isFull();
        java.lang.String str24 = stackAr17.toString();
        stackAr17.push((java.lang.Object) (byte) 0);
        boolean boolean27 = stackAr17.isEmpty();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr29.isEmpty();
        int int31 = stackAr29.size();
        boolean boolean32 = stackAr29.isFull();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr34.equals((java.lang.Object) (byte) 1);
        boolean boolean37 = stackAr34.isFull();
        java.lang.Object obj38 = new java.lang.Object();
        stackAr34.push(obj38);
        boolean boolean40 = stackAr34.isFull();
        java.lang.String str41 = stackAr34.toString();
        stackAr34.push((java.lang.Object) (byte) 0);
        stackAr29.push((java.lang.Object) stackAr34);
        boolean boolean45 = stackAr34.isFull();
        java.lang.String str46 = stackAr34.toString();
        org.autotest.StackAr stackAr48 = new org.autotest.StackAr((int) '#');
        boolean boolean49 = stackAr48.isEmpty();
        int int50 = stackAr48.size();
        boolean boolean51 = stackAr48.isEmpty();
        boolean boolean53 = stackAr48.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr55 = new org.autotest.StackAr((int) '#');
        boolean boolean57 = stackAr55.equals((java.lang.Object) (byte) 1);
        boolean boolean58 = stackAr55.isFull();
        stackAr55.push((java.lang.Object) '4');
        stackAr48.push((java.lang.Object) stackAr55);
        boolean boolean62 = stackAr48.isEmpty();
        java.lang.String str63 = stackAr48.toString();
        int int64 = stackAr48.size();
        boolean boolean65 = stackAr48.isEmpty();
        boolean boolean66 = stackAr34.equals((java.lang.Object) boolean65);
        boolean boolean67 = stackAr17.equals((java.lang.Object) stackAr34);
        org.autotest.StackAr stackAr69 = new org.autotest.StackAr((int) '#');
        boolean boolean70 = stackAr69.isEmpty();
        int int71 = stackAr69.size();
        boolean boolean72 = stackAr69.isEmpty();
        boolean boolean74 = stackAr69.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr76 = new org.autotest.StackAr((int) '#');
        boolean boolean78 = stackAr76.equals((java.lang.Object) (byte) 1);
        boolean boolean79 = stackAr76.isFull();
        stackAr76.push((java.lang.Object) '4');
        stackAr69.push((java.lang.Object) stackAr76);
        boolean boolean83 = stackAr69.isEmpty();
        org.autotest.StackAr stackAr85 = new org.autotest.StackAr((int) '#');
        boolean boolean87 = stackAr85.equals((java.lang.Object) (byte) 1);
        boolean boolean88 = stackAr85.isFull();
        java.lang.Object obj89 = new java.lang.Object();
        stackAr85.push(obj89);
        boolean boolean91 = stackAr69.equals((java.lang.Object) stackAr85);
        java.lang.Object obj92 = stackAr85.pop();
        boolean boolean93 = stackAr85.isEmpty();
        boolean boolean94 = stackAr85.isFull();
        boolean boolean95 = stackAr34.equals((java.lang.Object) stackAr85);
        java.lang.Class<?> wildcardClass96 = stackAr85.getClass();
        stackAr8.push((java.lang.Object) wildcardClass96);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[[4]]" + "'", str63, "[[4]]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        java.lang.Object obj26 = new java.lang.Object();
        stackAr22.push(obj26);
        boolean boolean28 = stackAr22.isFull();
        java.lang.String str29 = stackAr22.toString();
        stackAr22.push((java.lang.Object) (byte) 0);
        stackAr17.push((java.lang.Object) stackAr22);
        boolean boolean33 = stackAr1.equals((java.lang.Object) stackAr22);
        java.lang.Object obj34 = stackAr1.pop();
        boolean boolean35 = stackAr1.isEmpty();
        boolean boolean36 = stackAr1.isFull();
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr38.isEmpty();
        boolean boolean40 = stackAr38.isEmpty();
        boolean boolean41 = stackAr38.isFull();
        boolean boolean43 = stackAr38.equals((java.lang.Object) "[]");
        org.autotest.StackAr stackAr45 = new org.autotest.StackAr((int) '#');
        boolean boolean46 = stackAr45.isEmpty();
        int int47 = stackAr45.size();
        boolean boolean48 = stackAr45.isEmpty();
        boolean boolean50 = stackAr45.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr52 = new org.autotest.StackAr((int) '#');
        boolean boolean54 = stackAr52.equals((java.lang.Object) (byte) 1);
        boolean boolean55 = stackAr52.isFull();
        stackAr52.push((java.lang.Object) '4');
        stackAr45.push((java.lang.Object) stackAr52);
        boolean boolean59 = stackAr45.isEmpty();
        java.lang.String str60 = stackAr45.toString();
        java.lang.Object obj61 = stackAr45.pop();
        boolean boolean62 = stackAr38.equals(obj61);
        stackAr1.push(obj61);
        boolean boolean64 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "[4]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "[[4]]" + "'", str60, "[[4]]");
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "[4]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isFull();
        int int13 = stackAr7.size();
        boolean boolean15 = stackAr7.equals((java.lang.Object) 'a');
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        java.lang.String str17 = stackAr1.toString();
        int int18 = stackAr1.size();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        boolean boolean24 = stackAr20.isFull();
        boolean boolean25 = stackAr20.isFull();
        int int26 = stackAr20.size();
        boolean boolean28 = stackAr20.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr();
        boolean boolean30 = stackAr29.isEmpty();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr();
        int int32 = stackAr31.size();
        stackAr29.push((java.lang.Object) int32);
        boolean boolean34 = stackAr20.equals((java.lang.Object) int32);
        java.lang.Class<?> wildcardClass35 = stackAr20.getClass();
        boolean boolean36 = stackAr1.equals((java.lang.Object) wildcardClass35);
        java.lang.Class<?> wildcardClass37 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isFull();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        boolean boolean25 = stackAr19.isFull();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        java.lang.Object obj31 = new java.lang.Object();
        stackAr27.push(obj31);
        boolean boolean33 = stackAr27.isFull();
        java.lang.String str34 = stackAr27.toString();
        boolean boolean35 = stackAr19.equals((java.lang.Object) str34);
        boolean boolean36 = stackAr19.isEmpty();
        java.lang.String str37 = stackAr19.toString();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        java.lang.String str40 = stackAr39.toString();
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int) '#');
        boolean boolean43 = stackAr42.isEmpty();
        int int44 = stackAr42.size();
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        boolean boolean50 = stackAr46.isFull();
        int int51 = stackAr46.size();
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean55 = stackAr53.equals((java.lang.Object) (byte) 1);
        stackAr53.push((java.lang.Object) "[]");
        stackAr46.push((java.lang.Object) stackAr53);
        java.lang.Object obj59 = stackAr53.pop();
        org.autotest.StackAr stackAr61 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean62 = stackAr61.isFull();
        org.autotest.StackAr stackAr64 = new org.autotest.StackAr((int) '#');
        boolean boolean65 = stackAr64.isEmpty();
        boolean boolean66 = stackAr64.isEmpty();
        int int67 = stackAr64.size();
        int int68 = stackAr64.size();
        boolean boolean69 = stackAr61.equals((java.lang.Object) stackAr64);
        boolean boolean70 = stackAr53.equals((java.lang.Object) boolean69);
        boolean boolean71 = stackAr42.equals((java.lang.Object) stackAr53);
        stackAr39.push((java.lang.Object) stackAr53);
        stackAr19.push((java.lang.Object) stackAr39);
        boolean boolean74 = stackAr1.equals((java.lang.Object) stackAr39);
        java.lang.Object obj75 = stackAr39.pop();
        java.lang.String str76 = stackAr39.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + "[]" + "'", obj59, "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "[]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "[]" + "'", str76, "[]");
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        int int12 = stackAr1.size();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean22 = stackAr18.equals((java.lang.Object) 100L);
        boolean boolean23 = stackAr18.isFull();
        stackAr14.push((java.lang.Object) stackAr18);
        boolean boolean25 = stackAr14.isEmpty();
        boolean boolean26 = stackAr1.equals((java.lang.Object) stackAr14);
        int int27 = stackAr1.size();
        java.lang.Object obj28 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(obj28);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        java.lang.Object obj29 = new java.lang.Object();
        stackAr25.push(obj29);
        boolean boolean31 = stackAr17.equals(obj29);
        stackAr1.push((java.lang.Object) stackAr17);
        boolean boolean33 = stackAr1.isFull();
        java.lang.Object obj34 = stackAr1.pop();
        boolean boolean35 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str9 = stackAr8.toString();
        boolean boolean10 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) 1);
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr16.isEmpty();
        int int18 = stackAr16.size();
        boolean boolean19 = stackAr16.isEmpty();
        stackAr1.push((java.lang.Object) boolean19);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr26.equals((java.lang.Object) (byte) 1);
        boolean boolean29 = stackAr26.isFull();
        java.lang.Object obj30 = new java.lang.Object();
        stackAr26.push(obj30);
        java.lang.String str32 = stackAr26.toString();
        boolean boolean33 = stackAr26.isEmpty();
        boolean boolean34 = stackAr26.isFull();
        java.lang.Object obj35 = stackAr26.top();
        java.lang.String str36 = stackAr26.toString();
        stackAr22.push((java.lang.Object) stackAr26);
        boolean boolean38 = stackAr22.isEmpty();
        boolean boolean39 = stackAr1.equals((java.lang.Object) stackAr22);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        boolean boolean10 = stackAr1.isFull();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str13 = stackAr12.toString();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr(0);
        int int16 = stackAr15.size();
        stackAr12.push((java.lang.Object) stackAr15);
        java.lang.Object obj18 = stackAr12.pop();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr();
        int int20 = stackAr19.size();
        java.lang.Object[] objArray26 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean27 = org.autotest.StackAr.repOkFunction((int) 'a', objArray26);
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray26);
        boolean boolean29 = stackAr19.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr31.equals((java.lang.Object) (byte) 1);
        boolean boolean34 = stackAr31.isFull();
        java.lang.Object obj35 = new java.lang.Object();
        stackAr31.push(obj35);
        boolean boolean38 = stackAr31.equals((java.lang.Object) (byte) -1);
        boolean boolean39 = stackAr19.equals((java.lang.Object) boolean38);
        boolean boolean40 = stackAr19.isFull();
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int) '#');
        boolean boolean43 = stackAr42.isEmpty();
        int int44 = stackAr42.size();
        stackAr42.push((java.lang.Object) (byte) 100);
        stackAr19.push((java.lang.Object) (byte) 100);
        java.lang.String str48 = stackAr19.toString();
        org.autotest.StackAr stackAr49 = new org.autotest.StackAr();
        int int50 = stackAr49.size();
        org.autotest.StackAr stackAr52 = new org.autotest.StackAr(1);
        boolean boolean53 = stackAr52.isFull();
        stackAr49.push((java.lang.Object) boolean53);
        boolean boolean55 = stackAr19.equals((java.lang.Object) stackAr49);
        boolean boolean56 = stackAr49.isEmpty();
        stackAr12.push((java.lang.Object) stackAr49);
        stackAr1.push((java.lang.Object) stackAr12);
        java.lang.Object obj59 = stackAr12.top();
        int int60 = stackAr12.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[100]" + "'", str48, "[100]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "[false]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "[false]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "[false]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.pop();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
        int int12 = stackAr11.size();
        java.lang.Object[] objArray18 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) 'a', objArray18);
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray18);
        boolean boolean21 = stackAr11.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        java.lang.Object obj27 = new java.lang.Object();
        stackAr23.push(obj27);
        boolean boolean30 = stackAr23.equals((java.lang.Object) (byte) -1);
        boolean boolean31 = stackAr11.equals((java.lang.Object) boolean30);
        boolean boolean32 = stackAr11.isFull();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        int int36 = stackAr34.size();
        stackAr34.push((java.lang.Object) (byte) 100);
        stackAr11.push((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr();
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr42.equals((java.lang.Object) (byte) 100);
        boolean boolean45 = stackAr42.isEmpty();
        boolean boolean46 = stackAr42.isEmpty();
        boolean boolean47 = stackAr40.equals((java.lang.Object) stackAr42);
        boolean boolean48 = stackAr11.equals((java.lang.Object) stackAr42);
        boolean boolean49 = stackAr1.equals((java.lang.Object) stackAr11);
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean53 = stackAr51.equals((java.lang.Object) (byte) 1);
        stackAr51.push((java.lang.Object) "[]");
        int int56 = stackAr51.size();
        java.lang.String str57 = stackAr51.toString();
        org.autotest.StackAr stackAr58 = new org.autotest.StackAr();
        int int59 = stackAr58.size();
        java.lang.Object[] objArray65 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean66 = org.autotest.StackAr.repOkFunction((int) 'a', objArray65);
        boolean boolean67 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray65);
        boolean boolean68 = stackAr58.equals((java.lang.Object) (byte) 10);
        java.lang.String str69 = stackAr58.toString();
        stackAr51.push((java.lang.Object) str69);
        org.autotest.StackAr stackAr72 = new org.autotest.StackAr((int) '#');
        boolean boolean73 = stackAr72.isEmpty();
        int int74 = stackAr72.size();
        boolean boolean75 = stackAr72.isEmpty();
        int int76 = stackAr72.size();
        boolean boolean77 = stackAr72.isFull();
        boolean boolean78 = stackAr51.equals((java.lang.Object) boolean77);
        java.lang.Object obj79 = null;
        stackAr51.push(obj79);
        boolean boolean81 = stackAr11.equals((java.lang.Object) stackAr51);
        java.lang.Object obj82 = stackAr51.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4]" + "'", str7, "[4]");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + '4' + "'", obj8, '4');
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + '4' + "'", obj10, '4');
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[[]]" + "'", str57, "[[]]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[]" + "'", str69, "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(obj82);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) '4', objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(0, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isFull();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isEmpty();
        boolean boolean21 = stackAr17.isEmpty();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        stackAr1.push((java.lang.Object) int23);
        int int25 = stackAr1.size();
        int int26 = stackAr1.size();
        int int27 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(0, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction(0, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) '#', objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) '#', objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        java.lang.Object obj17 = stackAr6.pop();
        java.lang.Object obj18 = stackAr6.top();
        boolean boolean19 = stackAr6.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (byte) 0 + "'", obj17, (byte) 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        java.lang.Object obj11 = stackAr1.pop();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isEmpty();
        java.lang.Object obj18 = stackAr1.pop();
        boolean boolean20 = stackAr1.equals((java.lang.Object) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "[4]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr1.toString();
        boolean boolean16 = stackAr1.isEmpty();
        int int17 = stackAr1.size();
        int int18 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[4]]" + "'", str15, "[[4]]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = new java.lang.Object();
        stackAr8.push(obj12);
        java.lang.String str14 = stackAr8.toString();
        boolean boolean15 = stackAr8.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.Object obj21 = new java.lang.Object();
        stackAr17.push(obj21);
        boolean boolean23 = stackAr17.isFull();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        java.lang.Object obj29 = new java.lang.Object();
        stackAr25.push(obj29);
        boolean boolean31 = stackAr25.isFull();
        java.lang.String str32 = stackAr25.toString();
        boolean boolean33 = stackAr17.equals((java.lang.Object) str32);
        stackAr8.push((java.lang.Object) stackAr17);
        boolean boolean35 = stackAr1.equals((java.lang.Object) stackAr17);
        boolean boolean36 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (short) 0 + "'", obj7, (short) 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr8.toString();
        int int16 = stackAr8.size();
        boolean boolean17 = stackAr8.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean22 = stackAr19.equals((java.lang.Object) '#');
        boolean boolean24 = stackAr19.equals((java.lang.Object) "hi!");
        boolean boolean25 = stackAr19.isFull();
        boolean boolean26 = stackAr8.equals((java.lang.Object) stackAr19);
        boolean boolean27 = stackAr19.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr4.equals((java.lang.Object) (byte) 1);
        boolean boolean7 = stackAr4.isFull();
        java.lang.String str8 = stackAr4.toString();
        java.lang.Object[] objArray16 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) 'a', objArray16);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray16);
        boolean boolean19 = org.autotest.StackAr.repOkFunction(100, objArray16);
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray16);
        stackAr4.push((java.lang.Object) objArray16);
        boolean boolean22 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray16);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray16);
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray16);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.Object obj21 = new java.lang.Object();
        stackAr17.push(obj21);
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr17);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 100);
        boolean boolean28 = stackAr25.isEmpty();
        stackAr25.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean34 = stackAr32.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 1);
        boolean boolean39 = stackAr36.isFull();
        java.lang.Object obj40 = new java.lang.Object();
        stackAr36.push(obj40);
        stackAr32.push((java.lang.Object) stackAr36);
        int int43 = stackAr32.size();
        stackAr25.push((java.lang.Object) stackAr32);
        java.lang.Object obj45 = stackAr25.pop();
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean49 = stackAr47.equals((java.lang.Object) (byte) 1);
        boolean boolean50 = stackAr47.isFull();
        boolean boolean51 = stackAr47.isFull();
        boolean boolean52 = stackAr47.isFull();
        org.autotest.StackAr stackAr54 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str55 = stackAr54.toString();
        boolean boolean56 = stackAr54.isFull();
        stackAr54.push((java.lang.Object) 1);
        boolean boolean59 = stackAr54.isEmpty();
        boolean boolean60 = stackAr47.equals((java.lang.Object) stackAr54);
        java.lang.Object obj61 = stackAr54.top();
        java.lang.Object obj62 = stackAr54.pop();
        stackAr25.push(obj62);
        org.autotest.StackAr stackAr65 = new org.autotest.StackAr((int) '#');
        boolean boolean67 = stackAr65.equals((java.lang.Object) (byte) 1);
        boolean boolean68 = stackAr65.isFull();
        stackAr65.push((java.lang.Object) '4');
        java.lang.String str71 = stackAr65.toString();
        java.lang.Object obj72 = stackAr65.pop();
        stackAr25.push(obj72);
        java.lang.Object obj74 = null;
        stackAr25.push(obj74);
        boolean boolean76 = stackAr25.isFull();
        stackAr1.push((java.lang.Object) boolean76);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + obj61 + "' != '" + 1 + "'", obj61, 1);
        org.junit.Assert.assertEquals("'" + obj62 + "' != '" + 1 + "'", obj62, 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[4]" + "'", str71, "[4]");
        org.junit.Assert.assertEquals("'" + obj72 + "' != '" + '4' + "'", obj72, '4');
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        java.lang.String str20 = stackAr16.toString();
        java.lang.Object[] objArray28 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) 'a', objArray28);
        boolean boolean30 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray28);
        boolean boolean31 = org.autotest.StackAr.repOkFunction(100, objArray28);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray28);
        stackAr16.push((java.lang.Object) objArray28);
        boolean boolean34 = org.autotest.StackAr.repOkFunction(10, objArray28);
        boolean boolean35 = org.autotest.StackAr.repOkFunction(0, objArray28);
        boolean boolean36 = org.autotest.StackAr.repOkFunction((int) ' ', objArray28);
        boolean boolean37 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray28);
        boolean boolean38 = org.autotest.StackAr.repOkFunction(3, objArray28);
        boolean boolean39 = stackAr1.equals((java.lang.Object) boolean38);
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean43 = stackAr41.equals((java.lang.Object) (byte) 1);
        boolean boolean44 = stackAr41.isFull();
        java.lang.Object obj45 = new java.lang.Object();
        stackAr41.push(obj45);
        boolean boolean47 = stackAr41.isFull();
        org.autotest.StackAr stackAr49 = new org.autotest.StackAr((int) '#');
        boolean boolean51 = stackAr49.equals((java.lang.Object) (byte) 1);
        boolean boolean52 = stackAr49.isFull();
        java.lang.Object obj53 = new java.lang.Object();
        stackAr49.push(obj53);
        boolean boolean55 = stackAr49.isFull();
        java.lang.String str56 = stackAr49.toString();
        boolean boolean57 = stackAr41.equals((java.lang.Object) str56);
        boolean boolean58 = stackAr41.isEmpty();
        boolean boolean59 = stackAr41.isFull();
        org.autotest.StackAr stackAr61 = new org.autotest.StackAr((int) '#');
        boolean boolean63 = stackAr61.equals((java.lang.Object) (byte) 1);
        boolean boolean64 = stackAr61.isFull();
        boolean boolean65 = stackAr61.isFull();
        stackAr41.push((java.lang.Object) boolean65);
        boolean boolean67 = stackAr41.isFull();
        boolean boolean68 = stackAr41.isEmpty();
        java.lang.Object obj69 = stackAr41.top();
        java.lang.Object obj70 = stackAr41.pop();
        stackAr1.push(obj70);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + false + "'", obj69, false);
        org.junit.Assert.assertEquals("'" + obj70 + "' != '" + false + "'", obj70, false);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass11 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 1);
        boolean boolean16 = stackAr13.isFull();
        stackAr13.push((java.lang.Object) '4');
        boolean boolean20 = stackAr13.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        boolean boolean26 = stackAr22.isFull();
        int int27 = stackAr22.size();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        stackAr29.push((java.lang.Object) "[]");
        stackAr22.push((java.lang.Object) stackAr29);
        boolean boolean35 = stackAr13.equals((java.lang.Object) stackAr29);
        java.lang.Class<?> wildcardClass36 = stackAr29.getClass();
        boolean boolean37 = stackAr1.equals((java.lang.Object) wildcardClass36);
        boolean boolean38 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr40.isEmpty();
        int int42 = stackAr40.size();
        boolean boolean43 = stackAr40.isEmpty();
        java.lang.String str44 = stackAr40.toString();
        stackAr1.push((java.lang.Object) stackAr40);
        java.lang.Object obj46 = stackAr1.top();
        boolean boolean47 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(1, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(2, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        java.lang.Object obj26 = new java.lang.Object();
        stackAr22.push(obj26);
        boolean boolean28 = stackAr22.isFull();
        java.lang.String str29 = stackAr22.toString();
        stackAr22.push((java.lang.Object) (byte) 0);
        stackAr17.push((java.lang.Object) stackAr22);
        boolean boolean33 = stackAr1.equals((java.lang.Object) stackAr22);
        java.lang.Object obj34 = stackAr1.pop();
        boolean boolean35 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr41.isEmpty();
        int int43 = stackAr41.size();
        boolean boolean45 = stackAr41.equals((java.lang.Object) 100L);
        boolean boolean46 = stackAr41.isFull();
        stackAr37.push((java.lang.Object) stackAr41);
        java.lang.String str48 = stackAr41.toString();
        boolean boolean49 = stackAr1.equals((java.lang.Object) stackAr41);
        boolean boolean50 = stackAr41.isFull();
        java.lang.String str51 = stackAr41.toString();
        boolean boolean52 = stackAr41.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "[4]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        java.lang.Object obj7 = stackAr1.pop();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isEmpty();
        boolean boolean14 = stackAr9.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        stackAr16.push((java.lang.Object) '4');
        stackAr9.push((java.lang.Object) stackAr16);
        java.lang.String str23 = stackAr16.toString();
        int int24 = stackAr16.size();
        boolean boolean25 = stackAr1.equals((java.lang.Object) int24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj26 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (short) 0 + "'", obj7, (short) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[4]" + "'", str23, "[4]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        boolean boolean8 = stackAr1.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        boolean boolean14 = stackAr10.isFull();
        int int15 = stackAr10.size();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        stackAr17.push((java.lang.Object) "[]");
        stackAr10.push((java.lang.Object) stackAr17);
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr17);
        boolean boolean24 = stackAr17.isFull();
        boolean boolean25 = stackAr17.isFull();
        boolean boolean26 = stackAr17.isEmpty();
        java.lang.String str27 = stackAr17.toString();
        boolean boolean28 = stackAr17.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[[]]" + "'", str27, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        stackAr6.push((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        boolean boolean31 = stackAr28.isEmpty();
        stackAr28.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        stackAr35.push((java.lang.Object) stackAr39);
        int int46 = stackAr35.size();
        stackAr28.push((java.lang.Object) stackAr35);
        boolean boolean48 = stackAr6.equals((java.lang.Object) stackAr28);
        java.lang.String str49 = stackAr6.toString();
        boolean boolean50 = stackAr6.isFull();
        java.lang.String str51 = stackAr6.toString();
        java.lang.String str52 = stackAr6.toString();
        java.lang.Class<?> wildcardClass53 = stackAr6.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        java.lang.Object obj16 = stackAr1.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[4]");
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = stackAr1.pop();
        boolean boolean9 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr11.equals((java.lang.Object) (byte) 1);
        boolean boolean14 = stackAr11.isFull();
        boolean boolean15 = stackAr11.isFull();
        boolean boolean16 = stackAr11.isFull();
        int int17 = stackAr11.size();
        boolean boolean19 = stackAr11.equals((java.lang.Object) 'a');
        java.lang.String str20 = stackAr11.toString();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        java.lang.String str23 = stackAr22.toString();
        boolean boolean25 = stackAr22.equals((java.lang.Object) 10L);
        stackAr11.push((java.lang.Object) boolean25);
        boolean boolean27 = stackAr11.isFull();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr29.isEmpty();
        int int31 = stackAr29.size();
        boolean boolean32 = stackAr29.isEmpty();
        boolean boolean34 = stackAr29.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 1);
        boolean boolean39 = stackAr36.isFull();
        stackAr36.push((java.lang.Object) '4');
        stackAr29.push((java.lang.Object) stackAr36);
        boolean boolean43 = stackAr29.isFull();
        boolean boolean44 = stackAr29.isEmpty();
        boolean boolean45 = stackAr29.isEmpty();
        int int46 = stackAr29.size();
        java.lang.Object obj47 = stackAr29.top();
        stackAr11.push((java.lang.Object) stackAr29);
        boolean boolean49 = stackAr1.equals((java.lang.Object) stackAr11);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[[]]" + "'", str7, "[[]]");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + "[]" + "'", obj8, "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "[4]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        int int9 = stackAr1.size();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr11.isEmpty();
        int int13 = stackAr11.size();
        boolean boolean14 = stackAr11.isEmpty();
        boolean boolean15 = stackAr11.isEmpty();
        boolean boolean16 = stackAr11.isFull();
        int int17 = stackAr11.size();
        boolean boolean18 = stackAr11.isEmpty();
        stackAr1.push((java.lang.Object) stackAr11);
        boolean boolean20 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        boolean boolean10 = stackAr8.isEmpty();
        int int11 = stackAr8.size();
        boolean boolean12 = stackAr8.isFull();
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) boolean13);
        stackAr1.push((java.lang.Object) "[4]");
        java.lang.String str17 = stackAr1.toString();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        boolean boolean25 = stackAr19.isFull();
        java.lang.String str26 = stackAr19.toString();
        java.lang.Object obj27 = stackAr19.top();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        java.lang.String str30 = stackAr29.toString();
        boolean boolean31 = stackAr19.equals((java.lang.Object) str30);
        boolean boolean32 = stackAr19.isEmpty();
        boolean boolean33 = stackAr1.equals((java.lang.Object) stackAr19);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[[4]]" + "'", str17, "[[4]]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray4 = new java.lang.Object[] { 1.0d };
        boolean boolean5 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray4);
        java.lang.Class<?> wildcardClass6 = objArray4.getClass();
        boolean boolean7 = stackAr0.equals((java.lang.Object) objArray4);
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr13.isEmpty();
        int int15 = stackAr13.size();
        boolean boolean17 = stackAr13.equals((java.lang.Object) 100L);
        boolean boolean18 = stackAr13.isFull();
        stackAr9.push((java.lang.Object) stackAr13);
        boolean boolean20 = stackAr9.isEmpty();
        java.lang.Object obj21 = stackAr9.top();
        stackAr0.push((java.lang.Object) stackAr9);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr24.equals((java.lang.Object) (byte) 1);
        stackAr24.push((java.lang.Object) "[]");
        int int29 = stackAr24.size();
        boolean boolean31 = stackAr24.equals((java.lang.Object) 'a');
        int int32 = stackAr24.size();
        java.lang.Object obj33 = stackAr24.top();
        stackAr0.push((java.lang.Object) stackAr24);
        java.lang.Class<?> wildcardClass35 = stackAr0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "[]" + "'", obj33, "[]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        java.lang.Object[] objArray13 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) 'a', objArray13);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray13);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(100, objArray13);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray13);
        stackAr1.push((java.lang.Object) objArray13);
        boolean boolean19 = stackAr1.isEmpty();
        java.lang.Object obj20 = stackAr1.pop();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean25 = stackAr22.isEmpty();
        boolean boolean27 = stackAr22.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        boolean boolean32 = stackAr29.isFull();
        stackAr29.push((java.lang.Object) '4');
        stackAr22.push((java.lang.Object) stackAr29);
        java.lang.String str36 = stackAr22.toString();
        java.lang.Object obj37 = stackAr22.pop();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr43.isEmpty();
        int int45 = stackAr43.size();
        boolean boolean47 = stackAr43.equals((java.lang.Object) 100L);
        boolean boolean48 = stackAr43.isFull();
        stackAr39.push((java.lang.Object) stackAr43);
        java.lang.Object obj50 = stackAr39.top();
        stackAr22.push((java.lang.Object) stackAr39);
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        java.lang.String str54 = stackAr53.toString();
        boolean boolean56 = stackAr53.equals((java.lang.Object) 10L);
        boolean boolean57 = stackAr53.isFull();
        stackAr39.push((java.lang.Object) boolean57);
        stackAr1.push((java.lang.Object) stackAr39);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[[4]]" + "'", str36, "[[4]]");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "[4]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        int int11 = stackAr1.size();
        java.lang.String str12 = stackAr1.toString();
        int int13 = stackAr1.size();
        int int14 = stackAr1.size();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr16.isEmpty();
        boolean boolean18 = stackAr16.isEmpty();
        boolean boolean19 = stackAr16.isFull();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        stackAr21.push((java.lang.Object) '4');
        java.lang.String str27 = stackAr21.toString();
        java.lang.Object obj28 = stackAr21.top();
        boolean boolean29 = stackAr21.isEmpty();
        boolean boolean30 = stackAr16.equals((java.lang.Object) boolean29);
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean34 = stackAr32.equals((java.lang.Object) (byte) 1);
        boolean boolean35 = stackAr32.isFull();
        java.lang.Object obj36 = new java.lang.Object();
        stackAr32.push(obj36);
        boolean boolean39 = stackAr32.equals((java.lang.Object) (byte) -1);
        int int40 = stackAr32.size();
        java.lang.Object obj41 = stackAr32.top();
        boolean boolean42 = stackAr16.equals((java.lang.Object) stackAr32);
        boolean boolean43 = stackAr16.isFull();
        boolean boolean44 = stackAr1.equals((java.lang.Object) boolean43);
        boolean boolean45 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4]" + "'", str27, "[4]");
        org.junit.Assert.assertEquals("'" + obj28 + "' != '" + '4' + "'", obj28, '4');
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean7 = stackAr6.isEmpty();
        stackAr1.push((java.lang.Object) stackAr6);
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 100);
        boolean boolean13 = stackAr10.isEmpty();
        boolean boolean14 = stackAr10.isEmpty();
        java.lang.String str15 = stackAr10.toString();
        boolean boolean16 = stackAr10.isEmpty();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        java.lang.String str22 = stackAr18.toString();
        java.lang.Object[] objArray30 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) 'a', objArray30);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray30);
        boolean boolean33 = org.autotest.StackAr.repOkFunction(100, objArray30);
        boolean boolean34 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray30);
        stackAr18.push((java.lang.Object) objArray30);
        boolean boolean36 = stackAr18.isEmpty();
        int int37 = stackAr18.size();
        boolean boolean38 = stackAr10.equals((java.lang.Object) int37);
        stackAr1.push((java.lang.Object) boolean38);
        java.lang.Object obj40 = stackAr1.pop();
        java.lang.Object obj41 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + obj40 + "' != '" + false + "'", obj40, false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "[]");
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = stackAr1.pop();
        int int9 = stackAr1.size();
        java.lang.String str10 = stackAr1.toString();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        boolean boolean16 = stackAr12.isFull();
        int int17 = stackAr12.size();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr24.equals((java.lang.Object) (byte) 1);
        stackAr24.push((java.lang.Object) "[]");
        java.lang.Object obj29 = stackAr24.pop();
        boolean boolean30 = stackAr19.equals((java.lang.Object) stackAr24);
        boolean boolean31 = stackAr12.equals((java.lang.Object) stackAr24);
        int int32 = stackAr12.size();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr34.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr38.isEmpty();
        int int40 = stackAr38.size();
        boolean boolean42 = stackAr38.equals((java.lang.Object) 100L);
        boolean boolean43 = stackAr38.isFull();
        stackAr34.push((java.lang.Object) stackAr38);
        boolean boolean45 = stackAr34.isEmpty();
        java.lang.Object obj46 = stackAr34.top();
        int int47 = stackAr34.size();
        java.lang.Object obj48 = stackAr34.top();
        boolean boolean49 = stackAr12.equals((java.lang.Object) stackAr34);
        boolean boolean50 = stackAr1.equals((java.lang.Object) stackAr12);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4]" + "'", str7, "[4]");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + '4' + "'", obj8, '4');
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + "[]" + "'", obj29, "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        boolean boolean11 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr13.isEmpty();
        int int15 = stackAr13.size();
        boolean boolean16 = stackAr13.isFull();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        java.lang.Object obj22 = new java.lang.Object();
        stackAr18.push(obj22);
        boolean boolean24 = stackAr18.isFull();
        java.lang.String str25 = stackAr18.toString();
        stackAr18.push((java.lang.Object) (byte) 0);
        stackAr13.push((java.lang.Object) stackAr18);
        boolean boolean29 = stackAr18.isFull();
        java.lang.String str30 = stackAr18.toString();
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr32.isEmpty();
        int int34 = stackAr32.size();
        boolean boolean35 = stackAr32.isEmpty();
        boolean boolean37 = stackAr32.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        stackAr39.push((java.lang.Object) '4');
        stackAr32.push((java.lang.Object) stackAr39);
        boolean boolean46 = stackAr32.isEmpty();
        java.lang.String str47 = stackAr32.toString();
        int int48 = stackAr32.size();
        boolean boolean49 = stackAr32.isEmpty();
        boolean boolean50 = stackAr18.equals((java.lang.Object) boolean49);
        boolean boolean51 = stackAr1.equals((java.lang.Object) stackAr18);
        java.lang.Object obj52 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[[4]]" + "'", str47, "[[4]]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + (byte) 0 + "'", obj52, (byte) 0);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(10, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction(10, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(2, objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = new java.lang.Object();
        stackAr8.push(obj12);
        java.lang.String str14 = stackAr8.toString();
        boolean boolean15 = stackAr8.isEmpty();
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean21 = stackAr18.isEmpty();
        boolean boolean23 = stackAr18.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        stackAr25.push((java.lang.Object) '4');
        stackAr18.push((java.lang.Object) stackAr25);
        boolean boolean32 = stackAr18.isEmpty();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        int int36 = stackAr34.size();
        boolean boolean37 = stackAr34.isFull();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        boolean boolean45 = stackAr39.isFull();
        java.lang.String str46 = stackAr39.toString();
        stackAr39.push((java.lang.Object) (byte) 0);
        stackAr34.push((java.lang.Object) stackAr39);
        boolean boolean50 = stackAr18.equals((java.lang.Object) stackAr39);
        stackAr1.push((java.lang.Object) stackAr18);
        java.lang.Object obj52 = stackAr1.top();
        boolean boolean53 = stackAr1.isFull();
        boolean boolean54 = stackAr1.isEmpty();
        int int55 = stackAr1.size();
        java.lang.String str56 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "[[4]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "[[4]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "[[4]]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[4,[[4]]]" + "'", str56, "[4,[[4]]]");
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray4 = new java.lang.Object[] { 1.0d };
        boolean boolean5 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray4);
        java.lang.Class<?> wildcardClass6 = objArray4.getClass();
        boolean boolean7 = stackAr0.equals((java.lang.Object) objArray4);
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr13.isEmpty();
        int int15 = stackAr13.size();
        boolean boolean17 = stackAr13.equals((java.lang.Object) 100L);
        boolean boolean18 = stackAr13.isFull();
        stackAr9.push((java.lang.Object) stackAr13);
        boolean boolean20 = stackAr9.isEmpty();
        java.lang.Object obj21 = stackAr9.top();
        stackAr0.push((java.lang.Object) stackAr9);
        java.lang.Object obj23 = stackAr9.top();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "[]");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "[]");
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(100, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(1, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(0, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction(10, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        stackAr6.push((java.lang.Object) '4');
        java.lang.String str12 = stackAr6.toString();
        java.lang.Object obj13 = stackAr6.top();
        boolean boolean14 = stackAr6.isEmpty();
        boolean boolean15 = stackAr1.equals((java.lang.Object) boolean14);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.Object obj21 = new java.lang.Object();
        stackAr17.push(obj21);
        boolean boolean24 = stackAr17.equals((java.lang.Object) (byte) -1);
        int int25 = stackAr17.size();
        java.lang.Object obj26 = stackAr17.top();
        boolean boolean27 = stackAr1.equals((java.lang.Object) stackAr17);
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        boolean boolean32 = stackAr29.isFull();
        stackAr29.push((java.lang.Object) '4');
        java.lang.Object obj35 = null;
        boolean boolean36 = stackAr29.equals(obj35);
        boolean boolean37 = stackAr29.isEmpty();
        java.lang.Object obj38 = stackAr29.top();
        stackAr17.push(obj38);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[4]" + "'", str12, "[4]");
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + '4' + "'", obj13, '4');
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + obj38 + "' != '" + '4' + "'", obj38, '4');
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((-1), objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) '#', objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object obj13 = stackAr1.top();
        int int14 = stackAr1.size();
        java.lang.Class<?> wildcardClass15 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        int int8 = stackAr1.size();
        int int9 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        boolean boolean9 = stackAr1.isEmpty();
        int int10 = stackAr1.size();
        java.lang.Object obj11 = stackAr1.top();
        java.lang.Class<?> wildcardClass12 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.pop();
        java.lang.String str10 = stackAr1.toString();
        int int11 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr24.isEmpty();
        int int26 = stackAr24.size();
        boolean boolean27 = stackAr24.isEmpty();
        boolean boolean29 = stackAr24.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr(0);
        stackAr24.push((java.lang.Object) 0);
        stackAr8.push((java.lang.Object) 0);
        int int34 = stackAr8.size();
        java.lang.Object obj35 = stackAr8.pop();
        boolean boolean36 = stackAr8.isFull();
        java.lang.Class<?> wildcardClass37 = stackAr8.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + 0 + "'", obj35, 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        stackAr6.push((java.lang.Object) "[]");
        java.lang.Object obj11 = stackAr6.pop();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr6);
        int int13 = stackAr1.size();
        boolean boolean14 = stackAr1.isFull();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr16.isEmpty();
        int int18 = stackAr16.size();
        boolean boolean19 = stackAr16.isEmpty();
        boolean boolean21 = stackAr16.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        stackAr23.push((java.lang.Object) '4');
        stackAr16.push((java.lang.Object) stackAr23);
        boolean boolean30 = stackAr16.isFull();
        boolean boolean31 = stackAr16.isEmpty();
        boolean boolean32 = stackAr16.isEmpty();
        int int33 = stackAr16.size();
        stackAr1.push((java.lang.Object) stackAr16);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "[]" + "'", obj11, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr1.toString();
        java.lang.Object obj16 = stackAr1.pop();
        boolean boolean17 = stackAr1.isFull();
        int int18 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[4]]" + "'", str15, "[[4]]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[4]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isFull();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass18 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        int int2 = stackAr0.size();
        java.lang.String str3 = stackAr0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj4 = stackAr0.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        java.lang.Object obj11 = stackAr1.pop();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr13.isEmpty();
        boolean boolean15 = stackAr13.isEmpty();
        int int16 = stackAr13.size();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean19 = stackAr18.isEmpty();
        stackAr13.push((java.lang.Object) stackAr18);
        boolean boolean21 = stackAr1.equals((java.lang.Object) stackAr18);
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        boolean boolean27 = stackAr23.isFull();
        int int28 = stackAr23.size();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 1);
        stackAr30.push((java.lang.Object) "[]");
        stackAr23.push((java.lang.Object) stackAr30);
        java.lang.Object obj36 = stackAr30.pop();
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean39 = stackAr30.equals((java.lang.Object) (short) 1);
        int int40 = stackAr30.size();
        java.lang.Object[] objArray49 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean50 = org.autotest.StackAr.repOkFunction((int) 'a', objArray49);
        boolean boolean51 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray49);
        boolean boolean52 = org.autotest.StackAr.repOkFunction(100, objArray49);
        boolean boolean53 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray49);
        boolean boolean54 = org.autotest.StackAr.repOkFunction((int) '#', objArray49);
        stackAr30.push((java.lang.Object) '#');
        boolean boolean56 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean57 = stackAr1.isEmpty();
        boolean boolean58 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + "[]" + "'", obj36, "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.pop();
        boolean boolean11 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 1);
        boolean boolean16 = stackAr13.isFull();
        boolean boolean17 = stackAr13.isFull();
        boolean boolean18 = stackAr13.isFull();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr20.isEmpty();
        boolean boolean22 = stackAr20.isEmpty();
        int int23 = stackAr20.size();
        boolean boolean24 = stackAr20.isFull();
        boolean boolean25 = stackAr20.isEmpty();
        boolean boolean26 = stackAr13.equals((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        boolean boolean32 = stackAr28.isFull();
        int int33 = stackAr28.size();
        int int34 = stackAr28.size();
        boolean boolean35 = stackAr13.equals((java.lang.Object) stackAr28);
        stackAr1.push((java.lang.Object) stackAr28);
        java.lang.String str37 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4]" + "'", str7, "[4]");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + '4' + "'", obj8, '4');
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + '4' + "'", obj10, '4');
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[[]]" + "'", str37, "[[]]");
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.Object obj12 = stackAr1.top();
        boolean boolean13 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        stackAr15.push((java.lang.Object) stackAr19);
        int int26 = stackAr15.size();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr32.isEmpty();
        int int34 = stackAr32.size();
        boolean boolean36 = stackAr32.equals((java.lang.Object) 100L);
        boolean boolean37 = stackAr32.isFull();
        stackAr28.push((java.lang.Object) stackAr32);
        boolean boolean39 = stackAr28.isEmpty();
        boolean boolean40 = stackAr15.equals((java.lang.Object) stackAr28);
        boolean boolean41 = stackAr28.isEmpty();
        java.lang.Object obj42 = stackAr28.pop();
        java.lang.Object obj43 = null;
        boolean boolean44 = stackAr28.equals(obj43);
        java.lang.String str45 = stackAr28.toString();
        boolean boolean46 = stackAr1.equals((java.lang.Object) stackAr28);
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr();
        boolean boolean48 = stackAr47.isEmpty();
        java.lang.String str49 = stackAr47.toString();
        boolean boolean50 = stackAr28.equals((java.lang.Object) stackAr47);
        java.lang.String str51 = stackAr47.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[]" + "'", str45, "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr6.isEmpty();
        int int8 = stackAr6.size();
        boolean boolean9 = stackAr6.isEmpty();
        boolean boolean11 = stackAr6.equals((java.lang.Object) (short) -1);
        stackAr1.push((java.lang.Object) (short) -1);
        boolean boolean13 = stackAr1.isFull();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        stackAr15.push((java.lang.Object) stackAr19);
        boolean boolean26 = stackAr15.isEmpty();
        int int27 = stackAr15.size();
        boolean boolean28 = stackAr1.equals((java.lang.Object) int27);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object[] objArray7 = new java.lang.Object[] { 1.0d };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray7);
        java.lang.Class<?> wildcardClass9 = objArray7.getClass();
        boolean boolean10 = stackAr1.equals((java.lang.Object) wildcardClass9);
        boolean boolean11 = stackAr1.isFull();
        java.lang.String str12 = stackAr1.toString();
        java.lang.String str13 = stackAr1.toString();
        boolean boolean14 = stackAr1.isFull();
        int int15 = stackAr1.size();
        int int16 = stackAr1.size();
        boolean boolean17 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        java.lang.Object obj29 = new java.lang.Object();
        stackAr25.push(obj29);
        boolean boolean31 = stackAr17.equals(obj29);
        stackAr1.push((java.lang.Object) stackAr17);
        boolean boolean33 = stackAr17.isEmpty();
        boolean boolean34 = stackAr17.isEmpty();
        java.lang.String str35 = stackAr17.toString();
        java.lang.String str36 = stackAr17.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        java.lang.Object[] objArray17 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) 'a', objArray17);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray17);
        boolean boolean20 = org.autotest.StackAr.repOkFunction(100, objArray17);
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray17);
        boolean boolean22 = org.autotest.StackAr.repOkFunction((int) '#', objArray17);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray17);
        boolean boolean24 = stackAr1.equals((java.lang.Object) (short) 100);
        boolean boolean25 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr1.toString();
        boolean boolean16 = stackAr1.isEmpty();
        int int17 = stackAr1.size();
        boolean boolean18 = stackAr1.isFull();
        boolean boolean19 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[4]]" + "'", str15, "[[4]]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        java.lang.Object[] objArray13 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) 'a', objArray13);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray13);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(100, objArray13);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray13);
        stackAr1.push((java.lang.Object) objArray13);
        boolean boolean19 = stackAr1.isEmpty();
        java.lang.Object obj20 = stackAr1.top();
        java.lang.Class<?> wildcardClass21 = obj20.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + '4' + "'", obj7, '4');
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + '4' + "'", obj8, '4');
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr((int) '#');
        boolean boolean4 = stackAr2.equals((java.lang.Object) (byte) 1);
        stackAr2.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        java.lang.String str12 = stackAr8.toString();
        java.lang.Object[] objArray20 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) 'a', objArray20);
        boolean boolean22 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray20);
        boolean boolean23 = org.autotest.StackAr.repOkFunction(100, objArray20);
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray20);
        stackAr8.push((java.lang.Object) objArray20);
        boolean boolean26 = stackAr2.equals((java.lang.Object) objArray20);
        boolean boolean27 = org.autotest.StackAr.repOkFunction(0, objArray20);
        java.lang.Class<?> wildcardClass28 = objArray20.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        stackAr6.push((java.lang.Object) "[]");
        java.lang.Object obj11 = stackAr6.pop();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr6);
        int int13 = stackAr1.size();
        boolean boolean14 = stackAr1.isFull();
        int int15 = stackAr1.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "[]" + "'", obj11, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.String str18 = stackAr6.toString();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr20.isEmpty();
        int int22 = stackAr20.size();
        boolean boolean23 = stackAr20.isEmpty();
        boolean boolean25 = stackAr20.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        stackAr27.push((java.lang.Object) '4');
        stackAr20.push((java.lang.Object) stackAr27);
        boolean boolean34 = stackAr20.isEmpty();
        java.lang.String str35 = stackAr20.toString();
        int int36 = stackAr20.size();
        boolean boolean37 = stackAr20.isEmpty();
        boolean boolean38 = stackAr6.equals((java.lang.Object) boolean37);
        java.lang.Object obj39 = null;
        stackAr6.push(obj39);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[[4]]" + "'", str35, "[[4]]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        boolean boolean1 = stackAr0.isEmpty();
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
        int int3 = stackAr2.size();
        stackAr0.push((java.lang.Object) int3);
        java.lang.String str5 = stackAr0.toString();
        boolean boolean6 = stackAr0.isFull();
        java.lang.Object obj7 = stackAr0.top();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isEmpty();
        boolean boolean14 = stackAr9.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        stackAr16.push((java.lang.Object) '4');
        stackAr9.push((java.lang.Object) stackAr16);
        java.lang.Class<?> wildcardClass23 = stackAr9.getClass();
        boolean boolean24 = stackAr0.equals((java.lang.Object) stackAr9);
        java.lang.Object obj25 = stackAr0.top();
        int int26 = stackAr0.size();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0]" + "'", str5, "[0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + 0 + "'", obj7, 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + 0 + "'", obj25, 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(2, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(100, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj2 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.Object obj21 = new java.lang.Object();
        stackAr17.push(obj21);
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr17);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr25.isEmpty();
        int int27 = stackAr25.size();
        boolean boolean28 = stackAr25.isEmpty();
        int int29 = stackAr25.size();
        boolean boolean30 = stackAr25.isFull();
        boolean boolean31 = stackAr25.isEmpty();
        boolean boolean32 = stackAr1.equals((java.lang.Object) stackAr25);
        java.lang.String str33 = stackAr25.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 1);
        boolean boolean16 = stackAr13.isFull();
        stackAr13.push((java.lang.Object) '4');
        boolean boolean20 = stackAr13.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        boolean boolean26 = stackAr22.isFull();
        int int27 = stackAr22.size();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        stackAr29.push((java.lang.Object) "[]");
        stackAr22.push((java.lang.Object) stackAr29);
        boolean boolean35 = stackAr13.equals((java.lang.Object) stackAr29);
        java.lang.Class<?> wildcardClass36 = stackAr29.getClass();
        boolean boolean37 = stackAr1.equals((java.lang.Object) wildcardClass36);
        java.lang.String str38 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[0]" + "'", str38, "[0]");
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        java.lang.String str24 = stackAr20.toString();
        java.lang.Object[] objArray32 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) 'a', objArray32);
        boolean boolean34 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray32);
        boolean boolean35 = org.autotest.StackAr.repOkFunction(100, objArray32);
        boolean boolean36 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray32);
        stackAr20.push((java.lang.Object) objArray32);
        boolean boolean38 = org.autotest.StackAr.repOkFunction(10, objArray32);
        boolean boolean39 = org.autotest.StackAr.repOkFunction(0, objArray32);
        boolean boolean40 = org.autotest.StackAr.repOkFunction((int) ' ', objArray32);
        stackAr1.push((java.lang.Object) ' ');
        boolean boolean42 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((-1), objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        java.lang.String str14 = stackAr8.toString();
        java.lang.Object obj15 = stackAr8.top();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str17 = stackAr8.toString();
        java.lang.Object obj18 = stackAr8.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[4]" + "'", str14, "[4]");
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '4' + "'", obj15, '4');
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[4]" + "'", str17, "[4]");
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + '4' + "'", obj18, '4');
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isEmpty();
        java.lang.String str18 = stackAr6.toString();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        java.lang.Object obj24 = new java.lang.Object();
        stackAr20.push(obj24);
        boolean boolean26 = stackAr20.isFull();
        java.lang.Object obj27 = null;
        stackAr20.push(obj27);
        boolean boolean29 = stackAr20.isFull();
        boolean boolean30 = stackAr6.equals((java.lang.Object) stackAr20);
        java.lang.Class<?> wildcardClass31 = stackAr6.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        int int2 = stackAr0.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = stackAr0.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        int int9 = stackAr1.size();
        int int10 = stackAr1.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        java.lang.String str15 = stackAr12.toString();
        boolean boolean16 = stackAr12.isEmpty();
        int int17 = stackAr12.size();
        boolean boolean18 = stackAr1.equals((java.lang.Object) stackAr12);
        boolean boolean19 = stackAr1.isEmpty();
        java.lang.Object obj20 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "[]" + "'", obj20, "[]");
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        java.lang.String str7 = stackAr1.toString();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr();
        int int9 = stackAr8.size();
        java.lang.Object[] objArray15 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) 'a', objArray15);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray15);
        boolean boolean18 = stackAr8.equals((java.lang.Object) (byte) 10);
        java.lang.String str19 = stackAr8.toString();
        stackAr1.push((java.lang.Object) str19);
        boolean boolean21 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[[]]" + "'", str7, "[[]]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        int int15 = stackAr8.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        int int12 = stackAr1.size();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean22 = stackAr18.equals((java.lang.Object) 100L);
        boolean boolean23 = stackAr18.isFull();
        stackAr14.push((java.lang.Object) stackAr18);
        boolean boolean25 = stackAr14.isEmpty();
        boolean boolean26 = stackAr1.equals((java.lang.Object) stackAr14);
        int int27 = stackAr1.size();
        int int28 = stackAr1.size();
        java.lang.Object obj29 = stackAr1.pop();
        boolean boolean30 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        stackAr1.push((java.lang.Object) (byte) 100);
        java.lang.Object obj6 = stackAr1.pop();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        int int9 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + (byte) 100 + "'", obj6, (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr(0);
        java.lang.String str2 = stackAr1.toString();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr4.equals((java.lang.Object) (byte) 100);
        boolean boolean7 = stackAr4.isEmpty();
        stackAr4.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr11.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        java.lang.Object obj19 = new java.lang.Object();
        stackAr15.push(obj19);
        stackAr11.push((java.lang.Object) stackAr15);
        int int22 = stackAr11.size();
        stackAr4.push((java.lang.Object) stackAr11);
        java.lang.Object obj24 = stackAr4.pop();
        java.lang.String str25 = stackAr4.toString();
        java.lang.Object obj26 = stackAr4.pop();
        boolean boolean27 = stackAr1.equals(obj26);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[0]" + "'", str25, "[0]");
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + (short) 0 + "'", obj26, (short) 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str9 = stackAr8.toString();
        boolean boolean10 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) 1);
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr8.top();
        java.lang.Object obj16 = stackAr8.pop();
        boolean boolean17 = stackAr8.isEmpty();
        int int18 = stackAr8.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + 1 + "'", obj15, 1);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + 1 + "'", obj16, 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        boolean boolean18 = stackAr6.isEmpty();
        java.lang.String str19 = stackAr6.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        java.lang.String str2 = stackAr1.toString();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        int int6 = stackAr4.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        boolean boolean12 = stackAr8.isFull();
        int int13 = stackAr8.size();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        stackAr15.push((java.lang.Object) "[]");
        stackAr8.push((java.lang.Object) stackAr15);
        java.lang.Object obj21 = stackAr15.pop();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean24 = stackAr23.isFull();
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr26.isEmpty();
        boolean boolean28 = stackAr26.isEmpty();
        int int29 = stackAr26.size();
        int int30 = stackAr26.size();
        boolean boolean31 = stackAr23.equals((java.lang.Object) stackAr26);
        boolean boolean32 = stackAr15.equals((java.lang.Object) boolean31);
        boolean boolean33 = stackAr4.equals((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr15);
        java.lang.Object obj35 = stackAr1.top();
        boolean boolean36 = stackAr1.isEmpty();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "[]" + "'", obj21, "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean8 = stackAr7.isFull();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr10.isEmpty();
        boolean boolean12 = stackAr10.isEmpty();
        int int13 = stackAr10.size();
        int int14 = stackAr10.size();
        boolean boolean15 = stackAr7.equals((java.lang.Object) stackAr10);
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        int int17 = stackAr1.size();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
        int int19 = stackAr18.size();
        java.lang.Object[] objArray25 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean26 = org.autotest.StackAr.repOkFunction((int) 'a', objArray25);
        boolean boolean27 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray25);
        boolean boolean28 = stackAr18.equals((java.lang.Object) (byte) 10);
        java.lang.String str29 = stackAr18.toString();
        java.lang.String str30 = stackAr18.toString();
        java.lang.String str31 = stackAr18.toString();
        stackAr1.push((java.lang.Object) str31);
        java.lang.String str33 = stackAr1.toString();
        java.lang.String str34 = stackAr1.toString();
        int int35 = stackAr1.size();
        java.lang.Class<?> wildcardClass36 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[[]]" + "'", str33, "[[]]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[[]]" + "'", str34, "[[]]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(10, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(2, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) '4', objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) ' ', objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr10.isEmpty();
        boolean boolean12 = stackAr10.isEmpty();
        boolean boolean13 = stackAr10.isFull();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        java.lang.String str21 = stackAr15.toString();
        java.lang.Object obj22 = stackAr15.top();
        boolean boolean23 = stackAr15.isEmpty();
        boolean boolean24 = stackAr10.equals((java.lang.Object) boolean23);
        boolean boolean25 = stackAr1.equals((java.lang.Object) boolean24);
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) (short) 1);
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr();
        int int31 = stackAr30.size();
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr33.equals((java.lang.Object) (byte) 1);
        boolean boolean36 = stackAr33.isFull();
        boolean boolean37 = stackAr33.isFull();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr39.isEmpty();
        int int41 = stackAr39.size();
        boolean boolean42 = stackAr39.isEmpty();
        boolean boolean44 = stackAr39.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        stackAr46.push((java.lang.Object) '4');
        stackAr39.push((java.lang.Object) stackAr46);
        java.lang.String str53 = stackAr46.toString();
        java.lang.Class<?> wildcardClass54 = stackAr46.getClass();
        org.autotest.StackAr stackAr56 = new org.autotest.StackAr((int) '#');
        boolean boolean58 = stackAr56.equals((java.lang.Object) (byte) 1);
        boolean boolean59 = stackAr56.isFull();
        java.lang.Object obj60 = new java.lang.Object();
        stackAr56.push(obj60);
        boolean boolean63 = stackAr56.equals((java.lang.Object) (byte) -1);
        java.lang.Class<?> wildcardClass64 = stackAr56.getClass();
        java.lang.Object[] objArray65 = new java.lang.Object[] { (short) 1, stackAr30, boolean37, stackAr46, wildcardClass64 };
        boolean boolean66 = org.autotest.StackAr.repOkFunction((int) 'a', objArray65);
        boolean boolean67 = org.autotest.StackAr.repOkFunction(0, objArray65);
        boolean boolean68 = stackAr1.equals((java.lang.Object) boolean67);
        java.lang.Object obj69 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "[]" + "'", obj6, "[]");
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "[]" + "'", obj7, "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[4]" + "'", str21, "[4]");
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + '4' + "'", obj22, '4');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[4]" + "'", str53, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "[]" + "'", obj69, "[]");
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        java.lang.String str29 = stackAr0.toString();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr31.isEmpty();
        boolean boolean34 = stackAr31.equals((java.lang.Object) '#');
        boolean boolean36 = stackAr31.equals((java.lang.Object) "hi!");
        boolean boolean37 = stackAr31.isFull();
        int int38 = stackAr31.size();
        boolean boolean39 = stackAr31.isFull();
        boolean boolean40 = stackAr0.equals((java.lang.Object) boolean39);
        java.lang.Object obj41 = stackAr0.top();
        boolean boolean42 = stackAr0.isEmpty();
        boolean boolean43 = stackAr0.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100]" + "'", str29, "[100]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + (byte) 100 + "'", obj41, (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        int int10 = stackAr1.size();
        java.lang.Object obj11 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + 0 + "'", obj11, 0);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.String str6 = stackAr1.toString();
        boolean boolean7 = stackAr1.isEmpty();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 100);
        boolean boolean13 = stackAr10.isEmpty();
        boolean boolean14 = stackAr10.isEmpty();
        boolean boolean15 = stackAr1.equals((java.lang.Object) stackAr10);
        int int16 = stackAr1.size();
        boolean boolean17 = stackAr1.isEmpty();
        java.lang.String str18 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        int int6 = stackAr1.size();
        java.lang.Class<?> wildcardClass7 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        stackAr12.push((java.lang.Object) "[]");
        java.lang.Object obj17 = stackAr12.top();
        java.lang.Object obj18 = stackAr12.top();
        java.lang.String str19 = stackAr12.toString();
        java.lang.String str20 = stackAr12.toString();
        int int21 = stackAr12.size();
        java.lang.String str22 = stackAr12.toString();
        boolean boolean23 = stackAr1.equals((java.lang.Object) str22);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str26 = stackAr25.toString();
        boolean boolean27 = stackAr25.isEmpty();
        int int28 = stackAr25.size();
        java.lang.String str29 = stackAr25.toString();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr31.equals((java.lang.Object) (byte) 1);
        boolean boolean34 = stackAr31.isFull();
        boolean boolean35 = stackAr31.isFull();
        boolean boolean36 = stackAr31.isFull();
        int int37 = stackAr31.size();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr39.isEmpty();
        int int41 = stackAr39.size();
        boolean boolean42 = stackAr39.isEmpty();
        boolean boolean43 = stackAr31.equals((java.lang.Object) stackAr39);
        java.lang.String str44 = stackAr39.toString();
        boolean boolean45 = stackAr25.equals((java.lang.Object) str44);
        java.lang.String str46 = stackAr25.toString();
        boolean boolean47 = stackAr1.equals((java.lang.Object) str46);
        java.lang.Class<?> wildcardClass48 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "[]" + "'", obj17, "[]");
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + "[]" + "'", obj18, "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[[]]" + "'", str19, "[[]]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[[]]" + "'", str20, "[[]]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[[]]" + "'", str22, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[]" + "'", str44, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isFull();
        int int13 = stackAr7.size();
        boolean boolean15 = stackAr7.equals((java.lang.Object) 'a');
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        java.lang.String str17 = stackAr1.toString();
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isEmpty();
        boolean boolean20 = stackAr1.isEmpty();
        boolean boolean21 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        boolean boolean8 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        boolean boolean16 = stackAr10.isFull();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        java.lang.Object obj22 = new java.lang.Object();
        stackAr18.push(obj22);
        boolean boolean24 = stackAr18.isFull();
        java.lang.String str25 = stackAr18.toString();
        boolean boolean26 = stackAr10.equals((java.lang.Object) str25);
        stackAr1.push((java.lang.Object) stackAr10);
        java.lang.Object obj28 = stackAr1.pop();
        java.lang.String str29 = stackAr1.toString();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr31.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr35.isEmpty();
        int int37 = stackAr35.size();
        boolean boolean39 = stackAr35.equals((java.lang.Object) 100L);
        boolean boolean40 = stackAr35.isFull();
        stackAr31.push((java.lang.Object) stackAr35);
        boolean boolean42 = stackAr31.isEmpty();
        java.lang.Object obj43 = stackAr31.top();
        java.lang.Object obj44 = stackAr31.top();
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean47 = stackAr46.isEmpty();
        boolean boolean48 = stackAr46.isEmpty();
        boolean boolean49 = stackAr46.isFull();
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean53 = stackAr51.equals((java.lang.Object) (byte) 1);
        boolean boolean54 = stackAr51.isFull();
        stackAr51.push((java.lang.Object) '4');
        java.lang.String str57 = stackAr51.toString();
        java.lang.Object obj58 = stackAr51.top();
        boolean boolean59 = stackAr51.isEmpty();
        boolean boolean60 = stackAr46.equals((java.lang.Object) boolean59);
        org.autotest.StackAr stackAr62 = new org.autotest.StackAr((int) '#');
        boolean boolean64 = stackAr62.equals((java.lang.Object) (byte) 1);
        boolean boolean65 = stackAr62.isFull();
        java.lang.Object obj66 = new java.lang.Object();
        stackAr62.push(obj66);
        boolean boolean69 = stackAr62.equals((java.lang.Object) (byte) -1);
        int int70 = stackAr62.size();
        java.lang.Object obj71 = stackAr62.top();
        boolean boolean72 = stackAr46.equals((java.lang.Object) stackAr62);
        org.autotest.StackAr stackAr74 = new org.autotest.StackAr((int) '#');
        boolean boolean76 = stackAr74.equals((java.lang.Object) (byte) 1);
        boolean boolean77 = stackAr74.isFull();
        java.lang.Object obj78 = new java.lang.Object();
        stackAr74.push(obj78);
        boolean boolean81 = stackAr74.equals((java.lang.Object) (byte) -1);
        java.lang.Class<?> wildcardClass82 = stackAr74.getClass();
        boolean boolean83 = stackAr46.equals((java.lang.Object) stackAr74);
        boolean boolean84 = stackAr31.equals((java.lang.Object) boolean83);
        boolean boolean85 = stackAr1.equals((java.lang.Object) boolean83);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "[]");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[4]" + "'", str57, "[4]");
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + '4' + "'", obj58, '4');
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.String str8 = stackAr1.toString();
        java.lang.String str9 = stackAr1.toString();
        int int10 = stackAr1.size();
        java.lang.String str11 = stackAr1.toString();
        java.lang.String str12 = stackAr1.toString();
        boolean boolean13 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        java.lang.Object obj19 = new java.lang.Object();
        stackAr15.push(obj19);
        java.lang.String str21 = stackAr15.toString();
        boolean boolean22 = stackAr15.isEmpty();
        boolean boolean23 = stackAr15.isFull();
        java.lang.Object obj24 = stackAr15.top();
        java.lang.String str25 = stackAr15.toString();
        boolean boolean26 = stackAr15.isEmpty();
        boolean boolean27 = stackAr1.equals((java.lang.Object) stackAr15);
        int int28 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "[]" + "'", obj6, "[]");
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "[]" + "'", obj7, "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[[]]" + "'", str8, "[[]]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[[]]" + "'", str9, "[[]]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[[]]" + "'", str11, "[[]]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[[]]" + "'", str12, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        java.lang.Object[] objArray13 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) 'a', objArray13);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray13);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(100, objArray13);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray13);
        stackAr1.push((java.lang.Object) objArray13);
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        java.lang.String str21 = stackAr20.toString();
        boolean boolean23 = stackAr20.equals((java.lang.Object) 10L);
        boolean boolean24 = stackAr1.equals((java.lang.Object) 10L);
        java.lang.Object obj25 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean8 = stackAr7.isFull();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr10.isEmpty();
        boolean boolean12 = stackAr10.isEmpty();
        int int13 = stackAr10.size();
        int int14 = stackAr10.size();
        boolean boolean15 = stackAr7.equals((java.lang.Object) stackAr10);
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        int int17 = stackAr1.size();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr();
        int int19 = stackAr18.size();
        java.lang.Object[] objArray25 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean26 = org.autotest.StackAr.repOkFunction((int) 'a', objArray25);
        boolean boolean27 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray25);
        boolean boolean28 = stackAr18.equals((java.lang.Object) (byte) 10);
        java.lang.String str29 = stackAr18.toString();
        java.lang.String str30 = stackAr18.toString();
        java.lang.String str31 = stackAr18.toString();
        stackAr1.push((java.lang.Object) str31);
        java.lang.String str33 = stackAr1.toString();
        java.lang.String str34 = stackAr1.toString();
        int int35 = stackAr1.size();
        boolean boolean36 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[[]]" + "'", str33, "[[]]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[[]]" + "'", str34, "[[]]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.String str6 = stackAr1.toString();
        boolean boolean7 = stackAr1.isEmpty();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 100);
        boolean boolean13 = stackAr10.isEmpty();
        boolean boolean14 = stackAr10.isEmpty();
        boolean boolean15 = stackAr1.equals((java.lang.Object) stackAr10);
        java.lang.Object obj16 = null;
        boolean boolean17 = stackAr1.equals(obj16);
        boolean boolean18 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        boolean boolean16 = stackAr10.isFull();
        java.lang.String str17 = stackAr10.toString();
        stackAr10.push((java.lang.Object) (byte) 0);
        boolean boolean20 = stackAr10.isEmpty();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean25 = stackAr22.isFull();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        java.lang.Object obj31 = new java.lang.Object();
        stackAr27.push(obj31);
        boolean boolean33 = stackAr27.isFull();
        java.lang.String str34 = stackAr27.toString();
        stackAr27.push((java.lang.Object) (byte) 0);
        stackAr22.push((java.lang.Object) stackAr27);
        boolean boolean38 = stackAr27.isFull();
        java.lang.String str39 = stackAr27.toString();
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr41.isEmpty();
        int int43 = stackAr41.size();
        boolean boolean44 = stackAr41.isEmpty();
        boolean boolean46 = stackAr41.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr48 = new org.autotest.StackAr((int) '#');
        boolean boolean50 = stackAr48.equals((java.lang.Object) (byte) 1);
        boolean boolean51 = stackAr48.isFull();
        stackAr48.push((java.lang.Object) '4');
        stackAr41.push((java.lang.Object) stackAr48);
        boolean boolean55 = stackAr41.isEmpty();
        java.lang.String str56 = stackAr41.toString();
        int int57 = stackAr41.size();
        boolean boolean58 = stackAr41.isEmpty();
        boolean boolean59 = stackAr27.equals((java.lang.Object) boolean58);
        boolean boolean60 = stackAr10.equals((java.lang.Object) stackAr27);
        org.autotest.StackAr stackAr62 = new org.autotest.StackAr((int) '#');
        boolean boolean63 = stackAr62.isEmpty();
        int int64 = stackAr62.size();
        boolean boolean65 = stackAr62.isEmpty();
        boolean boolean67 = stackAr62.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr69 = new org.autotest.StackAr((int) '#');
        boolean boolean71 = stackAr69.equals((java.lang.Object) (byte) 1);
        boolean boolean72 = stackAr69.isFull();
        stackAr69.push((java.lang.Object) '4');
        stackAr62.push((java.lang.Object) stackAr69);
        boolean boolean76 = stackAr62.isEmpty();
        org.autotest.StackAr stackAr78 = new org.autotest.StackAr((int) '#');
        boolean boolean80 = stackAr78.equals((java.lang.Object) (byte) 1);
        boolean boolean81 = stackAr78.isFull();
        java.lang.Object obj82 = new java.lang.Object();
        stackAr78.push(obj82);
        boolean boolean84 = stackAr62.equals((java.lang.Object) stackAr78);
        java.lang.Object obj85 = stackAr78.pop();
        boolean boolean86 = stackAr78.isEmpty();
        boolean boolean87 = stackAr78.isFull();
        boolean boolean88 = stackAr27.equals((java.lang.Object) stackAr78);
        boolean boolean89 = stackAr1.equals((java.lang.Object) boolean88);
        boolean boolean90 = stackAr1.isEmpty();
        int int91 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[[4]]" + "'", str56, "[[4]]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) '4', objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        int int9 = stackAr1.size();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 1);
        boolean boolean17 = stackAr14.isFull();
        java.lang.String str18 = stackAr14.toString();
        java.lang.Object[] objArray26 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean27 = org.autotest.StackAr.repOkFunction((int) 'a', objArray26);
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray26);
        boolean boolean29 = org.autotest.StackAr.repOkFunction(100, objArray26);
        boolean boolean30 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray26);
        stackAr14.push((java.lang.Object) objArray26);
        boolean boolean32 = org.autotest.StackAr.repOkFunction(10, objArray26);
        boolean boolean33 = org.autotest.StackAr.repOkFunction(0, objArray26);
        boolean boolean34 = org.autotest.StackAr.repOkFunction((int) ' ', objArray26);
        boolean boolean35 = stackAr1.equals((java.lang.Object) boolean34);
        boolean boolean36 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        java.lang.String str14 = stackAr8.toString();
        java.lang.Object obj15 = stackAr8.top();
        stackAr1.push((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        boolean boolean22 = stackAr18.isFull();
        int int23 = stackAr18.size();
        java.lang.Class<?> wildcardClass24 = stackAr18.getClass();
        stackAr1.push((java.lang.Object) stackAr18);
        int int26 = stackAr1.size();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        stackAr28.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr34.equals((java.lang.Object) (byte) 1);
        boolean boolean37 = stackAr34.isFull();
        java.lang.String str38 = stackAr34.toString();
        java.lang.Object[] objArray46 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean47 = org.autotest.StackAr.repOkFunction((int) 'a', objArray46);
        boolean boolean48 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray46);
        boolean boolean49 = org.autotest.StackAr.repOkFunction(100, objArray46);
        boolean boolean50 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray46);
        stackAr34.push((java.lang.Object) objArray46);
        boolean boolean52 = stackAr28.equals((java.lang.Object) objArray46);
        java.lang.String str53 = stackAr28.toString();
        boolean boolean54 = stackAr28.isEmpty();
        java.lang.Object obj55 = stackAr28.pop();
        stackAr1.push((java.lang.Object) stackAr28);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[4]" + "'", str14, "[4]");
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '4' + "'", obj15, '4');
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[]" + "'", str38, "[]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[[]]" + "'", str53, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + "[]" + "'", obj55, "[]");
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.String str8 = stackAr1.toString();
        java.lang.String str9 = stackAr1.toString();
        int int10 = stackAr1.size();
        java.lang.String str11 = stackAr1.toString();
        java.lang.String str12 = stackAr1.toString();
        boolean boolean13 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        java.lang.Object obj19 = new java.lang.Object();
        stackAr15.push(obj19);
        java.lang.String str21 = stackAr15.toString();
        boolean boolean22 = stackAr15.isEmpty();
        boolean boolean23 = stackAr15.isFull();
        java.lang.Object obj24 = stackAr15.top();
        java.lang.String str25 = stackAr15.toString();
        boolean boolean26 = stackAr15.isEmpty();
        boolean boolean27 = stackAr1.equals((java.lang.Object) stackAr15);
        java.lang.Object obj28 = stackAr15.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "[]" + "'", obj6, "[]");
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "[]" + "'", obj7, "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[[]]" + "'", str8, "[[]]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[[]]" + "'", str9, "[[]]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[[]]" + "'", str11, "[[]]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[[]]" + "'", str12, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str9 = stackAr8.toString();
        boolean boolean10 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) 1);
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        boolean boolean20 = stackAr16.isFull();
        int int21 = stackAr16.size();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        boolean boolean25 = stackAr23.isEmpty();
        int int26 = stackAr23.size();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        stackAr28.push((java.lang.Object) "[]");
        java.lang.Object obj33 = stackAr28.pop();
        boolean boolean34 = stackAr23.equals((java.lang.Object) stackAr28);
        boolean boolean35 = stackAr16.equals((java.lang.Object) stackAr28);
        boolean boolean36 = stackAr16.isFull();
        boolean boolean37 = stackAr8.equals((java.lang.Object) boolean36);
        int int38 = stackAr8.size();
        java.lang.Object obj39 = null;
        // The following exception was thrown during execution in test generation
        try {
            stackAr8.push(obj39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "[]" + "'", obj33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        stackAr6.push((java.lang.Object) "[]");
        int int11 = stackAr6.size();
        java.lang.Object obj12 = stackAr6.top();
        java.lang.String str13 = stackAr6.toString();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr6);
        java.lang.String str15 = stackAr1.toString();
        java.lang.String str16 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "[]" + "'", obj12, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[[]]" + "'", str13, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isFull();
        int int13 = stackAr7.size();
        boolean boolean15 = stackAr7.equals((java.lang.Object) 'a');
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        java.lang.String str17 = stackAr1.toString();
        java.lang.String str18 = stackAr1.toString();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr20.isEmpty();
        boolean boolean23 = stackAr20.equals((java.lang.Object) '#');
        boolean boolean25 = stackAr20.equals((java.lang.Object) "hi!");
        boolean boolean26 = stackAr20.isFull();
        int int27 = stackAr20.size();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean30 = stackAr29.isFull();
        boolean boolean31 = stackAr20.equals((java.lang.Object) stackAr29);
        stackAr1.push((java.lang.Object) boolean31);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[]" + "'", str18, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.String str18 = stackAr6.toString();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr20.isEmpty();
        int int22 = stackAr20.size();
        boolean boolean23 = stackAr20.isEmpty();
        boolean boolean25 = stackAr20.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        stackAr27.push((java.lang.Object) '4');
        stackAr20.push((java.lang.Object) stackAr27);
        boolean boolean34 = stackAr20.isEmpty();
        java.lang.String str35 = stackAr20.toString();
        int int36 = stackAr20.size();
        boolean boolean37 = stackAr20.isEmpty();
        boolean boolean38 = stackAr6.equals((java.lang.Object) boolean37);
        java.lang.String str39 = stackAr6.toString();
        java.lang.Object obj40 = stackAr6.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[[4]]" + "'", str35, "[[4]]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + obj40 + "' != '" + (byte) 0 + "'", obj40, (byte) 0);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object obj13 = stackAr1.top();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        java.lang.String str16 = stackAr15.toString();
        stackAr1.push((java.lang.Object) stackAr15);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean25 = stackAr24.isEmpty();
        stackAr19.push((java.lang.Object) stackAr24);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str29 = stackAr28.toString();
        boolean boolean30 = stackAr28.isFull();
        stackAr28.push((java.lang.Object) 1);
        boolean boolean33 = stackAr28.isEmpty();
        stackAr24.push((java.lang.Object) boolean33);
        java.lang.Object obj35 = stackAr24.top();
        java.lang.Object obj36 = stackAr24.top();
        int int37 = stackAr24.size();
        stackAr1.push((java.lang.Object) int37);
        int int39 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[]" + "'", str29, "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + false + "'", obj35, false);
        org.junit.Assert.assertEquals("'" + obj36 + "' != '" + false + "'", obj36, false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.Object obj12 = stackAr1.pop();
        int int13 = stackAr1.size();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr15.isEmpty();
        int int17 = stackAr15.size();
        boolean boolean18 = stackAr15.isFull();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        java.lang.Object obj24 = new java.lang.Object();
        stackAr20.push(obj24);
        boolean boolean26 = stackAr20.isFull();
        java.lang.String str27 = stackAr20.toString();
        stackAr20.push((java.lang.Object) (byte) 0);
        stackAr15.push((java.lang.Object) stackAr20);
        boolean boolean31 = stackAr20.isFull();
        java.lang.Object[] objArray37 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean38 = org.autotest.StackAr.repOkFunction((int) 'a', objArray37);
        boolean boolean39 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray37);
        stackAr20.push((java.lang.Object) boolean39);
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr42.equals((java.lang.Object) (byte) 100);
        boolean boolean45 = stackAr42.isEmpty();
        stackAr42.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr49 = new org.autotest.StackAr((int) '#');
        boolean boolean51 = stackAr49.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean55 = stackAr53.equals((java.lang.Object) (byte) 1);
        boolean boolean56 = stackAr53.isFull();
        java.lang.Object obj57 = new java.lang.Object();
        stackAr53.push(obj57);
        stackAr49.push((java.lang.Object) stackAr53);
        int int60 = stackAr49.size();
        stackAr42.push((java.lang.Object) stackAr49);
        boolean boolean62 = stackAr20.equals((java.lang.Object) stackAr42);
        java.lang.String str63 = stackAr20.toString();
        org.autotest.StackAr stackAr65 = new org.autotest.StackAr((int) '#');
        boolean boolean67 = stackAr65.equals((java.lang.Object) (byte) 1);
        boolean boolean68 = stackAr65.isFull();
        stackAr65.push((java.lang.Object) '4');
        java.lang.Object obj71 = null;
        boolean boolean72 = stackAr65.equals(obj71);
        boolean boolean73 = stackAr65.isEmpty();
        java.lang.String str74 = stackAr65.toString();
        boolean boolean75 = stackAr20.equals((java.lang.Object) stackAr65);
        java.lang.Object obj76 = stackAr20.top();
        boolean boolean77 = stackAr1.equals(obj76);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[4]" + "'", str74, "[4]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + obj76 + "' != '" + false + "'", obj76, false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
        int int10 = stackAr9.size();
        java.lang.Object[] objArray16 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) 'a', objArray16);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray16);
        boolean boolean19 = stackAr9.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        java.lang.Object obj25 = new java.lang.Object();
        stackAr21.push(obj25);
        boolean boolean28 = stackAr21.equals((java.lang.Object) (byte) -1);
        boolean boolean29 = stackAr9.equals((java.lang.Object) boolean28);
        boolean boolean30 = stackAr9.isFull();
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr32.isEmpty();
        int int34 = stackAr32.size();
        stackAr32.push((java.lang.Object) (byte) 100);
        stackAr9.push((java.lang.Object) (byte) 100);
        java.lang.String str38 = stackAr9.toString();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr();
        int int40 = stackAr39.size();
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr(1);
        boolean boolean43 = stackAr42.isFull();
        stackAr39.push((java.lang.Object) boolean43);
        boolean boolean45 = stackAr9.equals((java.lang.Object) stackAr39);
        boolean boolean46 = stackAr39.isEmpty();
        stackAr1.push((java.lang.Object) stackAr39);
        java.lang.Class<?> wildcardClass48 = stackAr39.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[100]" + "'", str38, "[100]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        java.lang.String str2 = stackAr1.toString();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        int int6 = stackAr4.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        boolean boolean12 = stackAr8.isFull();
        int int13 = stackAr8.size();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        stackAr15.push((java.lang.Object) "[]");
        stackAr8.push((java.lang.Object) stackAr15);
        java.lang.Object obj21 = stackAr15.pop();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean24 = stackAr23.isFull();
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr26.isEmpty();
        boolean boolean28 = stackAr26.isEmpty();
        int int29 = stackAr26.size();
        int int30 = stackAr26.size();
        boolean boolean31 = stackAr23.equals((java.lang.Object) stackAr26);
        boolean boolean32 = stackAr15.equals((java.lang.Object) boolean31);
        boolean boolean33 = stackAr4.equals((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr15);
        java.lang.Object obj35 = stackAr1.top();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        java.lang.String str40 = stackAr37.toString();
        boolean boolean41 = stackAr37.isEmpty();
        boolean boolean42 = stackAr37.isFull();
        java.lang.Object[] objArray50 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean51 = org.autotest.StackAr.repOkFunction((int) 'a', objArray50);
        boolean boolean52 = org.autotest.StackAr.repOkFunction(100, objArray50);
        boolean boolean53 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray50);
        boolean boolean54 = org.autotest.StackAr.repOkFunction(1, objArray50);
        stackAr37.push((java.lang.Object) boolean54);
        boolean boolean56 = stackAr1.equals((java.lang.Object) stackAr37);
        java.lang.String str57 = stackAr37.toString();
        java.lang.String str58 = stackAr37.toString();
        java.lang.Object obj59 = stackAr37.top();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "[]" + "'", obj21, "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[false]" + "'", str57, "[false]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[false]" + "'", str58, "[false]");
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + false + "'", obj59, false);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        java.lang.String str9 = stackAr8.toString();
        boolean boolean11 = stackAr8.equals((java.lang.Object) 10L);
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr8);
        int int13 = stackAr8.size();
        int int14 = stackAr8.size();
        boolean boolean15 = stackAr8.isFull();
        java.lang.String str16 = stackAr8.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        int int11 = stackAr1.size();
        java.lang.String str12 = stackAr1.toString();
        int int13 = stackAr1.size();
        int int14 = stackAr1.size();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr16.isEmpty();
        boolean boolean18 = stackAr16.isEmpty();
        boolean boolean19 = stackAr16.isFull();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        stackAr21.push((java.lang.Object) '4');
        java.lang.String str27 = stackAr21.toString();
        java.lang.Object obj28 = stackAr21.top();
        boolean boolean29 = stackAr21.isEmpty();
        boolean boolean30 = stackAr16.equals((java.lang.Object) boolean29);
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean34 = stackAr32.equals((java.lang.Object) (byte) 1);
        boolean boolean35 = stackAr32.isFull();
        java.lang.Object obj36 = new java.lang.Object();
        stackAr32.push(obj36);
        boolean boolean39 = stackAr32.equals((java.lang.Object) (byte) -1);
        int int40 = stackAr32.size();
        java.lang.Object obj41 = stackAr32.top();
        boolean boolean42 = stackAr16.equals((java.lang.Object) stackAr32);
        boolean boolean43 = stackAr16.isFull();
        boolean boolean44 = stackAr1.equals((java.lang.Object) boolean43);
        java.lang.Object obj45 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4]" + "'", str27, "[4]");
        org.junit.Assert.assertEquals("'" + obj28 + "' != '" + '4' + "'", obj28, '4');
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + obj45 + "' != '" + (byte) 0 + "'", obj45, (byte) 0);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        int int10 = stackAr1.size();
        java.lang.String str11 = stackAr1.toString();
        boolean boolean12 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[0]" + "'", str11, "[0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        stackAr12.push((java.lang.Object) "[]");
        java.lang.Object obj17 = stackAr12.top();
        java.lang.Object obj18 = stackAr12.top();
        java.lang.String str19 = stackAr12.toString();
        java.lang.String str20 = stackAr12.toString();
        int int21 = stackAr12.size();
        java.lang.String str22 = stackAr12.toString();
        boolean boolean23 = stackAr1.equals((java.lang.Object) str22);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
        int int25 = stackAr24.size();
        java.lang.Object[] objArray31 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) 'a', objArray31);
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray31);
        boolean boolean34 = stackAr24.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 1);
        boolean boolean39 = stackAr36.isFull();
        java.lang.Object obj40 = new java.lang.Object();
        stackAr36.push(obj40);
        boolean boolean43 = stackAr36.equals((java.lang.Object) (byte) -1);
        boolean boolean44 = stackAr24.equals((java.lang.Object) boolean43);
        boolean boolean45 = stackAr24.isFull();
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr47.isEmpty();
        int int49 = stackAr47.size();
        stackAr47.push((java.lang.Object) (byte) 100);
        stackAr24.push((java.lang.Object) (byte) 100);
        stackAr24.push((java.lang.Object) 10.0f);
        java.lang.Object obj55 = stackAr24.top();
        stackAr1.push(obj55);
        org.autotest.StackAr stackAr58 = new org.autotest.StackAr((int) '#');
        boolean boolean59 = stackAr58.isEmpty();
        int int60 = stackAr58.size();
        boolean boolean61 = stackAr58.isEmpty();
        boolean boolean63 = stackAr58.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr65 = new org.autotest.StackAr((int) '#');
        boolean boolean67 = stackAr65.equals((java.lang.Object) (byte) 1);
        boolean boolean68 = stackAr65.isFull();
        stackAr65.push((java.lang.Object) '4');
        stackAr58.push((java.lang.Object) stackAr65);
        java.lang.String str72 = stackAr58.toString();
        java.lang.Object obj73 = stackAr58.pop();
        boolean boolean74 = stackAr58.isFull();
        boolean boolean75 = stackAr1.equals((java.lang.Object) stackAr58);
        java.lang.Object obj76 = null;
        stackAr1.push(obj76);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "[]" + "'", obj17, "[]");
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + "[]" + "'", obj18, "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[[]]" + "'", str19, "[[]]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[[]]" + "'", str20, "[[]]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[[]]" + "'", str22, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + 10.0f + "'", obj55, 10.0f);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[[4]]" + "'", str72, "[[4]]");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "[4]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str9 = stackAr8.toString();
        boolean boolean10 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) 1);
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr8.top();
        java.lang.Object obj16 = stackAr8.pop();
        boolean boolean17 = stackAr8.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj18 = stackAr8.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + 1 + "'", obj15, 1);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + 1 + "'", obj16, 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        java.lang.String str11 = stackAr0.toString();
        java.lang.String str12 = stackAr0.toString();
        java.lang.Class<?> wildcardClass13 = stackAr0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.String str12 = stackAr5.toString();
        java.lang.Object obj13 = stackAr5.pop();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 1);
        boolean boolean16 = stackAr13.isFull();
        stackAr13.push((java.lang.Object) '4');
        boolean boolean20 = stackAr13.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        boolean boolean26 = stackAr22.isFull();
        int int27 = stackAr22.size();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        stackAr29.push((java.lang.Object) "[]");
        stackAr22.push((java.lang.Object) stackAr29);
        boolean boolean35 = stackAr13.equals((java.lang.Object) stackAr29);
        java.lang.Class<?> wildcardClass36 = stackAr29.getClass();
        boolean boolean37 = stackAr1.equals((java.lang.Object) wildcardClass36);
        boolean boolean38 = stackAr1.isEmpty();
        boolean boolean39 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        java.lang.String str4 = stackAr1.toString();
        boolean boolean5 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '4');
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        java.lang.String str10 = stackAr9.toString();
        boolean boolean11 = stackAr7.equals((java.lang.Object) str10);
        stackAr1.push((java.lang.Object) stackAr7);
        boolean boolean13 = stackAr7.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(0, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(100, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isFull();
        int int13 = stackAr7.size();
        boolean boolean15 = stackAr7.equals((java.lang.Object) 'a');
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        java.lang.String str17 = stackAr1.toString();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        int int21 = stackAr19.size();
        boolean boolean22 = stackAr19.isEmpty();
        java.lang.Object[] objArray25 = new java.lang.Object[] { 1.0d };
        boolean boolean26 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray25);
        java.lang.Class<?> wildcardClass27 = objArray25.getClass();
        boolean boolean28 = stackAr19.equals((java.lang.Object) wildcardClass27);
        boolean boolean29 = stackAr1.equals((java.lang.Object) stackAr19);
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr31.equals((java.lang.Object) (byte) 1);
        boolean boolean34 = stackAr31.isFull();
        stackAr31.push((java.lang.Object) '4');
        boolean boolean38 = stackAr31.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr40.equals((java.lang.Object) (byte) 1);
        boolean boolean43 = stackAr40.isFull();
        boolean boolean44 = stackAr40.isFull();
        int int45 = stackAr40.size();
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean49 = stackAr47.equals((java.lang.Object) (byte) 1);
        stackAr47.push((java.lang.Object) "[]");
        stackAr40.push((java.lang.Object) stackAr47);
        boolean boolean53 = stackAr31.equals((java.lang.Object) stackAr47);
        org.autotest.StackAr stackAr55 = new org.autotest.StackAr((int) '#');
        boolean boolean56 = stackAr55.isEmpty();
        int int57 = stackAr55.size();
        boolean boolean58 = stackAr55.isEmpty();
        boolean boolean60 = stackAr55.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr62 = new org.autotest.StackAr((int) '#');
        boolean boolean64 = stackAr62.equals((java.lang.Object) (byte) 1);
        boolean boolean65 = stackAr62.isFull();
        stackAr62.push((java.lang.Object) '4');
        stackAr55.push((java.lang.Object) stackAr62);
        boolean boolean69 = stackAr55.isFull();
        boolean boolean70 = stackAr55.isEmpty();
        boolean boolean71 = stackAr55.isEmpty();
        java.lang.Class<?> wildcardClass72 = stackAr55.getClass();
        stackAr31.push((java.lang.Object) stackAr55);
        stackAr1.push((java.lang.Object) stackAr55);
        java.lang.String str75 = stackAr55.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[[4]]" + "'", str75, "[[4]]");
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        java.lang.String str10 = stackAr7.toString();
        stackAr1.push((java.lang.Object) stackAr7);
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass13 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 100);
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr9);
        boolean boolean13 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr15.isEmpty();
        int int17 = stackAr15.size();
        boolean boolean18 = stackAr15.isEmpty();
        boolean boolean20 = stackAr15.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        stackAr22.push((java.lang.Object) '4');
        stackAr15.push((java.lang.Object) stackAr22);
        boolean boolean29 = stackAr15.isEmpty();
        java.lang.String str30 = stackAr15.toString();
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr(0);
        int int33 = stackAr32.size();
        boolean boolean34 = stackAr15.equals((java.lang.Object) stackAr32);
        stackAr1.push((java.lang.Object) stackAr15);
        java.lang.String str36 = stackAr1.toString();
        java.lang.Class<?> wildcardClass37 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[[4]]" + "'", str30, "[[4]]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[[[4]]]" + "'", str36, "[[[4]]]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isFull();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isEmpty();
        boolean boolean21 = stackAr17.isEmpty();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        stackAr1.push((java.lang.Object) int23);
        boolean boolean25 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        boolean boolean31 = stackAr27.isFull();
        int int32 = stackAr27.size();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        boolean boolean36 = stackAr34.isEmpty();
        int int37 = stackAr34.size();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        stackAr39.push((java.lang.Object) "[]");
        java.lang.Object obj44 = stackAr39.pop();
        boolean boolean45 = stackAr34.equals((java.lang.Object) stackAr39);
        boolean boolean46 = stackAr27.equals((java.lang.Object) stackAr39);
        stackAr1.push((java.lang.Object) stackAr39);
        java.lang.Object obj48 = stackAr1.pop();
        boolean boolean49 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + obj44 + "' != '" + "[]" + "'", obj44, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        java.lang.String str4 = stackAr1.toString();
        boolean boolean5 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '4');
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        java.lang.String str10 = stackAr9.toString();
        boolean boolean11 = stackAr7.equals((java.lang.Object) str10);
        stackAr1.push((java.lang.Object) stackAr7);
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 1);
        boolean boolean17 = stackAr14.isFull();
        stackAr14.push((java.lang.Object) '4');
        java.lang.String str20 = stackAr14.toString();
        java.lang.String str21 = stackAr14.toString();
        java.lang.Object obj22 = stackAr14.top();
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr14);
        int int24 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[4]" + "'", str20, "[4]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[4]" + "'", str21, "[4]");
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + '4' + "'", obj22, '4');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr(0);
        int int2 = stackAr1.size();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        int int6 = stackAr4.size();
        boolean boolean7 = stackAr4.isEmpty();
        boolean boolean9 = stackAr4.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr11.equals((java.lang.Object) (byte) 1);
        boolean boolean14 = stackAr11.isFull();
        stackAr11.push((java.lang.Object) '4');
        stackAr4.push((java.lang.Object) stackAr11);
        boolean boolean18 = stackAr4.isFull();
        boolean boolean20 = stackAr4.equals((java.lang.Object) 100.0d);
        boolean boolean21 = stackAr1.equals((java.lang.Object) 100.0d);
        int int22 = stackAr1.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        java.lang.String str21 = stackAr0.toString();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        boolean boolean25 = stackAr23.isEmpty();
        int int26 = stackAr23.size();
        boolean boolean27 = stackAr0.equals((java.lang.Object) int26);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        java.lang.Object[] objArray13 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) 'a', objArray13);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray13);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(100, objArray13);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray13);
        stackAr1.push((java.lang.Object) objArray13);
        java.lang.String str19 = stackAr1.toString();
        boolean boolean20 = stackAr1.isFull();
        int int21 = stackAr1.size();
        boolean boolean22 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        int int6 = stackAr4.size();
        boolean boolean7 = stackAr4.isEmpty();
        boolean boolean9 = stackAr4.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr11.equals((java.lang.Object) (byte) 1);
        boolean boolean14 = stackAr11.isFull();
        stackAr11.push((java.lang.Object) '4');
        stackAr4.push((java.lang.Object) stackAr11);
        java.lang.Object obj18 = stackAr4.pop();
        stackAr1.push(obj18);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "[4]");
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr(1);
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        boolean boolean4 = stackAr3.isEmpty();
        boolean boolean6 = stackAr3.equals((java.lang.Object) '#');
        boolean boolean8 = stackAr3.equals((java.lang.Object) "hi!");
        boolean boolean9 = stackAr3.isFull();
        int int10 = stackAr3.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean13 = stackAr12.isFull();
        boolean boolean14 = stackAr3.equals((java.lang.Object) stackAr12);
        boolean boolean15 = stackAr3.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        java.lang.Object obj26 = new java.lang.Object();
        stackAr22.push(obj26);
        boolean boolean28 = stackAr22.isFull();
        java.lang.String str29 = stackAr22.toString();
        stackAr22.push((java.lang.Object) (byte) 0);
        stackAr17.push((java.lang.Object) stackAr22);
        boolean boolean33 = stackAr22.isFull();
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        boolean boolean38 = stackAr35.isFull();
        java.lang.Object obj39 = new java.lang.Object();
        stackAr35.push(obj39);
        java.lang.String str41 = stackAr35.toString();
        boolean boolean42 = stackAr35.isEmpty();
        boolean boolean43 = stackAr35.isFull();
        stackAr22.push((java.lang.Object) boolean43);
        boolean boolean45 = stackAr22.isFull();
        java.lang.Class<?> wildcardClass46 = stackAr22.getClass();
        stackAr3.push((java.lang.Object) wildcardClass46);
        org.autotest.StackAr stackAr49 = new org.autotest.StackAr((int) '#');
        boolean boolean51 = stackAr49.equals((java.lang.Object) (byte) 1);
        boolean boolean52 = stackAr49.isFull();
        stackAr49.push((java.lang.Object) '4');
        java.lang.String str55 = stackAr49.toString();
        java.lang.Object obj56 = stackAr49.top();
        boolean boolean57 = stackAr3.equals((java.lang.Object) stackAr49);
        stackAr1.push((java.lang.Object) stackAr3);
        org.autotest.StackAr stackAr60 = new org.autotest.StackAr((int) '#');
        boolean boolean62 = stackAr60.equals((java.lang.Object) (byte) 1);
        boolean boolean63 = stackAr60.isFull();
        stackAr60.push((java.lang.Object) '4');
        boolean boolean67 = stackAr60.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr69 = new org.autotest.StackAr((int) '#');
        boolean boolean71 = stackAr69.equals((java.lang.Object) (byte) 1);
        boolean boolean72 = stackAr69.isFull();
        boolean boolean73 = stackAr69.isFull();
        int int74 = stackAr69.size();
        org.autotest.StackAr stackAr76 = new org.autotest.StackAr((int) '#');
        boolean boolean78 = stackAr76.equals((java.lang.Object) (byte) 1);
        stackAr76.push((java.lang.Object) "[]");
        stackAr69.push((java.lang.Object) stackAr76);
        boolean boolean82 = stackAr60.equals((java.lang.Object) stackAr76);
        boolean boolean83 = stackAr76.isFull();
        boolean boolean84 = stackAr76.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[4]" + "'", str55, "[4]");
        org.junit.Assert.assertEquals("'" + obj56 + "' != '" + '4' + "'", obj56, '4');
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr5.isFull();
        int int13 = stackAr5.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        java.lang.String str29 = stackAr0.toString();
        int int30 = stackAr0.size();
        java.lang.Object obj31 = null;
        stackAr0.push(obj31);
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        int int36 = stackAr34.size();
        boolean boolean38 = stackAr34.equals((java.lang.Object) 100L);
        boolean boolean39 = stackAr34.isFull();
        java.lang.String str40 = stackAr34.toString();
        stackAr0.push((java.lang.Object) stackAr34);
        java.lang.String str42 = stackAr34.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100]" + "'", str29, "[100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[]" + "'", str42, "[]");
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        stackAr8.push((java.lang.Object) stackAr12);
        int int19 = stackAr8.size();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj21 = stackAr1.pop();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        boolean boolean27 = stackAr23.isFull();
        boolean boolean28 = stackAr23.isFull();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str31 = stackAr30.toString();
        boolean boolean32 = stackAr30.isFull();
        stackAr30.push((java.lang.Object) 1);
        boolean boolean35 = stackAr30.isEmpty();
        boolean boolean36 = stackAr23.equals((java.lang.Object) stackAr30);
        java.lang.Object obj37 = stackAr30.top();
        java.lang.Object obj38 = stackAr30.pop();
        stackAr1.push(obj38);
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean43 = stackAr41.equals((java.lang.Object) (byte) 1);
        boolean boolean44 = stackAr41.isFull();
        stackAr41.push((java.lang.Object) '4');
        java.lang.String str47 = stackAr41.toString();
        java.lang.Object obj48 = stackAr41.pop();
        stackAr1.push(obj48);
        java.lang.Class<?> wildcardClass50 = obj48.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + 1 + "'", obj37, 1);
        org.junit.Assert.assertEquals("'" + obj38 + "' != '" + 1 + "'", obj38, 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[4]" + "'", str47, "[4]");
        org.junit.Assert.assertEquals("'" + obj48 + "' != '" + '4' + "'", obj48, '4');
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        java.lang.String str11 = stackAr7.toString();
        java.lang.Object[] objArray19 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) 'a', objArray19);
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray19);
        boolean boolean22 = org.autotest.StackAr.repOkFunction(100, objArray19);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray19);
        stackAr7.push((java.lang.Object) objArray19);
        boolean boolean25 = stackAr1.equals((java.lang.Object) objArray19);
        java.lang.String str26 = stackAr1.toString();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr28.isEmpty();
        int int30 = stackAr28.size();
        boolean boolean31 = stackAr28.isEmpty();
        stackAr28.push((java.lang.Object) (short) 0);
        int int34 = stackAr28.size();
        boolean boolean35 = stackAr28.isEmpty();
        boolean boolean36 = stackAr28.isFull();
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr38.isEmpty();
        boolean boolean40 = stackAr38.isEmpty();
        int int41 = stackAr38.size();
        boolean boolean42 = stackAr38.isFull();
        boolean boolean43 = stackAr38.isEmpty();
        int int44 = stackAr38.size();
        stackAr28.push((java.lang.Object) stackAr38);
        java.lang.Object obj46 = stackAr28.top();
        stackAr1.push((java.lang.Object) stackAr28);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[[]]" + "'", str26, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "[]");
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        java.lang.String str16 = stackAr1.toString();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr(0);
        int int19 = stackAr18.size();
        boolean boolean20 = stackAr1.equals((java.lang.Object) stackAr18);
        int int21 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[[4]]" + "'", str16, "[[4]]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str9 = stackAr8.toString();
        boolean boolean10 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) 1);
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr8.top();
        java.lang.String str16 = stackAr8.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + 1 + "'", obj15, 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1]" + "'", str16, "[1]");
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        java.lang.Object[] objArray13 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) 'a', objArray13);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray13);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(100, objArray13);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray13);
        stackAr1.push((java.lang.Object) objArray13);
        java.lang.String str19 = stackAr1.toString();
        boolean boolean20 = stackAr1.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        stackAr22.push((java.lang.Object) "[]");
        int int27 = stackAr22.size();
        boolean boolean29 = stackAr22.equals((java.lang.Object) 'a');
        int int30 = stackAr22.size();
        int int31 = stackAr22.size();
        java.lang.Object obj32 = stackAr22.pop();
        stackAr1.push((java.lang.Object) stackAr22);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr35.isEmpty();
        int int37 = stackAr35.size();
        boolean boolean39 = stackAr35.equals((java.lang.Object) 100L);
        boolean boolean40 = stackAr35.isFull();
        boolean boolean41 = stackAr35.isFull();
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 1);
        stackAr43.push((java.lang.Object) "[]");
        int int48 = stackAr43.size();
        boolean boolean50 = stackAr43.equals((java.lang.Object) 'a');
        boolean boolean51 = stackAr35.equals((java.lang.Object) boolean50);
        boolean boolean52 = stackAr35.isEmpty();
        stackAr22.push((java.lang.Object) boolean52);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + "[]" + "'", obj32, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str9 = stackAr8.toString();
        boolean boolean10 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) 1);
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr8);
        java.lang.Class<?> wildcardClass15 = stackAr8.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        int int9 = stackAr1.size();
        boolean boolean10 = stackAr1.isFull();
        int int11 = stackAr1.size();
        java.lang.String str12 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        java.lang.String str4 = stackAr1.toString();
        boolean boolean5 = stackAr1.isEmpty();
        int int6 = stackAr1.size();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isFull();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 1);
        boolean boolean17 = stackAr14.isFull();
        java.lang.Object obj18 = new java.lang.Object();
        stackAr14.push(obj18);
        boolean boolean20 = stackAr14.isFull();
        java.lang.String str21 = stackAr14.toString();
        stackAr14.push((java.lang.Object) (byte) 0);
        stackAr9.push((java.lang.Object) stackAr14);
        boolean boolean25 = stackAr14.isFull();
        java.lang.Object[] objArray31 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) 'a', objArray31);
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray31);
        stackAr14.push((java.lang.Object) boolean33);
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 100);
        boolean boolean39 = stackAr36.isEmpty();
        stackAr36.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean49 = stackAr47.equals((java.lang.Object) (byte) 1);
        boolean boolean50 = stackAr47.isFull();
        java.lang.Object obj51 = new java.lang.Object();
        stackAr47.push(obj51);
        stackAr43.push((java.lang.Object) stackAr47);
        int int54 = stackAr43.size();
        stackAr36.push((java.lang.Object) stackAr43);
        boolean boolean56 = stackAr14.equals((java.lang.Object) stackAr36);
        java.lang.String str57 = stackAr14.toString();
        org.autotest.StackAr stackAr59 = new org.autotest.StackAr((int) '#');
        boolean boolean61 = stackAr59.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) '#');
        boolean boolean64 = stackAr63.isEmpty();
        int int65 = stackAr63.size();
        boolean boolean67 = stackAr63.equals((java.lang.Object) 100L);
        boolean boolean68 = stackAr63.isFull();
        stackAr59.push((java.lang.Object) stackAr63);
        boolean boolean70 = stackAr59.isEmpty();
        java.lang.Object obj71 = stackAr59.top();
        java.lang.Object obj72 = stackAr59.top();
        stackAr14.push((java.lang.Object) stackAr59);
        stackAr1.push((java.lang.Object) stackAr59);
        java.lang.String str75 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "[]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "[[[]]]" + "'", str75, "[[[]]]");
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr(10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj2 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr1.pop();
        java.lang.String str16 = stackAr1.toString();
        boolean boolean17 = stackAr1.isFull();
        boolean boolean18 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        java.lang.Object obj24 = new java.lang.Object();
        stackAr20.push(obj24);
        boolean boolean26 = stackAr20.isFull();
        java.lang.Object obj27 = null;
        stackAr20.push(obj27);
        boolean boolean29 = stackAr20.isFull();
        stackAr20.push((java.lang.Object) "[a]");
        stackAr1.push((java.lang.Object) "[a]");
        boolean boolean33 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean8 = stackAr1.equals((java.lang.Object) (byte) -1);
        int int9 = stackAr1.size();
        boolean boolean10 = stackAr1.isFull();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr12.isEmpty();
        int int14 = stackAr12.size();
        boolean boolean15 = stackAr12.isEmpty();
        boolean boolean17 = stackAr12.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        stackAr19.push((java.lang.Object) '4');
        stackAr12.push((java.lang.Object) stackAr19);
        boolean boolean26 = stackAr12.isEmpty();
        boolean boolean27 = stackAr12.isFull();
        stackAr1.push((java.lang.Object) stackAr12);
        java.lang.Object obj29 = stackAr1.top();
        java.lang.Object obj30 = stackAr1.top();
        java.lang.Class<?> wildcardClass31 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "[[4]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "[[4]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "[[4]]");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "[[4]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "[[4]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "[[4]]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr1.pop();
        boolean boolean16 = stackAr1.isFull();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean21 = stackAr18.isEmpty();
        boolean boolean23 = stackAr18.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        stackAr25.push((java.lang.Object) '4');
        stackAr18.push((java.lang.Object) stackAr25);
        java.lang.String str32 = stackAr25.toString();
        java.lang.Object obj33 = stackAr25.pop();
        stackAr1.push((java.lang.Object) stackAr25);
        int int35 = stackAr25.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[4]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[4]" + "'", str32, "[4]");
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + '4' + "'", obj33, '4');
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr((int) '#');
        boolean boolean4 = stackAr2.equals((java.lang.Object) (byte) 100);
        boolean boolean5 = stackAr2.isEmpty();
        boolean boolean6 = stackAr2.isEmpty();
        boolean boolean7 = stackAr0.equals((java.lang.Object) stackAr2);
        boolean boolean8 = stackAr0.isFull();
        int int9 = stackAr0.size();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr5.isFull();
        java.lang.String str13 = stackAr5.toString();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr();
        int int15 = stackAr14.size();
        java.lang.Object[] objArray21 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean22 = org.autotest.StackAr.repOkFunction((int) 'a', objArray21);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray21);
        boolean boolean24 = stackAr14.equals((java.lang.Object) (byte) 10);
        java.lang.String str25 = stackAr14.toString();
        boolean boolean26 = stackAr5.equals((java.lang.Object) stackAr14);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) 'a');
        java.lang.String str10 = stackAr1.toString();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        java.lang.String str13 = stackAr12.toString();
        boolean boolean15 = stackAr12.equals((java.lang.Object) 10L);
        stackAr1.push((java.lang.Object) boolean15);
        boolean boolean17 = stackAr1.isFull();
        java.lang.String str18 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[false]" + "'", str18, "[false]");
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        stackAr6.push((java.lang.Object) boolean25);
        boolean boolean27 = stackAr6.isEmpty();
        java.lang.Object obj28 = stackAr6.pop();
        int int29 = stackAr6.size();
        java.lang.Object obj30 = stackAr6.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + obj28 + "' != '" + false + "'", obj28, false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + (byte) 0 + "'", obj30, (byte) 0);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        int int12 = stackAr1.size();
        int int13 = stackAr1.size();
        boolean boolean14 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        java.lang.Object obj7 = null;
        boolean boolean8 = stackAr1.equals(obj7);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction(100, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(2, objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) '4', objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        java.lang.String str11 = stackAr5.toString();
        boolean boolean12 = stackAr5.isEmpty();
        boolean boolean13 = stackAr5.isFull();
        java.lang.Object obj14 = stackAr5.top();
        java.lang.String str15 = stackAr5.toString();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean17 = stackAr1.isEmpty();
        int int18 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray4 = new java.lang.Object[] { 1.0d };
        boolean boolean5 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray4);
        java.lang.Class<?> wildcardClass6 = objArray4.getClass();
        boolean boolean7 = stackAr0.equals((java.lang.Object) objArray4);
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr13.isEmpty();
        int int15 = stackAr13.size();
        boolean boolean17 = stackAr13.equals((java.lang.Object) 100L);
        boolean boolean18 = stackAr13.isFull();
        stackAr9.push((java.lang.Object) stackAr13);
        boolean boolean20 = stackAr9.isEmpty();
        java.lang.Object obj21 = stackAr9.top();
        stackAr0.push((java.lang.Object) stackAr9);
        java.lang.Object obj23 = stackAr0.top();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "[]");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "[[]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "[[]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "[[]]");
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr(4);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str23 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isFull();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        boolean boolean25 = stackAr19.isFull();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        java.lang.Object obj31 = new java.lang.Object();
        stackAr27.push(obj31);
        boolean boolean33 = stackAr27.isFull();
        java.lang.String str34 = stackAr27.toString();
        boolean boolean35 = stackAr19.equals((java.lang.Object) str34);
        boolean boolean36 = stackAr19.isEmpty();
        java.lang.String str37 = stackAr19.toString();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        java.lang.String str40 = stackAr39.toString();
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int) '#');
        boolean boolean43 = stackAr42.isEmpty();
        int int44 = stackAr42.size();
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        boolean boolean50 = stackAr46.isFull();
        int int51 = stackAr46.size();
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean55 = stackAr53.equals((java.lang.Object) (byte) 1);
        stackAr53.push((java.lang.Object) "[]");
        stackAr46.push((java.lang.Object) stackAr53);
        java.lang.Object obj59 = stackAr53.pop();
        org.autotest.StackAr stackAr61 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean62 = stackAr61.isFull();
        org.autotest.StackAr stackAr64 = new org.autotest.StackAr((int) '#');
        boolean boolean65 = stackAr64.isEmpty();
        boolean boolean66 = stackAr64.isEmpty();
        int int67 = stackAr64.size();
        int int68 = stackAr64.size();
        boolean boolean69 = stackAr61.equals((java.lang.Object) stackAr64);
        boolean boolean70 = stackAr53.equals((java.lang.Object) boolean69);
        boolean boolean71 = stackAr42.equals((java.lang.Object) stackAr53);
        stackAr39.push((java.lang.Object) stackAr53);
        stackAr19.push((java.lang.Object) stackAr39);
        boolean boolean74 = stackAr1.equals((java.lang.Object) stackAr39);
        org.autotest.StackAr stackAr76 = new org.autotest.StackAr((int) '#');
        boolean boolean78 = stackAr76.equals((java.lang.Object) (byte) 1);
        boolean boolean79 = stackAr76.isFull();
        java.lang.Object obj80 = new java.lang.Object();
        stackAr76.push(obj80);
        boolean boolean82 = stackAr76.isFull();
        java.lang.String str83 = stackAr76.toString();
        java.lang.Object obj84 = stackAr76.top();
        org.autotest.StackAr stackAr86 = new org.autotest.StackAr((int) '#');
        java.lang.String str87 = stackAr86.toString();
        boolean boolean88 = stackAr76.equals((java.lang.Object) str87);
        stackAr39.push((java.lang.Object) boolean88);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[]" + "'", str40, "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + obj59 + "' != '" + "[]" + "'", obj59, "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[]" + "'", str87, "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4]" + "'", str7, "[4]");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + '4' + "'", obj8, '4');
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + '4' + "'", obj10, '4');
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '4');
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr3.equals((java.lang.Object) (byte) 1);
        boolean boolean6 = stackAr3.isFull();
        stackAr3.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        java.lang.String str16 = stackAr10.toString();
        boolean boolean17 = stackAr10.isEmpty();
        boolean boolean18 = stackAr3.equals((java.lang.Object) boolean17);
        boolean boolean19 = stackAr1.equals((java.lang.Object) stackAr3);
        java.lang.Class<?> wildcardClass20 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) 'a');
        java.lang.String str7 = stackAr1.toString();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        java.lang.String str12 = stackAr9.toString();
        boolean boolean13 = stackAr9.isEmpty();
        int int14 = stackAr9.size();
        boolean boolean15 = stackAr1.equals((java.lang.Object) int14);
        java.lang.Object obj16 = stackAr1.pop();
        boolean boolean17 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[a]" + "'", str7, "[a]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + 'a' + "'", obj16, 'a');
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isFull();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isEmpty();
        boolean boolean21 = stackAr17.isEmpty();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        stackAr1.push((java.lang.Object) int23);
        boolean boolean25 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        boolean boolean31 = stackAr27.isFull();
        int int32 = stackAr27.size();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        boolean boolean36 = stackAr34.isEmpty();
        int int37 = stackAr34.size();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        stackAr39.push((java.lang.Object) "[]");
        java.lang.Object obj44 = stackAr39.pop();
        boolean boolean45 = stackAr34.equals((java.lang.Object) stackAr39);
        boolean boolean46 = stackAr27.equals((java.lang.Object) stackAr39);
        stackAr1.push((java.lang.Object) stackAr39);
        boolean boolean48 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + obj44 + "' != '" + "[]" + "'", obj44, "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(0, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) '#', objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(100, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction(100, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) '4');
        java.lang.Object obj13 = null;
        boolean boolean14 = stackAr7.equals(obj13);
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.String str16 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[[4]]" + "'", str16, "[[4]]");
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        int int7 = stackAr1.size();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr11.isEmpty();
        boolean boolean13 = stackAr11.isEmpty();
        int int14 = stackAr11.size();
        boolean boolean15 = stackAr11.isFull();
        boolean boolean16 = stackAr11.isEmpty();
        int int17 = stackAr11.size();
        stackAr1.push((java.lang.Object) stackAr11);
        java.lang.Object obj19 = stackAr1.top();
        java.lang.Object obj20 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "[]");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "[]");
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        int int9 = stackAr1.size();
        int int10 = stackAr1.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        java.lang.String str15 = stackAr12.toString();
        boolean boolean16 = stackAr12.isEmpty();
        int int17 = stackAr12.size();
        boolean boolean18 = stackAr1.equals((java.lang.Object) stackAr12);
        int int19 = stackAr12.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        boolean boolean7 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr5.isFull();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 1);
        boolean boolean17 = stackAr14.isFull();
        java.lang.Object obj18 = new java.lang.Object();
        stackAr14.push(obj18);
        boolean boolean20 = stackAr14.isFull();
        java.lang.String str21 = stackAr14.toString();
        java.lang.Object obj22 = stackAr14.top();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr24.isEmpty();
        int int26 = stackAr24.size();
        boolean boolean27 = stackAr24.isEmpty();
        boolean boolean29 = stackAr24.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr31.equals((java.lang.Object) (byte) 1);
        boolean boolean34 = stackAr31.isFull();
        stackAr31.push((java.lang.Object) '4');
        stackAr24.push((java.lang.Object) stackAr31);
        java.lang.String str38 = stackAr31.toString();
        int int39 = stackAr31.size();
        boolean boolean40 = stackAr31.isFull();
        boolean boolean41 = stackAr14.equals((java.lang.Object) boolean40);
        stackAr5.push((java.lang.Object) stackAr14);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[4]" + "'", str38, "[4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.Object obj12 = stackAr5.top();
        int int13 = stackAr5.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = stackAr1.top();
        java.lang.Object obj9 = stackAr1.top();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr11.equals((java.lang.Object) (byte) 1);
        boolean boolean14 = stackAr11.isFull();
        java.lang.Object obj15 = new java.lang.Object();
        stackAr11.push(obj15);
        boolean boolean18 = stackAr11.equals((java.lang.Object) (byte) -1);
        int int19 = stackAr11.size();
        boolean boolean20 = stackAr11.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean25 = stackAr22.isEmpty();
        boolean boolean27 = stackAr22.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        boolean boolean32 = stackAr29.isFull();
        stackAr29.push((java.lang.Object) '4');
        stackAr22.push((java.lang.Object) stackAr29);
        boolean boolean36 = stackAr22.isEmpty();
        boolean boolean37 = stackAr22.isFull();
        stackAr11.push((java.lang.Object) stackAr22);
        stackAr1.push((java.lang.Object) stackAr22);
        boolean boolean40 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr42.equals((java.lang.Object) (byte) 100);
        boolean boolean45 = stackAr42.isEmpty();
        stackAr42.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr49 = new org.autotest.StackAr((int) '#');
        boolean boolean51 = stackAr49.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean55 = stackAr53.equals((java.lang.Object) (byte) 1);
        boolean boolean56 = stackAr53.isFull();
        java.lang.Object obj57 = new java.lang.Object();
        stackAr53.push(obj57);
        stackAr49.push((java.lang.Object) stackAr53);
        int int60 = stackAr49.size();
        stackAr42.push((java.lang.Object) stackAr49);
        java.lang.Object obj62 = stackAr42.pop();
        org.autotest.StackAr stackAr64 = new org.autotest.StackAr((int) '#');
        boolean boolean66 = stackAr64.equals((java.lang.Object) (byte) 1);
        boolean boolean67 = stackAr64.isFull();
        boolean boolean68 = stackAr64.isFull();
        boolean boolean69 = stackAr64.isFull();
        org.autotest.StackAr stackAr71 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str72 = stackAr71.toString();
        boolean boolean73 = stackAr71.isFull();
        stackAr71.push((java.lang.Object) 1);
        boolean boolean76 = stackAr71.isEmpty();
        boolean boolean77 = stackAr64.equals((java.lang.Object) stackAr71);
        java.lang.Object obj78 = stackAr71.top();
        java.lang.Object obj79 = stackAr71.pop();
        stackAr42.push(obj79);
        org.autotest.StackAr stackAr82 = new org.autotest.StackAr((int) '#');
        boolean boolean84 = stackAr82.equals((java.lang.Object) (byte) 1);
        boolean boolean85 = stackAr82.isFull();
        stackAr82.push((java.lang.Object) '4');
        java.lang.String str88 = stackAr82.toString();
        java.lang.Object obj89 = stackAr82.pop();
        stackAr42.push(obj89);
        boolean boolean91 = stackAr42.isFull();
        java.lang.Object obj92 = stackAr42.pop();
        stackAr1.push(obj92);
        java.lang.Class<?> wildcardClass94 = obj92.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4]" + "'", str7, "[4]");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + '4' + "'", obj8, '4');
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + '4' + "'", obj9, '4');
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + obj78 + "' != '" + 1 + "'", obj78, 1);
        org.junit.Assert.assertEquals("'" + obj79 + "' != '" + 1 + "'", obj79, 1);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[4]" + "'", str88, "[4]");
        org.junit.Assert.assertEquals("'" + obj89 + "' != '" + '4' + "'", obj89, '4');
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + obj92 + "' != '" + '4' + "'", obj92, '4');
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((-1), objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(2, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) '4', objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.String str2 = stackAr0.toString();
        boolean boolean3 = stackAr0.isFull();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str6 = stackAr5.toString();
        boolean boolean7 = stackAr5.isFull();
        stackAr5.push((java.lang.Object) 1);
        java.lang.Object obj10 = stackAr5.top();
        int int11 = stackAr5.size();
        boolean boolean12 = stackAr0.equals((java.lang.Object) int11);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 1 + "'", obj10, 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        int int7 = stackAr1.size();
        java.lang.Object obj8 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (short) 0 + "'", obj8, (short) 0);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        java.lang.String str14 = stackAr8.toString();
        java.lang.Object obj15 = stackAr8.top();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Class<?> wildcardClass17 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[4]" + "'", str14, "[4]");
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '4' + "'", obj15, '4');
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        java.lang.String str5 = stackAr1.toString();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isFull();
        int int13 = stackAr7.size();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr15.isEmpty();
        int int17 = stackAr15.size();
        boolean boolean18 = stackAr15.isEmpty();
        boolean boolean19 = stackAr7.equals((java.lang.Object) stackAr15);
        java.lang.String str20 = stackAr15.toString();
        boolean boolean21 = stackAr1.equals((java.lang.Object) str20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        boolean boolean10 = stackAr8.isEmpty();
        int int11 = stackAr8.size();
        boolean boolean12 = stackAr8.isFull();
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) boolean13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj15 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr8);
        int int23 = stackAr1.size();
        java.lang.String str24 = stackAr1.toString();
        boolean boolean25 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean14 = stackAr1.isEmpty();
        int int15 = stackAr1.size();
        java.lang.Object obj16 = stackAr1.top();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[[]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[[]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[[]]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(10, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(2, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) '4', objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        int int5 = stackAr1.size();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        boolean boolean16 = stackAr10.isFull();
        java.lang.String str17 = stackAr10.toString();
        stackAr10.push((java.lang.Object) (byte) 0);
        boolean boolean20 = stackAr10.isEmpty();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean25 = stackAr22.isFull();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 1);
        boolean boolean30 = stackAr27.isFull();
        java.lang.Object obj31 = new java.lang.Object();
        stackAr27.push(obj31);
        boolean boolean33 = stackAr27.isFull();
        java.lang.String str34 = stackAr27.toString();
        stackAr27.push((java.lang.Object) (byte) 0);
        stackAr22.push((java.lang.Object) stackAr27);
        boolean boolean38 = stackAr27.isFull();
        java.lang.String str39 = stackAr27.toString();
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr41.isEmpty();
        int int43 = stackAr41.size();
        boolean boolean44 = stackAr41.isEmpty();
        boolean boolean46 = stackAr41.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr48 = new org.autotest.StackAr((int) '#');
        boolean boolean50 = stackAr48.equals((java.lang.Object) (byte) 1);
        boolean boolean51 = stackAr48.isFull();
        stackAr48.push((java.lang.Object) '4');
        stackAr41.push((java.lang.Object) stackAr48);
        boolean boolean55 = stackAr41.isEmpty();
        java.lang.String str56 = stackAr41.toString();
        int int57 = stackAr41.size();
        boolean boolean58 = stackAr41.isEmpty();
        boolean boolean59 = stackAr27.equals((java.lang.Object) boolean58);
        boolean boolean60 = stackAr10.equals((java.lang.Object) stackAr27);
        org.autotest.StackAr stackAr62 = new org.autotest.StackAr((int) '#');
        boolean boolean63 = stackAr62.isEmpty();
        int int64 = stackAr62.size();
        boolean boolean65 = stackAr62.isEmpty();
        boolean boolean67 = stackAr62.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr69 = new org.autotest.StackAr((int) '#');
        boolean boolean71 = stackAr69.equals((java.lang.Object) (byte) 1);
        boolean boolean72 = stackAr69.isFull();
        stackAr69.push((java.lang.Object) '4');
        stackAr62.push((java.lang.Object) stackAr69);
        boolean boolean76 = stackAr62.isEmpty();
        org.autotest.StackAr stackAr78 = new org.autotest.StackAr((int) '#');
        boolean boolean80 = stackAr78.equals((java.lang.Object) (byte) 1);
        boolean boolean81 = stackAr78.isFull();
        java.lang.Object obj82 = new java.lang.Object();
        stackAr78.push(obj82);
        boolean boolean84 = stackAr62.equals((java.lang.Object) stackAr78);
        java.lang.Object obj85 = stackAr78.pop();
        boolean boolean86 = stackAr78.isEmpty();
        boolean boolean87 = stackAr78.isFull();
        boolean boolean88 = stackAr27.equals((java.lang.Object) stackAr78);
        boolean boolean89 = stackAr1.equals((java.lang.Object) boolean88);
        java.lang.Object obj90 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "[[4]]" + "'", str56, "[[4]]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + obj90 + "' != '" + "[]" + "'", obj90, "[]");
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '4');
        java.lang.String str2 = stackAr1.toString();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        int int6 = stackAr4.size();
        boolean boolean8 = stackAr4.equals((java.lang.Object) 100L);
        int int9 = stackAr4.size();
        int int10 = stackAr4.size();
        stackAr1.push((java.lang.Object) stackAr4);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        int int9 = stackAr1.size();
        int int10 = stackAr1.size();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        java.lang.String str15 = stackAr12.toString();
        boolean boolean16 = stackAr12.isEmpty();
        int int17 = stackAr12.size();
        boolean boolean18 = stackAr1.equals((java.lang.Object) stackAr12);
        boolean boolean19 = stackAr12.isEmpty();
        boolean boolean20 = stackAr12.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        stackAr1.push((java.lang.Object) "[[[4]]]");
        java.lang.Object obj11 = stackAr1.top();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 1);
        boolean boolean16 = stackAr13.isFull();
        java.lang.Object obj17 = new java.lang.Object();
        stackAr13.push(obj17);
        boolean boolean19 = stackAr13.isFull();
        java.lang.String str20 = stackAr13.toString();
        java.lang.Object obj21 = stackAr13.top();
        java.lang.Object[] objArray28 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) 'a', objArray28);
        boolean boolean30 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray28);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((-1), objArray28);
        boolean boolean32 = stackAr13.equals((java.lang.Object) objArray28);
        boolean boolean33 = stackAr13.isFull();
        stackAr1.push((java.lang.Object) stackAr13);
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr36.isEmpty();
        int int38 = stackAr36.size();
        boolean boolean39 = stackAr36.isEmpty();
        boolean boolean41 = stackAr36.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 1);
        boolean boolean46 = stackAr43.isFull();
        stackAr43.push((java.lang.Object) '4');
        stackAr36.push((java.lang.Object) stackAr43);
        boolean boolean50 = stackAr36.isFull();
        java.lang.Class<?> wildcardClass51 = stackAr36.getClass();
        stackAr13.push((java.lang.Object) wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "[[[4]]]" + "'", obj11, "[[[4]]]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr((int) '#');
        boolean boolean4 = stackAr2.equals((java.lang.Object) (byte) 1);
        boolean boolean5 = stackAr2.isFull();
        java.lang.Object obj6 = new java.lang.Object();
        stackAr2.push(obj6);
        boolean boolean8 = stackAr2.isFull();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        boolean boolean16 = stackAr10.isFull();
        java.lang.String str17 = stackAr10.toString();
        boolean boolean18 = stackAr2.equals((java.lang.Object) str17);
        boolean boolean19 = stackAr2.isEmpty();
        java.lang.Object[] objArray28 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) 'a', objArray28);
        boolean boolean30 = org.autotest.StackAr.repOkFunction(0, objArray28);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray28);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray28);
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) '4', objArray28);
        stackAr2.push((java.lang.Object) objArray28);
        boolean boolean35 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray28);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) 0.0f);
        int int5 = stackAr1.size();
        int int6 = stackAr1.size();
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        java.lang.Object obj17 = stackAr9.top();
        boolean boolean18 = stackAr1.equals((java.lang.Object) stackAr9);
        int int19 = stackAr1.size();
        java.lang.String str20 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(100, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(1, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) ' ', objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        java.lang.String str20 = stackAr1.toString();
        boolean boolean21 = stackAr1.isEmpty();
        int int22 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr11.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr15.isEmpty();
        int int17 = stackAr15.size();
        boolean boolean19 = stackAr15.equals((java.lang.Object) 100L);
        boolean boolean20 = stackAr15.isFull();
        stackAr11.push((java.lang.Object) stackAr15);
        boolean boolean22 = stackAr11.isEmpty();
        java.lang.Object obj23 = stackAr11.top();
        int int24 = stackAr11.size();
        boolean boolean25 = stackAr1.equals((java.lang.Object) int24);
        boolean boolean26 = stackAr1.isEmpty();
        java.lang.String str27 = stackAr1.toString();
        java.lang.String str28 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        java.lang.String str11 = stackAr7.toString();
        java.lang.Object[] objArray19 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) 'a', objArray19);
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray19);
        boolean boolean22 = org.autotest.StackAr.repOkFunction(100, objArray19);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray19);
        stackAr7.push((java.lang.Object) objArray19);
        boolean boolean25 = org.autotest.StackAr.repOkFunction(10, objArray19);
        boolean boolean26 = org.autotest.StackAr.repOkFunction(0, objArray19);
        boolean boolean27 = org.autotest.StackAr.repOkFunction((int) ' ', objArray19);
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray19);
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray19);
        boolean boolean30 = org.autotest.StackAr.repOkFunction((-1), objArray19);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr24.equals((java.lang.Object) (byte) 1);
        boolean boolean27 = stackAr24.isFull();
        java.lang.Object obj28 = new java.lang.Object();
        stackAr24.push(obj28);
        boolean boolean30 = stackAr24.isFull();
        java.lang.String str31 = stackAr24.toString();
        java.lang.Object obj32 = stackAr24.top();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        java.lang.String str35 = stackAr34.toString();
        boolean boolean36 = stackAr24.equals((java.lang.Object) str35);
        stackAr8.push((java.lang.Object) str35);
        boolean boolean38 = stackAr8.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean25 = stackAr24.isEmpty();
        stackAr19.push((java.lang.Object) stackAr24);
        boolean boolean27 = stackAr1.equals((java.lang.Object) stackAr19);
        java.lang.String str28 = stackAr1.toString();
        java.lang.String str29 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[[4]]" + "'", str28, "[[4]]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[[4]]" + "'", str29, "[[4]]");
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        boolean boolean23 = stackAr19.isFull();
        int int24 = stackAr19.size();
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr26.equals((java.lang.Object) (byte) 1);
        stackAr26.push((java.lang.Object) "[]");
        stackAr19.push((java.lang.Object) stackAr26);
        boolean boolean32 = stackAr19.isEmpty();
        java.lang.Object obj33 = stackAr19.pop();
        stackAr1.push(obj33);
        boolean boolean35 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        stackAr37.push((java.lang.Object) "[]");
        int int42 = stackAr37.size();
        boolean boolean44 = stackAr37.equals((java.lang.Object) 'a');
        boolean boolean45 = stackAr37.isEmpty();
        boolean boolean46 = stackAr37.isEmpty();
        stackAr1.push((java.lang.Object) stackAr37);
        java.lang.Class<?> wildcardClass48 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "[[]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "[[]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "[[]]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean8 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr14.isEmpty();
        int int16 = stackAr14.size();
        boolean boolean18 = stackAr14.equals((java.lang.Object) 100L);
        boolean boolean19 = stackAr14.isFull();
        stackAr10.push((java.lang.Object) stackAr14);
        boolean boolean21 = stackAr1.equals((java.lang.Object) stackAr10);
        java.lang.Object obj22 = stackAr10.top();
        java.lang.Class<?> wildcardClass23 = stackAr10.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "[]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        java.lang.Object[] objArray13 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) 'a', objArray13);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray13);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(100, objArray13);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray13);
        stackAr1.push((java.lang.Object) objArray13);
        boolean boolean19 = stackAr1.isEmpty();
        java.lang.Object obj20 = stackAr1.top();
        java.lang.Class<?> wildcardClass21 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.String str12 = stackAr5.toString();
        java.lang.Object obj13 = stackAr5.pop();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str16 = stackAr15.toString();
        boolean boolean17 = stackAr15.isEmpty();
        int int18 = stackAr15.size();
        java.lang.String str19 = stackAr15.toString();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        boolean boolean25 = stackAr21.isFull();
        boolean boolean26 = stackAr21.isFull();
        int int27 = stackAr21.size();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr29.isEmpty();
        int int31 = stackAr29.size();
        boolean boolean32 = stackAr29.isEmpty();
        boolean boolean33 = stackAr21.equals((java.lang.Object) stackAr29);
        java.lang.String str34 = stackAr29.toString();
        boolean boolean35 = stackAr15.equals((java.lang.Object) str34);
        java.lang.String str36 = stackAr15.toString();
        boolean boolean37 = stackAr15.isEmpty();
        stackAr5.push((java.lang.Object) stackAr15);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        boolean boolean23 = stackAr19.isFull();
        int int24 = stackAr19.size();
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr26.equals((java.lang.Object) (byte) 1);
        stackAr26.push((java.lang.Object) "[]");
        stackAr19.push((java.lang.Object) stackAr26);
        boolean boolean32 = stackAr19.isEmpty();
        java.lang.Object obj33 = stackAr19.pop();
        stackAr1.push(obj33);
        boolean boolean35 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        stackAr37.push((java.lang.Object) "[]");
        int int42 = stackAr37.size();
        boolean boolean44 = stackAr37.equals((java.lang.Object) 'a');
        boolean boolean45 = stackAr37.isEmpty();
        boolean boolean46 = stackAr37.isEmpty();
        stackAr1.push((java.lang.Object) stackAr37);
        org.autotest.StackAr stackAr49 = new org.autotest.StackAr((int) '#');
        boolean boolean51 = stackAr49.equals((java.lang.Object) (byte) 1);
        boolean boolean52 = stackAr49.isFull();
        java.lang.Object obj53 = new java.lang.Object();
        stackAr49.push(obj53);
        boolean boolean55 = stackAr49.isFull();
        java.lang.String str56 = stackAr49.toString();
        java.lang.Object obj57 = stackAr49.top();
        java.lang.Object obj58 = stackAr49.top();
        java.lang.Object obj59 = stackAr49.pop();
        org.autotest.StackAr stackAr61 = new org.autotest.StackAr((int) '#');
        boolean boolean62 = stackAr61.isEmpty();
        boolean boolean63 = stackAr61.isEmpty();
        int int64 = stackAr61.size();
        org.autotest.StackAr stackAr66 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean67 = stackAr66.isEmpty();
        stackAr61.push((java.lang.Object) stackAr66);
        boolean boolean69 = stackAr49.equals((java.lang.Object) stackAr66);
        stackAr37.push((java.lang.Object) boolean69);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "[[]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "[[]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "[[]]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        boolean boolean1 = stackAr0.isEmpty();
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
        int int3 = stackAr2.size();
        stackAr0.push((java.lang.Object) int3);
        java.lang.String str5 = stackAr0.toString();
        java.lang.Object obj6 = stackAr0.top();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) 'a');
        boolean boolean9 = stackAr0.equals((java.lang.Object) 'a');
        int int10 = stackAr0.size();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[0]" + "'", str5, "[0]");
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 0 + "'", obj6, 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        boolean boolean11 = stackAr1.isEmpty();
        boolean boolean13 = stackAr1.equals((java.lang.Object) 1L);
        java.lang.Object obj14 = stackAr1.top();
        java.lang.Object obj15 = stackAr1.top();
        java.lang.Object obj16 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + (byte) 0 + "'", obj14, (byte) 0);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + (byte) 0 + "'", obj15, (byte) 0);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (byte) 0 + "'", obj16, (byte) 0);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean25 = stackAr24.isEmpty();
        stackAr19.push((java.lang.Object) stackAr24);
        boolean boolean27 = stackAr1.equals((java.lang.Object) stackAr19);
        java.lang.String str28 = stackAr1.toString();
        int int29 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[[4]]" + "'", str28, "[[4]]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.Object obj12 = stackAr1.top();
        int int13 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isEmpty();
        java.lang.Object obj18 = stackAr1.pop();
        boolean boolean20 = stackAr1.equals((java.lang.Object) 0);
        boolean boolean21 = stackAr1.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        java.lang.Object obj27 = new java.lang.Object();
        stackAr23.push(obj27);
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr30.isEmpty();
        int int32 = stackAr30.size();
        boolean boolean33 = stackAr30.isEmpty();
        boolean boolean35 = stackAr30.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        boolean boolean40 = stackAr37.isFull();
        stackAr37.push((java.lang.Object) '4');
        stackAr30.push((java.lang.Object) stackAr37);
        stackAr23.push((java.lang.Object) stackAr30);
        boolean boolean45 = stackAr30.isEmpty();
        boolean boolean46 = stackAr30.isEmpty();
        boolean boolean47 = stackAr1.equals((java.lang.Object) boolean46);
        boolean boolean48 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "[4]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.Object obj7 = null;
        boolean boolean8 = stackAr1.equals(obj7);
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr10.isEmpty();
        boolean boolean12 = stackAr10.isEmpty();
        int int13 = stackAr10.size();
        int int14 = stackAr10.size();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        stackAr16.push((java.lang.Object) '4');
        java.lang.Object obj22 = null;
        boolean boolean23 = stackAr16.equals(obj22);
        stackAr10.push((java.lang.Object) stackAr16);
        java.lang.Class<?> wildcardClass25 = stackAr10.getClass();
        stackAr1.push((java.lang.Object) wildcardClass25);
        java.lang.String str27 = stackAr1.toString();
        boolean boolean28 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4,class org.autotest.StackAr]" + "'", str27, "[4,class org.autotest.StackAr]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(0, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        java.lang.String str29 = stackAr0.toString();
        boolean boolean30 = stackAr0.isFull();
        boolean boolean31 = stackAr0.isEmpty();
        java.lang.String str32 = stackAr0.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100]" + "'", str29, "[100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[100]" + "'", str32, "[100]");
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        int int5 = stackAr1.size();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) (short) 10);
        boolean boolean11 = stackAr10.isEmpty();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = stackAr10.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) 10.0f);
        java.lang.Object obj31 = stackAr0.top();
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr((int) '#');
        boolean boolean34 = stackAr33.isEmpty();
        boolean boolean36 = stackAr33.equals((java.lang.Object) '#');
        int int37 = stackAr33.size();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 100);
        boolean boolean42 = stackAr39.isEmpty();
        java.lang.Class<?> wildcardClass43 = stackAr39.getClass();
        boolean boolean44 = stackAr33.equals((java.lang.Object) wildcardClass43);
        stackAr0.push((java.lang.Object) wildcardClass43);
        java.lang.String str46 = stackAr0.toString();
        org.autotest.StackAr stackAr48 = new org.autotest.StackAr((int) '#');
        boolean boolean50 = stackAr48.equals((java.lang.Object) (byte) 1);
        boolean boolean51 = stackAr48.isFull();
        boolean boolean52 = stackAr48.isFull();
        int int53 = stackAr48.size();
        org.autotest.StackAr stackAr55 = new org.autotest.StackAr((int) '#');
        boolean boolean57 = stackAr55.equals((java.lang.Object) (byte) 1);
        stackAr55.push((java.lang.Object) "[]");
        stackAr48.push((java.lang.Object) stackAr55);
        java.lang.Object obj61 = stackAr55.pop();
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean64 = stackAr55.equals((java.lang.Object) (short) 1);
        int int65 = stackAr55.size();
        boolean boolean66 = stackAr55.isFull();
        java.lang.String str67 = stackAr55.toString();
        boolean boolean68 = stackAr0.equals((java.lang.Object) stackAr55);
        org.autotest.StackAr stackAr70 = new org.autotest.StackAr((int) '#');
        boolean boolean71 = stackAr70.isEmpty();
        int int72 = stackAr70.size();
        boolean boolean73 = stackAr70.isEmpty();
        stackAr70.push((java.lang.Object) (short) 0);
        boolean boolean76 = stackAr0.equals((java.lang.Object) (short) 0);
        boolean boolean77 = stackAr0.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + 10.0f + "'", obj31, 10.0f);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100,10.0,class org.autotest.StackAr]" + "'", str46, "[100,10.0,class org.autotest.StackAr]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + obj61 + "' != '" + "[]" + "'", obj61, "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = null;
        stackAr1.push(obj8);
        java.lang.Object obj10 = stackAr1.top();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        int int21 = stackAr19.size();
        boolean boolean22 = stackAr19.isEmpty();
        boolean boolean24 = stackAr19.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr26.equals((java.lang.Object) (byte) 1);
        boolean boolean29 = stackAr26.isFull();
        stackAr26.push((java.lang.Object) '4');
        stackAr19.push((java.lang.Object) stackAr26);
        stackAr12.push((java.lang.Object) stackAr19);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr35.isEmpty();
        int int37 = stackAr35.size();
        boolean boolean38 = stackAr35.isEmpty();
        boolean boolean40 = stackAr35.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr(0);
        stackAr35.push((java.lang.Object) 0);
        stackAr19.push((java.lang.Object) 0);
        int int45 = stackAr19.size();
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr47.isEmpty();
        int int49 = stackAr47.size();
        boolean boolean50 = stackAr47.isEmpty();
        stackAr47.push((java.lang.Object) (short) 0);
        int int53 = stackAr47.size();
        boolean boolean54 = stackAr47.isEmpty();
        java.lang.String str55 = stackAr47.toString();
        stackAr19.push((java.lang.Object) stackAr47);
        boolean boolean57 = stackAr1.equals((java.lang.Object) stackAr47);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[0]" + "'", str55, "[0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        boolean boolean16 = stackAr10.isFull();
        java.lang.String str17 = stackAr10.toString();
        java.lang.Object obj18 = stackAr10.top();
        boolean boolean19 = stackAr10.isFull();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str22 = stackAr21.toString();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr(0);
        int int25 = stackAr24.size();
        stackAr21.push((java.lang.Object) stackAr24);
        java.lang.Object obj27 = stackAr21.pop();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr();
        int int29 = stackAr28.size();
        java.lang.Object[] objArray35 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean36 = org.autotest.StackAr.repOkFunction((int) 'a', objArray35);
        boolean boolean37 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray35);
        boolean boolean38 = stackAr28.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr40.equals((java.lang.Object) (byte) 1);
        boolean boolean43 = stackAr40.isFull();
        java.lang.Object obj44 = new java.lang.Object();
        stackAr40.push(obj44);
        boolean boolean47 = stackAr40.equals((java.lang.Object) (byte) -1);
        boolean boolean48 = stackAr28.equals((java.lang.Object) boolean47);
        boolean boolean49 = stackAr28.isFull();
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean52 = stackAr51.isEmpty();
        int int53 = stackAr51.size();
        stackAr51.push((java.lang.Object) (byte) 100);
        stackAr28.push((java.lang.Object) (byte) 100);
        java.lang.String str57 = stackAr28.toString();
        org.autotest.StackAr stackAr58 = new org.autotest.StackAr();
        int int59 = stackAr58.size();
        org.autotest.StackAr stackAr61 = new org.autotest.StackAr(1);
        boolean boolean62 = stackAr61.isFull();
        stackAr58.push((java.lang.Object) boolean62);
        boolean boolean64 = stackAr28.equals((java.lang.Object) stackAr58);
        boolean boolean65 = stackAr58.isEmpty();
        stackAr21.push((java.lang.Object) stackAr58);
        stackAr10.push((java.lang.Object) stackAr21);
        stackAr1.push((java.lang.Object) stackAr10);
        org.autotest.StackAr stackAr70 = new org.autotest.StackAr((int) '#');
        boolean boolean72 = stackAr70.equals((java.lang.Object) (byte) 1);
        boolean boolean73 = stackAr70.isFull();
        stackAr70.push((java.lang.Object) '4');
        boolean boolean77 = stackAr70.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr79 = new org.autotest.StackAr((int) '#');
        boolean boolean81 = stackAr79.equals((java.lang.Object) (byte) 1);
        boolean boolean82 = stackAr79.isFull();
        boolean boolean83 = stackAr79.isFull();
        int int84 = stackAr79.size();
        org.autotest.StackAr stackAr86 = new org.autotest.StackAr((int) '#');
        boolean boolean88 = stackAr86.equals((java.lang.Object) (byte) 1);
        stackAr86.push((java.lang.Object) "[]");
        stackAr79.push((java.lang.Object) stackAr86);
        boolean boolean92 = stackAr70.equals((java.lang.Object) stackAr86);
        int int93 = stackAr70.size();
        stackAr1.push((java.lang.Object) int93);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[100]" + "'", str57, "[100]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr1.toString();
        boolean boolean16 = stackAr1.isEmpty();
        java.lang.Object obj17 = stackAr1.top();
        boolean boolean18 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        boolean boolean24 = stackAr20.isFull();
        boolean boolean25 = stackAr20.isFull();
        int int26 = stackAr20.size();
        boolean boolean27 = stackAr20.isEmpty();
        boolean boolean28 = stackAr20.isFull();
        stackAr1.push((java.lang.Object) stackAr20);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[4]]" + "'", str15, "[[4]]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "[4]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        stackAr1.push((java.lang.Object) ' ');
        java.lang.String str12 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str9 = stackAr8.toString();
        boolean boolean10 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) 1);
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr8.top();
        java.lang.Object obj16 = stackAr8.top();
        java.lang.Object obj17 = stackAr8.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + 1 + "'", obj15, 1);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + 1 + "'", obj16, 1);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + 1 + "'", obj17, 1);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr16.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        int int23 = stackAr19.size();
        boolean boolean24 = stackAr16.equals((java.lang.Object) stackAr19);
        boolean boolean25 = stackAr8.equals((java.lang.Object) boolean24);
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr27.isEmpty();
        boolean boolean29 = stackAr27.isEmpty();
        int int30 = stackAr27.size();
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean33 = stackAr32.isEmpty();
        stackAr27.push((java.lang.Object) stackAr32);
        stackAr8.push((java.lang.Object) stackAr32);
        java.lang.Object[] objArray44 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean45 = org.autotest.StackAr.repOkFunction((int) 'a', objArray44);
        boolean boolean46 = org.autotest.StackAr.repOkFunction(0, objArray44);
        boolean boolean47 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray44);
        boolean boolean48 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray44);
        boolean boolean49 = org.autotest.StackAr.repOkFunction((int) '4', objArray44);
        boolean boolean50 = stackAr8.equals((java.lang.Object) boolean49);
        boolean boolean51 = stackAr8.isEmpty();
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        java.lang.String str54 = stackAr53.toString();
        org.autotest.StackAr stackAr56 = new org.autotest.StackAr((int) '#');
        boolean boolean57 = stackAr56.isEmpty();
        int int58 = stackAr56.size();
        org.autotest.StackAr stackAr60 = new org.autotest.StackAr((int) '#');
        boolean boolean62 = stackAr60.equals((java.lang.Object) (byte) 1);
        boolean boolean63 = stackAr60.isFull();
        boolean boolean64 = stackAr60.isFull();
        int int65 = stackAr60.size();
        org.autotest.StackAr stackAr67 = new org.autotest.StackAr((int) '#');
        boolean boolean69 = stackAr67.equals((java.lang.Object) (byte) 1);
        stackAr67.push((java.lang.Object) "[]");
        stackAr60.push((java.lang.Object) stackAr67);
        java.lang.Object obj73 = stackAr67.pop();
        org.autotest.StackAr stackAr75 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean76 = stackAr75.isFull();
        org.autotest.StackAr stackAr78 = new org.autotest.StackAr((int) '#');
        boolean boolean79 = stackAr78.isEmpty();
        boolean boolean80 = stackAr78.isEmpty();
        int int81 = stackAr78.size();
        int int82 = stackAr78.size();
        boolean boolean83 = stackAr75.equals((java.lang.Object) stackAr78);
        boolean boolean84 = stackAr67.equals((java.lang.Object) boolean83);
        boolean boolean85 = stackAr56.equals((java.lang.Object) stackAr67);
        stackAr53.push((java.lang.Object) stackAr67);
        java.lang.Object obj87 = stackAr53.top();
        boolean boolean88 = stackAr8.equals((java.lang.Object) stackAr53);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + "[]" + "'", obj73, "[]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "[]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean11 = stackAr10.isFull();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr10);
        boolean boolean13 = stackAr1.isEmpty();
        boolean boolean14 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        java.lang.Object[] objArray11 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) 'a', objArray11);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray11);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(100, objArray11);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray11);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) '#', objArray11);
        boolean boolean17 = org.autotest.StackAr.repOkFunction(0, objArray11);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) '4', objArray11);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) 'a', objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.String str3 = stackAr1.toString();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean8 = stackAr5.isEmpty();
        boolean boolean10 = stackAr5.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        stackAr12.push((java.lang.Object) '4');
        stackAr5.push((java.lang.Object) stackAr12);
        boolean boolean19 = stackAr5.isFull();
        boolean boolean20 = stackAr5.isEmpty();
        boolean boolean21 = stackAr1.equals((java.lang.Object) stackAr5);
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        boolean boolean27 = stackAr23.isFull();
        int int28 = stackAr23.size();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr30.isEmpty();
        boolean boolean32 = stackAr30.isEmpty();
        int int33 = stackAr30.size();
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        stackAr35.push((java.lang.Object) "[]");
        java.lang.Object obj40 = stackAr35.pop();
        boolean boolean41 = stackAr30.equals((java.lang.Object) stackAr35);
        boolean boolean42 = stackAr23.equals((java.lang.Object) stackAr35);
        int int43 = stackAr23.size();
        org.autotest.StackAr stackAr45 = new org.autotest.StackAr((int) '#');
        boolean boolean47 = stackAr45.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr49 = new org.autotest.StackAr((int) '#');
        boolean boolean50 = stackAr49.isEmpty();
        int int51 = stackAr49.size();
        boolean boolean53 = stackAr49.equals((java.lang.Object) 100L);
        boolean boolean54 = stackAr49.isFull();
        stackAr45.push((java.lang.Object) stackAr49);
        boolean boolean56 = stackAr45.isEmpty();
        java.lang.Object obj57 = stackAr45.top();
        int int58 = stackAr45.size();
        java.lang.Object obj59 = stackAr45.top();
        boolean boolean60 = stackAr23.equals((java.lang.Object) stackAr45);
        stackAr1.push((java.lang.Object) boolean60);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + obj40 + "' != '" + "[]" + "'", obj40, "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) 1);
        java.lang.String str6 = stackAr1.toString();
        java.lang.Object obj7 = stackAr1.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[1]" + "'", str6, "[1]");
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + 1 + "'", obj7, 1);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (short) 0 + "'", obj9, (short) 0);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr((int) '#');
        boolean boolean4 = stackAr2.equals((java.lang.Object) (byte) 100);
        boolean boolean5 = stackAr2.isEmpty();
        boolean boolean6 = stackAr2.isEmpty();
        boolean boolean7 = stackAr0.equals((java.lang.Object) stackAr2);
        java.lang.String str8 = stackAr0.toString();
        java.lang.String str9 = stackAr0.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        stackAr6.push((java.lang.Object) "[]");
        java.lang.Object obj11 = stackAr6.pop();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr6);
        int int13 = stackAr1.size();
        boolean boolean14 = stackAr1.isFull();
        int int15 = stackAr1.size();
        int int16 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + "[]" + "'", obj11, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(100, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(10, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr10.isEmpty();
        boolean boolean12 = stackAr10.isEmpty();
        boolean boolean13 = stackAr10.isFull();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        java.lang.String str21 = stackAr15.toString();
        java.lang.Object obj22 = stackAr15.top();
        boolean boolean23 = stackAr15.isEmpty();
        boolean boolean24 = stackAr10.equals((java.lang.Object) boolean23);
        boolean boolean25 = stackAr1.equals((java.lang.Object) boolean24);
        java.lang.Object[] objArray33 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean34 = org.autotest.StackAr.repOkFunction((int) 'a', objArray33);
        boolean boolean35 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray33);
        boolean boolean36 = org.autotest.StackAr.repOkFunction(100, objArray33);
        boolean boolean37 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray33);
        stackAr1.push((java.lang.Object) boolean37);
        java.lang.Object obj39 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "[]" + "'", obj6, "[]");
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "[]" + "'", obj7, "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[4]" + "'", str21, "[4]");
        org.junit.Assert.assertEquals("'" + obj22 + "' != '" + '4' + "'", obj22, '4');
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + obj39 + "' != '" + false + "'", obj39, false);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        java.lang.String str20 = stackAr1.toString();
        boolean boolean21 = stackAr1.isEmpty();
        boolean boolean22 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean8 = stackAr1.equals((java.lang.Object) (byte) -1);
        int int9 = stackAr1.size();
        int int10 = stackAr1.size();
        boolean boolean11 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        java.lang.String str2 = stackAr1.toString();
        boolean boolean4 = stackAr1.equals((java.lang.Object) 10L);
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.pop();
        java.lang.String str10 = stackAr1.toString();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr12.isEmpty();
        int int14 = stackAr12.size();
        boolean boolean15 = stackAr12.isEmpty();
        boolean boolean17 = stackAr12.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr(0);
        stackAr12.push((java.lang.Object) 0);
        boolean boolean21 = stackAr12.isFull();
        boolean boolean22 = stackAr12.isFull();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr24.equals((java.lang.Object) (byte) 1);
        boolean boolean27 = stackAr24.isFull();
        stackAr24.push((java.lang.Object) '4');
        boolean boolean31 = stackAr24.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr33.equals((java.lang.Object) (byte) 1);
        boolean boolean36 = stackAr33.isFull();
        boolean boolean37 = stackAr33.isFull();
        int int38 = stackAr33.size();
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr40.equals((java.lang.Object) (byte) 1);
        stackAr40.push((java.lang.Object) "[]");
        stackAr33.push((java.lang.Object) stackAr40);
        boolean boolean46 = stackAr24.equals((java.lang.Object) stackAr40);
        java.lang.Class<?> wildcardClass47 = stackAr40.getClass();
        boolean boolean48 = stackAr12.equals((java.lang.Object) wildcardClass47);
        boolean boolean49 = stackAr12.isEmpty();
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) '#');
        boolean boolean52 = stackAr51.isEmpty();
        int int53 = stackAr51.size();
        boolean boolean54 = stackAr51.isEmpty();
        java.lang.String str55 = stackAr51.toString();
        stackAr12.push((java.lang.Object) stackAr51);
        org.autotest.StackAr stackAr58 = new org.autotest.StackAr((int) '#');
        boolean boolean60 = stackAr58.equals((java.lang.Object) (byte) 1);
        boolean boolean61 = stackAr58.isFull();
        java.lang.Object obj62 = new java.lang.Object();
        stackAr58.push(obj62);
        boolean boolean64 = stackAr58.isFull();
        java.lang.String str65 = stackAr58.toString();
        java.lang.Object obj66 = stackAr58.top();
        java.lang.Object[] objArray73 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean74 = org.autotest.StackAr.repOkFunction((int) 'a', objArray73);
        boolean boolean75 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray73);
        boolean boolean76 = org.autotest.StackAr.repOkFunction((-1), objArray73);
        boolean boolean77 = stackAr58.equals((java.lang.Object) objArray73);
        stackAr51.push((java.lang.Object) stackAr58);
        boolean boolean79 = stackAr1.equals((java.lang.Object) stackAr51);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        boolean boolean10 = stackAr8.isEmpty();
        int int11 = stackAr8.size();
        int int12 = stackAr8.size();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 1);
        boolean boolean17 = stackAr14.isFull();
        stackAr14.push((java.lang.Object) '4');
        java.lang.Object obj20 = null;
        boolean boolean21 = stackAr14.equals(obj20);
        stackAr8.push((java.lang.Object) stackAr14);
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr14);
        java.lang.String str24 = stackAr14.toString();
        boolean boolean25 = stackAr14.isEmpty();
        java.lang.String str26 = stackAr14.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[4]" + "'", str24, "[4]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[4]" + "'", str26, "[4]");
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) '4');
        java.lang.Object obj13 = null;
        boolean boolean14 = stackAr7.equals(obj13);
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj16 = stackAr7.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + '4' + "'", obj16, '4');
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (byte) 100);
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        boolean boolean4 = stackAr3.isEmpty();
        boolean boolean5 = stackAr3.isEmpty();
        int int6 = stackAr3.size();
        int int7 = stackAr3.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        boolean boolean13 = stackAr9.isFull();
        boolean boolean14 = stackAr9.isFull();
        int int15 = stackAr9.size();
        boolean boolean17 = stackAr9.equals((java.lang.Object) 'a');
        boolean boolean18 = stackAr3.equals((java.lang.Object) boolean17);
        java.lang.String str19 = stackAr3.toString();
        int int20 = stackAr3.size();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        boolean boolean26 = stackAr22.isFull();
        boolean boolean27 = stackAr22.isFull();
        int int28 = stackAr22.size();
        boolean boolean30 = stackAr22.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr();
        boolean boolean32 = stackAr31.isEmpty();
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr();
        int int34 = stackAr33.size();
        stackAr31.push((java.lang.Object) int34);
        boolean boolean36 = stackAr22.equals((java.lang.Object) int34);
        java.lang.Class<?> wildcardClass37 = stackAr22.getClass();
        boolean boolean38 = stackAr3.equals((java.lang.Object) wildcardClass37);
        boolean boolean39 = stackAr1.equals((java.lang.Object) wildcardClass37);
        boolean boolean40 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj41 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        java.lang.String str29 = stackAr0.toString();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr();
        int int31 = stackAr30.size();
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr(1);
        boolean boolean34 = stackAr33.isFull();
        stackAr30.push((java.lang.Object) boolean34);
        boolean boolean36 = stackAr0.equals((java.lang.Object) stackAr30);
        boolean boolean37 = stackAr30.isEmpty();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        boolean boolean45 = stackAr39.isFull();
        java.lang.String str46 = stackAr39.toString();
        java.lang.Object obj47 = stackAr39.top();
        java.lang.Object obj48 = stackAr39.top();
        java.lang.Object obj49 = stackAr39.top();
        boolean boolean50 = stackAr39.isEmpty();
        boolean boolean51 = stackAr30.equals((java.lang.Object) boolean50);
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean55 = stackAr53.equals((java.lang.Object) (byte) 1);
        boolean boolean56 = stackAr53.isFull();
        boolean boolean57 = stackAr53.isFull();
        boolean boolean58 = stackAr53.isFull();
        int int59 = stackAr53.size();
        org.autotest.StackAr stackAr61 = new org.autotest.StackAr((int) '#');
        boolean boolean63 = stackAr61.equals((java.lang.Object) (byte) 100);
        boolean boolean64 = stackAr53.equals((java.lang.Object) stackAr61);
        boolean boolean65 = stackAr53.isEmpty();
        boolean boolean66 = stackAr53.isFull();
        stackAr30.push((java.lang.Object) stackAr53);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100]" + "'", str29, "[100]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.Object obj12 = stackAr1.top();
        java.lang.Object obj13 = stackAr1.top();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr15.isEmpty();
        int int17 = stackAr15.size();
        boolean boolean18 = stackAr15.isFull();
        stackAr1.push((java.lang.Object) boolean18);
        int int20 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + (byte) 0 + "'", obj12, (byte) 0);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + (byte) 0 + "'", obj13, (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        java.lang.String str11 = stackAr7.toString();
        java.lang.Object[] objArray19 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) 'a', objArray19);
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray19);
        boolean boolean22 = org.autotest.StackAr.repOkFunction(100, objArray19);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray19);
        stackAr7.push((java.lang.Object) objArray19);
        boolean boolean25 = stackAr1.equals((java.lang.Object) objArray19);
        boolean boolean26 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) 'a');
        java.lang.String str10 = stackAr1.toString();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        java.lang.String str13 = stackAr12.toString();
        boolean boolean15 = stackAr12.equals((java.lang.Object) 10L);
        stackAr1.push((java.lang.Object) boolean15);
        java.lang.Object obj17 = stackAr1.top();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        int int21 = stackAr19.size();
        boolean boolean22 = stackAr19.isEmpty();
        boolean boolean24 = stackAr19.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr26.equals((java.lang.Object) (byte) 1);
        boolean boolean29 = stackAr26.isFull();
        stackAr26.push((java.lang.Object) '4');
        stackAr19.push((java.lang.Object) stackAr26);
        boolean boolean33 = stackAr19.isEmpty();
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        boolean boolean38 = stackAr35.isFull();
        java.lang.Object obj39 = new java.lang.Object();
        stackAr35.push(obj39);
        boolean boolean41 = stackAr19.equals((java.lang.Object) stackAr35);
        java.lang.Object obj42 = stackAr35.top();
        boolean boolean43 = stackAr1.equals(obj42);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        java.lang.String str29 = stackAr0.toString();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr();
        int int31 = stackAr30.size();
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr(1);
        boolean boolean34 = stackAr33.isFull();
        stackAr30.push((java.lang.Object) boolean34);
        boolean boolean36 = stackAr0.equals((java.lang.Object) stackAr30);
        boolean boolean37 = stackAr30.isEmpty();
        java.lang.Object obj38 = stackAr30.pop();
        boolean boolean39 = stackAr30.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[100]" + "'", str29, "[100]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + obj38 + "' != '" + false + "'", obj38, false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = stackAr1.top();
        java.lang.Object obj9 = stackAr1.top();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr11.equals((java.lang.Object) (byte) 1);
        boolean boolean14 = stackAr11.isFull();
        java.lang.Object obj15 = new java.lang.Object();
        stackAr11.push(obj15);
        boolean boolean18 = stackAr11.equals((java.lang.Object) (byte) -1);
        int int19 = stackAr11.size();
        boolean boolean20 = stackAr11.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean25 = stackAr22.isEmpty();
        boolean boolean27 = stackAr22.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        boolean boolean32 = stackAr29.isFull();
        stackAr29.push((java.lang.Object) '4');
        stackAr22.push((java.lang.Object) stackAr29);
        boolean boolean36 = stackAr22.isEmpty();
        boolean boolean37 = stackAr22.isFull();
        stackAr11.push((java.lang.Object) stackAr22);
        stackAr1.push((java.lang.Object) stackAr22);
        boolean boolean40 = stackAr1.isEmpty();
        boolean boolean41 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4]" + "'", str7, "[4]");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + '4' + "'", obj8, '4');
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + '4' + "'", obj9, '4');
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.Object obj7 = stackAr1.top();
        java.lang.String str8 = stackAr1.toString();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr();
        int int10 = stackAr9.size();
        java.lang.Object[] objArray16 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) 'a', objArray16);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray16);
        boolean boolean19 = stackAr9.equals((java.lang.Object) (byte) 10);
        java.lang.String str20 = stackAr9.toString();
        java.lang.String str21 = stackAr9.toString();
        java.lang.String str22 = stackAr9.toString();
        java.lang.String str23 = stackAr9.toString();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
        int int25 = stackAr24.size();
        java.lang.Object[] objArray31 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) 'a', objArray31);
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray31);
        boolean boolean34 = stackAr24.equals((java.lang.Object) (byte) 10);
        java.lang.String str35 = stackAr24.toString();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr(0);
        boolean boolean38 = stackAr24.equals((java.lang.Object) 0);
        int int39 = stackAr24.size();
        stackAr9.push((java.lang.Object) stackAr24);
        java.lang.String str41 = stackAr9.toString();
        java.lang.String str42 = stackAr9.toString();
        boolean boolean43 = stackAr1.equals((java.lang.Object) str42);
        java.lang.String str44 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[]" + "'", str23, "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[]" + "'", str35, "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "[[]]" + "'", str41, "[[]]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "[[]]" + "'", str42, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean8 = stackAr7.isFull();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr10.isEmpty();
        boolean boolean12 = stackAr10.isEmpty();
        int int13 = stackAr10.size();
        int int14 = stackAr10.size();
        boolean boolean15 = stackAr7.equals((java.lang.Object) stackAr10);
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        java.lang.String str17 = stackAr1.toString();
        boolean boolean18 = stackAr1.isEmpty();
        java.lang.String str19 = stackAr1.toString();
        boolean boolean20 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[]" + "'", str19, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 0);
        boolean boolean2 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr4.equals((java.lang.Object) (byte) 1);
        stackAr4.push((java.lang.Object) "[]");
        java.lang.Object obj9 = stackAr4.top();
        java.lang.Object obj10 = stackAr4.top();
        java.lang.String str11 = stackAr4.toString();
        java.lang.String str12 = stackAr4.toString();
        int int13 = stackAr4.size();
        java.lang.String str14 = stackAr4.toString();
        java.lang.Object obj15 = stackAr4.top();
        java.lang.String str16 = stackAr4.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) stackAr4);
        java.lang.String str18 = stackAr4.toString();
        java.lang.Class<?> wildcardClass19 = stackAr4.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + "[]" + "'", obj9, "[]");
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + "[]" + "'", obj10, "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[[]]" + "'", str11, "[[]]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[[]]" + "'", str12, "[[]]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[[]]" + "'", str14, "[[]]");
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + "[]" + "'", obj15, "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[[]]" + "'", str16, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[[]]" + "'", str18, "[[]]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr();
        boolean boolean11 = stackAr10.isEmpty();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
        int int13 = stackAr12.size();
        stackAr10.push((java.lang.Object) int13);
        boolean boolean15 = stackAr1.equals((java.lang.Object) int13);
        boolean boolean16 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        boolean boolean22 = stackAr18.isFull();
        int int23 = stackAr18.size();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        stackAr25.push((java.lang.Object) "[]");
        stackAr18.push((java.lang.Object) stackAr25);
        java.lang.Object obj31 = stackAr25.pop();
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean34 = stackAr33.isFull();
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr36.isEmpty();
        boolean boolean38 = stackAr36.isEmpty();
        int int39 = stackAr36.size();
        int int40 = stackAr36.size();
        boolean boolean41 = stackAr33.equals((java.lang.Object) stackAr36);
        boolean boolean42 = stackAr25.equals((java.lang.Object) boolean41);
        boolean boolean43 = stackAr25.isFull();
        boolean boolean44 = stackAr1.equals((java.lang.Object) boolean43);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + "[]" + "'", obj31, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        java.lang.Object[] objArray5 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean6 = org.autotest.StackAr.repOkFunction((int) 'a', objArray5);
        boolean boolean7 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray5);
        java.lang.Class<?> wildcardClass8 = objArray5.getClass();
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        java.lang.Object obj29 = new java.lang.Object();
        stackAr25.push(obj29);
        boolean boolean31 = stackAr17.equals(obj29);
        stackAr1.push((java.lang.Object) stackAr17);
        boolean boolean33 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr();
        int int35 = stackAr34.size();
        java.lang.Object[] objArray41 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean42 = org.autotest.StackAr.repOkFunction((int) 'a', objArray41);
        boolean boolean43 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray41);
        boolean boolean44 = stackAr34.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        java.lang.Object obj50 = new java.lang.Object();
        stackAr46.push(obj50);
        boolean boolean53 = stackAr46.equals((java.lang.Object) (byte) -1);
        boolean boolean54 = stackAr34.equals((java.lang.Object) boolean53);
        boolean boolean55 = stackAr34.isFull();
        org.autotest.StackAr stackAr57 = new org.autotest.StackAr((int) '#');
        boolean boolean58 = stackAr57.isEmpty();
        int int59 = stackAr57.size();
        stackAr57.push((java.lang.Object) (byte) 100);
        stackAr34.push((java.lang.Object) (byte) 100);
        stackAr34.push((java.lang.Object) 10.0f);
        java.lang.Object obj65 = stackAr34.top();
        stackAr1.push((java.lang.Object) stackAr34);
        boolean boolean67 = stackAr34.isFull();
        java.lang.String str68 = stackAr34.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + obj65 + "' != '" + 10.0f + "'", obj65, 10.0f);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "[100,10.0]" + "'", str68, "[100,10.0]");
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        stackAr6.push((java.lang.Object) '4');
        java.lang.String str12 = stackAr6.toString();
        java.lang.Object obj13 = stackAr6.top();
        boolean boolean14 = stackAr6.isEmpty();
        boolean boolean15 = stackAr1.equals((java.lang.Object) boolean14);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.Object obj21 = new java.lang.Object();
        stackAr17.push(obj21);
        boolean boolean24 = stackAr17.equals((java.lang.Object) (byte) -1);
        int int25 = stackAr17.size();
        java.lang.Object obj26 = stackAr17.top();
        boolean boolean27 = stackAr1.equals((java.lang.Object) stackAr17);
        java.lang.Object obj28 = stackAr17.top();
        java.lang.Object obj29 = stackAr17.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj30 = stackAr17.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[4]" + "'", str12, "[4]");
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + '4' + "'", obj13, '4');
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr24.isEmpty();
        int int26 = stackAr24.size();
        boolean boolean27 = stackAr24.isEmpty();
        boolean boolean29 = stackAr24.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr(0);
        stackAr24.push((java.lang.Object) 0);
        stackAr8.push((java.lang.Object) 0);
        int int34 = stackAr8.size();
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr36.isEmpty();
        int int38 = stackAr36.size();
        boolean boolean39 = stackAr36.isEmpty();
        stackAr36.push((java.lang.Object) (short) 0);
        int int42 = stackAr36.size();
        boolean boolean43 = stackAr36.isEmpty();
        java.lang.String str44 = stackAr36.toString();
        stackAr8.push((java.lang.Object) stackAr36);
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean49 = stackAr47.equals((java.lang.Object) (byte) 1);
        boolean boolean50 = stackAr47.isFull();
        boolean boolean51 = stackAr47.isFull();
        boolean boolean52 = stackAr47.isFull();
        int int53 = stackAr47.size();
        boolean boolean54 = stackAr47.isEmpty();
        org.autotest.StackAr stackAr56 = new org.autotest.StackAr((int) '#');
        boolean boolean58 = stackAr56.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr60 = new org.autotest.StackAr((int) '#');
        boolean boolean61 = stackAr60.isEmpty();
        int int62 = stackAr60.size();
        boolean boolean64 = stackAr60.equals((java.lang.Object) 100L);
        boolean boolean65 = stackAr60.isFull();
        stackAr56.push((java.lang.Object) stackAr60);
        boolean boolean67 = stackAr47.equals((java.lang.Object) stackAr56);
        stackAr8.push((java.lang.Object) stackAr47);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "[0]" + "'", str44, "[0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) (short) 1);
        java.lang.Class<?> wildcardClass7 = stackAr6.getClass();
        boolean boolean8 = stackAr1.equals((java.lang.Object) wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        int int9 = stackAr1.size();
        java.lang.String str10 = stackAr1.toString();
        int int11 = stackAr1.size();
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object[] objArray21 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean22 = org.autotest.StackAr.repOkFunction((int) 'a', objArray21);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray21);
        boolean boolean24 = org.autotest.StackAr.repOkFunction(100, objArray21);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray21);
        boolean boolean26 = org.autotest.StackAr.repOkFunction((int) '#', objArray21);
        boolean boolean27 = stackAr1.equals((java.lang.Object) objArray21);
        boolean boolean28 = stackAr1.isFull();
        java.lang.Object obj29 = null;
        stackAr1.push(obj29);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        java.lang.String str11 = stackAr5.toString();
        boolean boolean12 = stackAr5.isEmpty();
        boolean boolean13 = stackAr5.isFull();
        java.lang.Object obj14 = stackAr5.top();
        java.lang.String str15 = stackAr5.toString();
        stackAr1.push((java.lang.Object) stackAr5);
        int int17 = stackAr5.size();
        java.lang.String str18 = stackAr5.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        java.lang.String str5 = stackAr1.toString();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isFull();
        int int13 = stackAr7.size();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr15.isEmpty();
        int int17 = stackAr15.size();
        boolean boolean18 = stackAr15.isEmpty();
        boolean boolean19 = stackAr7.equals((java.lang.Object) stackAr15);
        java.lang.String str20 = stackAr15.toString();
        boolean boolean21 = stackAr1.equals((java.lang.Object) str20);
        java.lang.String str22 = stackAr1.toString();
        boolean boolean23 = stackAr1.isEmpty();
        boolean boolean24 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj25 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr((int) '#');
        boolean boolean4 = stackAr2.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr6.isEmpty();
        int int8 = stackAr6.size();
        boolean boolean10 = stackAr6.equals((java.lang.Object) 100L);
        boolean boolean11 = stackAr6.isFull();
        stackAr2.push((java.lang.Object) stackAr6);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        java.lang.String str20 = stackAr16.toString();
        java.lang.Object[] objArray28 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) 'a', objArray28);
        boolean boolean30 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray28);
        boolean boolean31 = org.autotest.StackAr.repOkFunction(100, objArray28);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray28);
        stackAr16.push((java.lang.Object) objArray28);
        boolean boolean34 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray28);
        boolean boolean35 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray28);
        stackAr6.push((java.lang.Object) objArray28);
        boolean boolean37 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray28);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[]" + "'", str20, "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) 1);
        java.lang.Object obj6 = stackAr1.top();
        int int7 = stackAr1.size();
        java.lang.Class<?> wildcardClass8 = stackAr1.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 1 + "'", obj6, 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object[] objArray7 = new java.lang.Object[] { 1.0d };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray7);
        java.lang.Class<?> wildcardClass9 = objArray7.getClass();
        boolean boolean10 = stackAr1.equals((java.lang.Object) wildcardClass9);
        boolean boolean11 = stackAr1.isFull();
        java.lang.String str12 = stackAr1.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        stackAr8.push((java.lang.Object) stackAr12);
        int int19 = stackAr8.size();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj21 = stackAr1.pop();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        boolean boolean27 = stackAr23.isFull();
        boolean boolean28 = stackAr23.isFull();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str31 = stackAr30.toString();
        boolean boolean32 = stackAr30.isFull();
        stackAr30.push((java.lang.Object) 1);
        boolean boolean35 = stackAr30.isEmpty();
        boolean boolean36 = stackAr23.equals((java.lang.Object) stackAr30);
        java.lang.Object obj37 = stackAr30.top();
        java.lang.Object obj38 = stackAr30.pop();
        stackAr1.push(obj38);
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean43 = stackAr41.equals((java.lang.Object) (byte) 1);
        boolean boolean44 = stackAr41.isFull();
        stackAr41.push((java.lang.Object) '4');
        java.lang.String str47 = stackAr41.toString();
        java.lang.Object obj48 = stackAr41.pop();
        stackAr1.push(obj48);
        boolean boolean50 = stackAr1.isFull();
        org.autotest.StackAr stackAr52 = new org.autotest.StackAr((int) '#');
        boolean boolean54 = stackAr52.equals((java.lang.Object) (byte) 1);
        boolean boolean55 = stackAr52.isFull();
        java.lang.Object obj56 = new java.lang.Object();
        stackAr52.push(obj56);
        boolean boolean58 = stackAr52.isFull();
        java.lang.String str59 = stackAr52.toString();
        stackAr52.push((java.lang.Object) (byte) 0);
        boolean boolean62 = stackAr52.isEmpty();
        java.lang.Object obj63 = stackAr52.top();
        java.lang.Object obj64 = stackAr52.top();
        stackAr1.push((java.lang.Object) stackAr52);
        int int66 = stackAr1.size();
        org.autotest.StackAr stackAr68 = new org.autotest.StackAr((int) '#');
        boolean boolean70 = stackAr68.equals((java.lang.Object) (byte) 1);
        boolean boolean71 = stackAr68.isFull();
        java.lang.String str72 = stackAr68.toString();
        java.lang.Object[] objArray80 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean81 = org.autotest.StackAr.repOkFunction((int) 'a', objArray80);
        boolean boolean82 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray80);
        boolean boolean83 = org.autotest.StackAr.repOkFunction(100, objArray80);
        boolean boolean84 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray80);
        stackAr68.push((java.lang.Object) objArray80);
        boolean boolean86 = stackAr68.isEmpty();
        java.lang.Object obj87 = stackAr68.top();
        java.lang.Object obj88 = stackAr68.pop();
        stackAr1.push((java.lang.Object) stackAr68);
        int int90 = stackAr68.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + 1 + "'", obj37, 1);
        org.junit.Assert.assertEquals("'" + obj38 + "' != '" + 1 + "'", obj38, 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[4]" + "'", str47, "[4]");
        org.junit.Assert.assertEquals("'" + obj48 + "' != '" + '4' + "'", obj48, '4');
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + obj63 + "' != '" + (byte) 0 + "'", obj63, (byte) 0);
        org.junit.Assert.assertEquals("'" + obj64 + "' != '" + (byte) 0 + "'", obj64, (byte) 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[]" + "'", str72, "[]");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) '4', objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction(0, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        java.lang.String str9 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[0]" + "'", str9, "[0]");
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isFull();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isEmpty();
        boolean boolean21 = stackAr17.isEmpty();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        stackAr1.push((java.lang.Object) int23);
        boolean boolean25 = stackAr1.isEmpty();
        int int26 = stackAr1.size();
        java.lang.Class<?> wildcardClass27 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        java.lang.String str2 = stackAr1.toString();
        int int3 = stackAr1.size();
        int int4 = stackAr1.size();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.String str10 = stackAr6.toString();
        int int11 = stackAr6.size();
        java.lang.String str12 = stackAr6.toString();
        java.lang.String str13 = stackAr6.toString();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr15.isEmpty();
        int int17 = stackAr15.size();
        boolean boolean18 = stackAr15.isFull();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        java.lang.Object obj24 = new java.lang.Object();
        stackAr20.push(obj24);
        boolean boolean26 = stackAr20.isFull();
        java.lang.String str27 = stackAr20.toString();
        stackAr20.push((java.lang.Object) (byte) 0);
        stackAr15.push((java.lang.Object) stackAr20);
        java.lang.Object obj31 = stackAr20.pop();
        boolean boolean32 = stackAr20.isEmpty();
        boolean boolean33 = stackAr20.isFull();
        boolean boolean34 = stackAr6.equals((java.lang.Object) stackAr20);
        boolean boolean35 = stackAr1.equals((java.lang.Object) boolean34);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + (byte) 0 + "'", obj31, (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr4.equals((java.lang.Object) (byte) 1);
        stackAr4.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.String str14 = stackAr10.toString();
        java.lang.Object[] objArray22 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) 'a', objArray22);
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray22);
        boolean boolean25 = org.autotest.StackAr.repOkFunction(100, objArray22);
        boolean boolean26 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray22);
        stackAr10.push((java.lang.Object) objArray22);
        boolean boolean28 = stackAr4.equals((java.lang.Object) objArray22);
        boolean boolean29 = org.autotest.StackAr.repOkFunction(0, objArray22);
        boolean boolean30 = org.autotest.StackAr.repOkFunction((int) '#', objArray22);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray22);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(0, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) ' ', objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        boolean boolean8 = stackAr1.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        boolean boolean14 = stackAr10.isFull();
        int int15 = stackAr10.size();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        stackAr17.push((java.lang.Object) "[]");
        stackAr10.push((java.lang.Object) stackAr17);
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr17);
        boolean boolean24 = stackAr17.isFull();
        boolean boolean25 = stackAr17.isFull();
        java.lang.Object obj26 = stackAr17.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj27 = stackAr17.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "[]" + "'", obj26, "[]");
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isFull();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        int int21 = stackAr19.size();
        boolean boolean22 = stackAr19.isEmpty();
        boolean boolean24 = stackAr19.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr26.equals((java.lang.Object) (byte) 1);
        boolean boolean29 = stackAr26.isFull();
        stackAr26.push((java.lang.Object) '4');
        stackAr19.push((java.lang.Object) stackAr26);
        stackAr12.push((java.lang.Object) stackAr19);
        boolean boolean34 = stackAr19.isEmpty();
        java.lang.Class<?> wildcardClass35 = stackAr19.getClass();
        stackAr1.push((java.lang.Object) stackAr19);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        int int10 = stackAr1.size();
        boolean boolean11 = stackAr1.isFull();
        java.lang.String str12 = stackAr1.toString();
        java.lang.String str13 = stackAr1.toString();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        stackAr15.push((java.lang.Object) "[]");
        java.lang.Object obj20 = stackAr15.top();
        java.lang.Object obj21 = stackAr15.top();
        java.lang.String str22 = stackAr15.toString();
        java.lang.String str23 = stackAr15.toString();
        int int24 = stackAr15.size();
        java.lang.String str25 = stackAr15.toString();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr27.isEmpty();
        int int29 = stackAr27.size();
        boolean boolean30 = stackAr27.isEmpty();
        boolean boolean32 = stackAr27.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr34.equals((java.lang.Object) (byte) 1);
        boolean boolean37 = stackAr34.isFull();
        stackAr34.push((java.lang.Object) '4');
        stackAr27.push((java.lang.Object) stackAr34);
        boolean boolean41 = stackAr27.isEmpty();
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr43.isEmpty();
        int int45 = stackAr43.size();
        boolean boolean46 = stackAr43.isFull();
        org.autotest.StackAr stackAr48 = new org.autotest.StackAr((int) '#');
        boolean boolean50 = stackAr48.equals((java.lang.Object) (byte) 1);
        boolean boolean51 = stackAr48.isFull();
        java.lang.Object obj52 = new java.lang.Object();
        stackAr48.push(obj52);
        boolean boolean54 = stackAr48.isFull();
        java.lang.String str55 = stackAr48.toString();
        stackAr48.push((java.lang.Object) (byte) 0);
        stackAr43.push((java.lang.Object) stackAr48);
        boolean boolean59 = stackAr27.equals((java.lang.Object) stackAr48);
        boolean boolean60 = stackAr48.isEmpty();
        stackAr15.push((java.lang.Object) boolean60);
        stackAr1.push((java.lang.Object) boolean60);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0]" + "'", str12, "[0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0]" + "'", str13, "[0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + "[]" + "'", obj20, "[]");
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "[]" + "'", obj21, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[[]]" + "'", str22, "[[]]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "[[]]" + "'", str23, "[[]]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[[]]" + "'", str25, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        boolean boolean23 = stackAr19.isFull();
        int int24 = stackAr19.size();
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr26.equals((java.lang.Object) (byte) 1);
        stackAr26.push((java.lang.Object) "[]");
        stackAr19.push((java.lang.Object) stackAr26);
        boolean boolean32 = stackAr19.isEmpty();
        java.lang.Object obj33 = stackAr19.pop();
        stackAr1.push(obj33);
        boolean boolean35 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        stackAr37.push((java.lang.Object) "[]");
        int int42 = stackAr37.size();
        boolean boolean44 = stackAr37.equals((java.lang.Object) 'a');
        boolean boolean45 = stackAr37.isEmpty();
        boolean boolean46 = stackAr37.isEmpty();
        stackAr1.push((java.lang.Object) stackAr37);
        boolean boolean48 = stackAr37.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "[[]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "[[]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "[[]]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        java.lang.Class<?> wildcardClass7 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isEmpty();
        int int13 = stackAr1.size();
        java.lang.String str14 = stackAr1.toString();
        java.lang.Object obj15 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        java.lang.String str11 = stackAr7.toString();
        boolean boolean12 = stackAr1.equals((java.lang.Object) str11);
        java.lang.String str13 = stackAr1.toString();
        boolean boolean14 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isEmpty();
        boolean boolean22 = stackAr17.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr24.equals((java.lang.Object) (byte) 1);
        boolean boolean27 = stackAr24.isFull();
        stackAr24.push((java.lang.Object) '4');
        stackAr17.push((java.lang.Object) stackAr24);
        boolean boolean31 = stackAr17.isFull();
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr((int) '#');
        boolean boolean34 = stackAr33.isEmpty();
        int int35 = stackAr33.size();
        boolean boolean36 = stackAr33.isEmpty();
        boolean boolean37 = stackAr33.isEmpty();
        boolean boolean38 = stackAr33.isFull();
        int int39 = stackAr33.size();
        stackAr17.push((java.lang.Object) int39);
        java.lang.Object[] objArray48 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean49 = org.autotest.StackAr.repOkFunction((int) 'a', objArray48);
        boolean boolean50 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray48);
        boolean boolean51 = org.autotest.StackAr.repOkFunction(100, objArray48);
        boolean boolean52 = org.autotest.StackAr.repOkFunction(100, objArray48);
        stackAr17.push((java.lang.Object) objArray48);
        boolean boolean54 = org.autotest.StackAr.repOkFunction((-1), objArray48);
        boolean boolean55 = stackAr1.equals((java.lang.Object) (-1));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean8 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr14.isEmpty();
        int int16 = stackAr14.size();
        boolean boolean18 = stackAr14.equals((java.lang.Object) 100L);
        boolean boolean19 = stackAr14.isFull();
        stackAr10.push((java.lang.Object) stackAr14);
        java.lang.Object obj21 = stackAr10.pop();
        boolean boolean22 = stackAr10.isEmpty();
        int int23 = stackAr10.size();
        stackAr1.push((java.lang.Object) int23);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean8 = stackAr7.isFull();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr10.isEmpty();
        boolean boolean12 = stackAr10.isEmpty();
        int int13 = stackAr10.size();
        int int14 = stackAr10.size();
        boolean boolean15 = stackAr7.equals((java.lang.Object) stackAr10);
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        boolean boolean17 = stackAr1.isFull();
        int int18 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.String str6 = stackAr1.toString();
        boolean boolean7 = stackAr1.isEmpty();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 100);
        boolean boolean13 = stackAr10.isEmpty();
        boolean boolean14 = stackAr10.isEmpty();
        boolean boolean15 = stackAr1.equals((java.lang.Object) stackAr10);
        boolean boolean16 = stackAr10.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        int int7 = stackAr1.size();
        java.lang.Object obj8 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (short) 0 + "'", obj8, (short) 0);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(100, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(1, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(10, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '4');
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr3.equals((java.lang.Object) (byte) 1);
        boolean boolean6 = stackAr3.isFull();
        stackAr3.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        java.lang.String str16 = stackAr10.toString();
        boolean boolean17 = stackAr10.isEmpty();
        boolean boolean18 = stackAr3.equals((java.lang.Object) boolean17);
        boolean boolean19 = stackAr1.equals((java.lang.Object) stackAr3);
        java.lang.Object obj20 = stackAr3.top();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + '4' + "'", obj20, '4');
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj2 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        java.lang.String str10 = stackAr7.toString();
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj12 = stackAr1.pop();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 1);
        boolean boolean17 = stackAr14.isFull();
        boolean boolean18 = stackAr14.isFull();
        stackAr1.push((java.lang.Object) stackAr14);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) 10.0f);
        java.lang.Object obj31 = stackAr0.top();
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr((int) '#');
        boolean boolean34 = stackAr33.isEmpty();
        boolean boolean36 = stackAr33.equals((java.lang.Object) '#');
        int int37 = stackAr33.size();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 100);
        boolean boolean42 = stackAr39.isEmpty();
        java.lang.Class<?> wildcardClass43 = stackAr39.getClass();
        boolean boolean44 = stackAr33.equals((java.lang.Object) wildcardClass43);
        stackAr0.push((java.lang.Object) wildcardClass43);
        java.lang.String str46 = stackAr0.toString();
        org.autotest.StackAr stackAr48 = new org.autotest.StackAr((int) '#');
        boolean boolean50 = stackAr48.equals((java.lang.Object) (byte) 1);
        boolean boolean51 = stackAr48.isFull();
        boolean boolean52 = stackAr48.isFull();
        int int53 = stackAr48.size();
        org.autotest.StackAr stackAr55 = new org.autotest.StackAr((int) '#');
        boolean boolean57 = stackAr55.equals((java.lang.Object) (byte) 1);
        stackAr55.push((java.lang.Object) "[]");
        stackAr48.push((java.lang.Object) stackAr55);
        java.lang.Object obj61 = stackAr55.pop();
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean64 = stackAr55.equals((java.lang.Object) (short) 1);
        int int65 = stackAr55.size();
        boolean boolean66 = stackAr55.isFull();
        java.lang.String str67 = stackAr55.toString();
        boolean boolean68 = stackAr0.equals((java.lang.Object) stackAr55);
        java.lang.Object obj69 = stackAr0.top();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + 10.0f + "'", obj31, 10.0f);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[100,10.0,class org.autotest.StackAr]" + "'", str46, "[100,10.0,class org.autotest.StackAr]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + obj61 + "' != '" + "[]" + "'", obj61, "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[]" + "'", str67, "[]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "class org.autotest.StackAr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "class org.autotest.StackAr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "class org.autotest.StackAr");
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        boolean boolean8 = stackAr1.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        boolean boolean14 = stackAr10.isFull();
        int int15 = stackAr10.size();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        stackAr17.push((java.lang.Object) "[]");
        stackAr10.push((java.lang.Object) stackAr17);
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr17);
        boolean boolean24 = stackAr17.isFull();
        boolean boolean25 = stackAr17.isFull();
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr27.isEmpty();
        boolean boolean29 = stackAr27.isEmpty();
        int int30 = stackAr27.size();
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean33 = stackAr32.isEmpty();
        stackAr27.push((java.lang.Object) stackAr32);
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str37 = stackAr36.toString();
        boolean boolean38 = stackAr36.isFull();
        stackAr36.push((java.lang.Object) 1);
        boolean boolean41 = stackAr36.isEmpty();
        stackAr32.push((java.lang.Object) boolean41);
        java.lang.Object obj43 = stackAr32.top();
        boolean boolean44 = stackAr17.equals(obj43);
        int int45 = stackAr17.size();
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr();
        boolean boolean47 = stackAr46.isEmpty();
        boolean boolean48 = stackAr46.isFull();
        java.lang.String str49 = stackAr46.toString();
        boolean boolean50 = stackAr17.equals((java.lang.Object) stackAr46);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + obj43 + "' != '" + false + "'", obj43, false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(100, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(1, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction(0, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(1, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray8);
        java.lang.Class<?> wildcardClass14 = objArray8.getClass();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr1.pop();
        java.lang.String str16 = stackAr1.toString();
        boolean boolean17 = stackAr1.isFull();
        boolean boolean18 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        java.lang.Object obj24 = new java.lang.Object();
        stackAr20.push(obj24);
        boolean boolean26 = stackAr20.isFull();
        java.lang.Object obj27 = null;
        stackAr20.push(obj27);
        boolean boolean29 = stackAr20.isFull();
        stackAr20.push((java.lang.Object) "[a]");
        stackAr1.push((java.lang.Object) "[a]");
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        boolean boolean36 = stackAr34.isEmpty();
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr38.equals((java.lang.Object) (byte) 100);
        boolean boolean41 = stackAr38.isEmpty();
        boolean boolean42 = stackAr38.isFull();
        boolean boolean43 = stackAr34.equals((java.lang.Object) boolean42);
        boolean boolean44 = stackAr34.isEmpty();
        stackAr1.push((java.lang.Object) stackAr34);
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr47.isEmpty();
        boolean boolean49 = stackAr47.isEmpty();
        int int50 = stackAr47.size();
        boolean boolean51 = stackAr47.isFull();
        boolean boolean52 = stackAr47.isEmpty();
        boolean boolean53 = stackAr47.isEmpty();
        java.lang.String str54 = stackAr47.toString();
        org.autotest.StackAr stackAr55 = new org.autotest.StackAr();
        int int56 = stackAr55.size();
        java.lang.String str57 = stackAr55.toString();
        boolean boolean58 = stackAr55.isFull();
        boolean boolean59 = stackAr47.equals((java.lang.Object) stackAr55);
        stackAr34.push((java.lang.Object) stackAr55);
        java.lang.Object obj61 = stackAr34.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "[]" + "'", str57, "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "[]");
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr21.isEmpty();
        int int23 = stackAr21.size();
        boolean boolean24 = stackAr21.isEmpty();
        boolean boolean26 = stackAr21.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        stackAr28.push((java.lang.Object) '4');
        stackAr21.push((java.lang.Object) stackAr28);
        boolean boolean35 = stackAr21.isFull();
        java.lang.Object obj36 = stackAr21.top();
        stackAr1.push((java.lang.Object) stackAr21);
        java.lang.Object obj38 = stackAr21.top();
        int int39 = stackAr21.size();
        int int40 = stackAr21.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "[4]");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "[4]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.lang.Object[] objArray4 = new java.lang.Object[] { 1.0d };
        boolean boolean5 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray4);
        boolean boolean6 = org.autotest.StackAr.repOkFunction(0, objArray4);
        boolean boolean7 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray4);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        stackAr8.push((java.lang.Object) stackAr12);
        int int19 = stackAr8.size();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj21 = stackAr1.pop();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        boolean boolean27 = stackAr23.isFull();
        boolean boolean28 = stackAr23.isFull();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str31 = stackAr30.toString();
        boolean boolean32 = stackAr30.isFull();
        stackAr30.push((java.lang.Object) 1);
        boolean boolean35 = stackAr30.isEmpty();
        boolean boolean36 = stackAr23.equals((java.lang.Object) stackAr30);
        java.lang.Object obj37 = stackAr30.top();
        java.lang.Object obj38 = stackAr30.pop();
        stackAr1.push(obj38);
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean43 = stackAr41.equals((java.lang.Object) (byte) 1);
        boolean boolean44 = stackAr41.isFull();
        stackAr41.push((java.lang.Object) '4');
        java.lang.String str47 = stackAr41.toString();
        java.lang.Object obj48 = stackAr41.pop();
        stackAr1.push(obj48);
        boolean boolean50 = stackAr1.isFull();
        org.autotest.StackAr stackAr52 = new org.autotest.StackAr((int) '#');
        boolean boolean54 = stackAr52.equals((java.lang.Object) (byte) 1);
        boolean boolean55 = stackAr52.isFull();
        java.lang.Object obj56 = new java.lang.Object();
        stackAr52.push(obj56);
        boolean boolean58 = stackAr52.isFull();
        java.lang.String str59 = stackAr52.toString();
        stackAr52.push((java.lang.Object) (byte) 0);
        boolean boolean62 = stackAr52.isEmpty();
        java.lang.Object obj63 = stackAr52.top();
        java.lang.Object obj64 = stackAr52.top();
        stackAr1.push((java.lang.Object) stackAr52);
        java.lang.Object obj66 = stackAr52.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + 1 + "'", obj37, 1);
        org.junit.Assert.assertEquals("'" + obj38 + "' != '" + 1 + "'", obj38, 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[4]" + "'", str47, "[4]");
        org.junit.Assert.assertEquals("'" + obj48 + "' != '" + '4' + "'", obj48, '4');
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + obj63 + "' != '" + (byte) 0 + "'", obj63, (byte) 0);
        org.junit.Assert.assertEquals("'" + obj64 + "' != '" + (byte) 0 + "'", obj64, (byte) 0);
        org.junit.Assert.assertEquals("'" + obj66 + "' != '" + (byte) 0 + "'", obj66, (byte) 0);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        java.lang.String str11 = stackAr0.toString();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr(0);
        boolean boolean14 = stackAr0.equals((java.lang.Object) 0);
        int int15 = stackAr0.size();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        int int20 = stackAr17.size();
        boolean boolean21 = stackAr0.equals((java.lang.Object) int20);
        boolean boolean22 = stackAr0.isEmpty();
        boolean boolean23 = stackAr0.isFull();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        stackAr6.push((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        boolean boolean31 = stackAr28.isEmpty();
        stackAr28.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        stackAr35.push((java.lang.Object) stackAr39);
        int int46 = stackAr35.size();
        stackAr28.push((java.lang.Object) stackAr35);
        boolean boolean48 = stackAr6.equals((java.lang.Object) stackAr28);
        java.lang.Object obj49 = stackAr6.pop();
        java.lang.Class<?> wildcardClass50 = obj49.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + obj49 + "' != '" + false + "'", obj49, false);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.Object obj7 = null;
        boolean boolean8 = stackAr1.equals(obj7);
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr10.isEmpty();
        boolean boolean12 = stackAr10.isEmpty();
        int int13 = stackAr10.size();
        int int14 = stackAr10.size();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        stackAr16.push((java.lang.Object) '4');
        java.lang.Object obj22 = null;
        boolean boolean23 = stackAr16.equals(obj22);
        stackAr10.push((java.lang.Object) stackAr16);
        java.lang.Class<?> wildcardClass25 = stackAr10.getClass();
        stackAr1.push((java.lang.Object) wildcardClass25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr28.isEmpty();
        boolean boolean31 = stackAr28.equals((java.lang.Object) '#');
        int int32 = stackAr28.size();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr34.equals((java.lang.Object) (byte) 100);
        boolean boolean37 = stackAr34.isEmpty();
        java.lang.Class<?> wildcardClass38 = stackAr34.getClass();
        boolean boolean39 = stackAr28.equals((java.lang.Object) wildcardClass38);
        stackAr1.push((java.lang.Object) boolean39);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        stackAr5.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr11.equals((java.lang.Object) (byte) 1);
        boolean boolean14 = stackAr11.isFull();
        java.lang.String str15 = stackAr11.toString();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        boolean boolean26 = org.autotest.StackAr.repOkFunction(100, objArray23);
        boolean boolean27 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray23);
        stackAr11.push((java.lang.Object) objArray23);
        boolean boolean29 = stackAr5.equals((java.lang.Object) objArray23);
        boolean boolean30 = org.autotest.StackAr.repOkFunction(0, objArray23);
        boolean boolean31 = org.autotest.StackAr.repOkFunction(0, objArray23);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray23);
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) 'a');
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr(0);
        int int9 = stackAr8.size();
        boolean boolean10 = stackAr1.equals((java.lang.Object) int9);
        int int11 = stackAr1.size();
        java.lang.Object obj12 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + 'a' + "'", obj12, 'a');
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = new java.lang.Object();
        stackAr8.push(obj12);
        java.lang.String str14 = stackAr8.toString();
        boolean boolean15 = stackAr8.isEmpty();
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean21 = stackAr18.isEmpty();
        boolean boolean23 = stackAr18.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        stackAr25.push((java.lang.Object) '4');
        stackAr18.push((java.lang.Object) stackAr25);
        boolean boolean32 = stackAr18.isEmpty();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        int int36 = stackAr34.size();
        boolean boolean37 = stackAr34.isFull();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        boolean boolean45 = stackAr39.isFull();
        java.lang.String str46 = stackAr39.toString();
        stackAr39.push((java.lang.Object) (byte) 0);
        stackAr34.push((java.lang.Object) stackAr39);
        boolean boolean50 = stackAr18.equals((java.lang.Object) stackAr39);
        stackAr1.push((java.lang.Object) stackAr18);
        java.lang.Object obj52 = stackAr1.top();
        boolean boolean54 = stackAr1.equals((java.lang.Object) (-1L));
        int int55 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "[[4]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "[[4]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "[[4]]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        boolean boolean20 = stackAr1.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) (byte) 0);
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr22);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        java.lang.String str11 = stackAr0.toString();
        java.lang.String str12 = stackAr0.toString();
        java.lang.String str13 = stackAr0.toString();
        boolean boolean14 = stackAr0.isFull();
        java.lang.Object[] objArray18 = new java.lang.Object[] { 1.0d };
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray18);
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) 'a', objArray18);
        boolean boolean21 = stackAr0.equals((java.lang.Object) boolean20);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str9 = stackAr8.toString();
        boolean boolean10 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) 1);
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        boolean boolean20 = stackAr16.isFull();
        int int21 = stackAr16.size();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        boolean boolean25 = stackAr23.isEmpty();
        int int26 = stackAr23.size();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        stackAr28.push((java.lang.Object) "[]");
        java.lang.Object obj33 = stackAr28.pop();
        boolean boolean34 = stackAr23.equals((java.lang.Object) stackAr28);
        boolean boolean35 = stackAr16.equals((java.lang.Object) stackAr28);
        boolean boolean36 = stackAr16.isFull();
        boolean boolean37 = stackAr8.equals((java.lang.Object) boolean36);
        int int38 = stackAr8.size();
        boolean boolean39 = stackAr8.isFull();
        int int40 = stackAr8.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "[]" + "'", obj33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) 1);
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) '4');
        boolean boolean14 = stackAr7.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        boolean boolean20 = stackAr16.isFull();
        int int21 = stackAr16.size();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        stackAr23.push((java.lang.Object) "[]");
        stackAr16.push((java.lang.Object) stackAr23);
        boolean boolean29 = stackAr7.equals((java.lang.Object) stackAr23);
        boolean boolean30 = stackAr23.isFull();
        boolean boolean31 = stackAr23.isFull();
        boolean boolean32 = stackAr23.isEmpty();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr34.equals((java.lang.Object) (byte) 1);
        boolean boolean37 = stackAr34.isFull();
        java.lang.Object obj38 = new java.lang.Object();
        stackAr34.push(obj38);
        boolean boolean40 = stackAr34.isFull();
        java.lang.String str41 = stackAr34.toString();
        java.lang.Object obj42 = stackAr34.top();
        java.lang.Object obj43 = stackAr34.top();
        java.lang.Object obj44 = stackAr34.pop();
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean47 = stackAr46.isEmpty();
        boolean boolean48 = stackAr46.isEmpty();
        int int49 = stackAr46.size();
        org.autotest.StackAr stackAr51 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean52 = stackAr51.isEmpty();
        stackAr46.push((java.lang.Object) stackAr51);
        boolean boolean54 = stackAr34.equals((java.lang.Object) stackAr51);
        org.autotest.StackAr stackAr56 = new org.autotest.StackAr((int) '#');
        boolean boolean58 = stackAr56.equals((java.lang.Object) (byte) 1);
        boolean boolean59 = stackAr56.isFull();
        boolean boolean60 = stackAr56.isFull();
        int int61 = stackAr56.size();
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) '#');
        boolean boolean65 = stackAr63.equals((java.lang.Object) (byte) 1);
        stackAr63.push((java.lang.Object) "[]");
        stackAr56.push((java.lang.Object) stackAr63);
        java.lang.Object obj69 = stackAr63.pop();
        org.autotest.StackAr stackAr71 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean72 = stackAr63.equals((java.lang.Object) (short) 1);
        int int73 = stackAr63.size();
        java.lang.Object[] objArray82 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean83 = org.autotest.StackAr.repOkFunction((int) 'a', objArray82);
        boolean boolean84 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray82);
        boolean boolean85 = org.autotest.StackAr.repOkFunction(100, objArray82);
        boolean boolean86 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray82);
        boolean boolean87 = org.autotest.StackAr.repOkFunction((int) '#', objArray82);
        stackAr63.push((java.lang.Object) '#');
        boolean boolean89 = stackAr34.equals((java.lang.Object) '#');
        java.lang.Class<?> wildcardClass90 = stackAr34.getClass();
        boolean boolean91 = stackAr23.equals((java.lang.Object) wildcardClass90);
        boolean boolean92 = stackAr1.equals((java.lang.Object) wildcardClass90);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + obj69 + "' != '" + "[]" + "'", obj69, "[]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray4 = new java.lang.Object[] { 1.0d };
        boolean boolean5 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray4);
        java.lang.Class<?> wildcardClass6 = objArray4.getClass();
        boolean boolean7 = stackAr0.equals((java.lang.Object) objArray4);
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr13.isEmpty();
        int int15 = stackAr13.size();
        boolean boolean17 = stackAr13.equals((java.lang.Object) 100L);
        boolean boolean18 = stackAr13.isFull();
        stackAr9.push((java.lang.Object) stackAr13);
        boolean boolean20 = stackAr9.isEmpty();
        java.lang.Object obj21 = stackAr9.top();
        stackAr0.push((java.lang.Object) stackAr9);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr24.equals((java.lang.Object) (byte) 1);
        stackAr24.push((java.lang.Object) "[]");
        int int29 = stackAr24.size();
        boolean boolean31 = stackAr24.equals((java.lang.Object) 'a');
        int int32 = stackAr24.size();
        java.lang.Object obj33 = stackAr24.top();
        stackAr0.push((java.lang.Object) stackAr24);
        java.lang.Object obj35 = stackAr24.top();
        boolean boolean36 = stackAr24.isFull();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "[]" + "'", obj33, "[]");
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + "[]" + "'", obj35, "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        java.lang.String str4 = stackAr1.toString();
        boolean boolean5 = stackAr1.isEmpty();
        int int6 = stackAr1.size();
        int int7 = stackAr1.size();
        java.lang.Object[] objArray16 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) 'a', objArray16);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray16);
        boolean boolean19 = org.autotest.StackAr.repOkFunction(100, objArray16);
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray16);
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) '#', objArray16);
        stackAr1.push((java.lang.Object) boolean21);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        java.lang.Object obj29 = new java.lang.Object();
        stackAr25.push(obj29);
        boolean boolean31 = stackAr17.equals(obj29);
        stackAr1.push((java.lang.Object) stackAr17);
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr34.equals((java.lang.Object) (byte) 1);
        boolean boolean37 = stackAr34.isFull();
        boolean boolean38 = stackAr34.isFull();
        boolean boolean39 = stackAr34.isFull();
        int int40 = stackAr34.size();
        boolean boolean42 = stackAr34.equals((java.lang.Object) 'a');
        java.lang.String str43 = stackAr34.toString();
        org.autotest.StackAr stackAr45 = new org.autotest.StackAr((int) '#');
        java.lang.String str46 = stackAr45.toString();
        boolean boolean48 = stackAr45.equals((java.lang.Object) 10L);
        stackAr34.push((java.lang.Object) boolean48);
        java.lang.Object obj50 = stackAr34.top();
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) (short) 1);
        org.autotest.StackAr stackAr54 = new org.autotest.StackAr();
        int int55 = stackAr54.size();
        org.autotest.StackAr stackAr57 = new org.autotest.StackAr((int) '#');
        boolean boolean59 = stackAr57.equals((java.lang.Object) (byte) 1);
        boolean boolean60 = stackAr57.isFull();
        boolean boolean61 = stackAr57.isFull();
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) '#');
        boolean boolean64 = stackAr63.isEmpty();
        int int65 = stackAr63.size();
        boolean boolean66 = stackAr63.isEmpty();
        boolean boolean68 = stackAr63.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr70 = new org.autotest.StackAr((int) '#');
        boolean boolean72 = stackAr70.equals((java.lang.Object) (byte) 1);
        boolean boolean73 = stackAr70.isFull();
        stackAr70.push((java.lang.Object) '4');
        stackAr63.push((java.lang.Object) stackAr70);
        java.lang.String str77 = stackAr70.toString();
        java.lang.Class<?> wildcardClass78 = stackAr70.getClass();
        org.autotest.StackAr stackAr80 = new org.autotest.StackAr((int) '#');
        boolean boolean82 = stackAr80.equals((java.lang.Object) (byte) 1);
        boolean boolean83 = stackAr80.isFull();
        java.lang.Object obj84 = new java.lang.Object();
        stackAr80.push(obj84);
        boolean boolean87 = stackAr80.equals((java.lang.Object) (byte) -1);
        java.lang.Class<?> wildcardClass88 = stackAr80.getClass();
        java.lang.Object[] objArray89 = new java.lang.Object[] { (short) 1, stackAr54, boolean61, stackAr70, wildcardClass88 };
        boolean boolean90 = org.autotest.StackAr.repOkFunction((int) 'a', objArray89);
        stackAr34.push((java.lang.Object) 'a');
        java.lang.Object obj92 = stackAr34.top();
        boolean boolean93 = stackAr34.isEmpty();
        stackAr17.push((java.lang.Object) stackAr34);
        java.lang.String str95 = stackAr34.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + obj50 + "' != '" + false + "'", obj50, false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[4]" + "'", str77, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + obj92 + "' != '" + 'a' + "'", obj92, 'a');
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "[false,a]" + "'", str95, "[false,a]");
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) (short) 1);
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr();
        int int5 = stackAr4.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        boolean boolean11 = stackAr7.isFull();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr13.isEmpty();
        int int15 = stackAr13.size();
        boolean boolean16 = stackAr13.isEmpty();
        boolean boolean18 = stackAr13.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        stackAr20.push((java.lang.Object) '4');
        stackAr13.push((java.lang.Object) stackAr20);
        java.lang.String str27 = stackAr20.toString();
        java.lang.Class<?> wildcardClass28 = stackAr20.getClass();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr30.equals((java.lang.Object) (byte) 1);
        boolean boolean33 = stackAr30.isFull();
        java.lang.Object obj34 = new java.lang.Object();
        stackAr30.push(obj34);
        boolean boolean37 = stackAr30.equals((java.lang.Object) (byte) -1);
        java.lang.Class<?> wildcardClass38 = stackAr30.getClass();
        java.lang.Object[] objArray39 = new java.lang.Object[] { (short) 1, stackAr4, boolean11, stackAr20, wildcardClass38 };
        boolean boolean40 = org.autotest.StackAr.repOkFunction((int) 'a', objArray39);
        boolean boolean41 = org.autotest.StackAr.repOkFunction(2, objArray39);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[4]" + "'", str27, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        java.lang.String str11 = stackAr0.toString();
        java.lang.String str12 = stackAr0.toString();
        java.lang.String str13 = stackAr0.toString();
        java.lang.String str14 = stackAr0.toString();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr();
        int int16 = stackAr15.size();
        java.lang.Object[] objArray22 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) 'a', objArray22);
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray22);
        boolean boolean25 = stackAr15.equals((java.lang.Object) (byte) 10);
        java.lang.String str26 = stackAr15.toString();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr(0);
        boolean boolean29 = stackAr15.equals((java.lang.Object) 0);
        int int30 = stackAr15.size();
        stackAr0.push((java.lang.Object) stackAr15);
        boolean boolean32 = stackAr15.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[]" + "'", str14, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        java.lang.String str21 = stackAr0.toString();
        int int22 = stackAr0.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = stackAr0.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.String str6 = stackAr1.toString();
        boolean boolean7 = stackAr1.isEmpty();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr10.isEmpty();
        int int12 = stackAr10.size();
        boolean boolean13 = stackAr10.isEmpty();
        stackAr10.push((java.lang.Object) (short) 0);
        int int16 = stackAr10.size();
        boolean boolean17 = stackAr10.isEmpty();
        boolean boolean18 = stackAr10.isEmpty();
        java.lang.Object obj19 = stackAr10.pop();
        stackAr1.push((java.lang.Object) stackAr10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (short) 0 + "'", obj19, (short) 0);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(100, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(10, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        boolean boolean10 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass11 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        int int10 = stackAr1.size();
        boolean boolean11 = stackAr1.isFull();
        java.lang.String str12 = stackAr1.toString();
        java.lang.String str13 = stackAr1.toString();
        boolean boolean14 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[0]" + "'", str12, "[0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[0]" + "'", str13, "[0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        int int11 = stackAr1.size();
        boolean boolean12 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) 1);
        java.lang.Object obj6 = stackAr1.top();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        java.lang.String str12 = stackAr8.toString();
        int int13 = stackAr8.size();
        boolean boolean14 = stackAr8.isFull();
        boolean boolean15 = stackAr1.equals((java.lang.Object) boolean14);
        java.lang.String str16 = stackAr1.toString();
        java.lang.String str17 = stackAr1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 1 + "'", obj6, 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[1]" + "'", str16, "[1]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[1]" + "'", str17, "[1]");
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((-1), objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(0, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        java.lang.String str9 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.String str8 = stackAr1.toString();
        boolean boolean9 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "[]" + "'", obj6, "[]");
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "[]" + "'", obj7, "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[[]]" + "'", str8, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean11 = stackAr10.isFull();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr10);
        boolean boolean13 = stackAr1.isEmpty();
        int int14 = stackAr1.size();
        boolean boolean16 = stackAr1.equals((java.lang.Object) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        java.lang.String str4 = stackAr1.toString();
        boolean boolean5 = stackAr1.isEmpty();
        int int6 = stackAr1.size();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isFull();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 1);
        boolean boolean17 = stackAr14.isFull();
        java.lang.Object obj18 = new java.lang.Object();
        stackAr14.push(obj18);
        boolean boolean20 = stackAr14.isFull();
        java.lang.String str21 = stackAr14.toString();
        stackAr14.push((java.lang.Object) (byte) 0);
        stackAr9.push((java.lang.Object) stackAr14);
        boolean boolean25 = stackAr14.isFull();
        java.lang.Object[] objArray31 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) 'a', objArray31);
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray31);
        stackAr14.push((java.lang.Object) boolean33);
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 100);
        boolean boolean39 = stackAr36.isEmpty();
        stackAr36.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean49 = stackAr47.equals((java.lang.Object) (byte) 1);
        boolean boolean50 = stackAr47.isFull();
        java.lang.Object obj51 = new java.lang.Object();
        stackAr47.push(obj51);
        stackAr43.push((java.lang.Object) stackAr47);
        int int54 = stackAr43.size();
        stackAr36.push((java.lang.Object) stackAr43);
        boolean boolean56 = stackAr14.equals((java.lang.Object) stackAr36);
        java.lang.String str57 = stackAr14.toString();
        org.autotest.StackAr stackAr59 = new org.autotest.StackAr((int) '#');
        boolean boolean61 = stackAr59.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) '#');
        boolean boolean64 = stackAr63.isEmpty();
        int int65 = stackAr63.size();
        boolean boolean67 = stackAr63.equals((java.lang.Object) 100L);
        boolean boolean68 = stackAr63.isFull();
        stackAr59.push((java.lang.Object) stackAr63);
        boolean boolean70 = stackAr59.isEmpty();
        java.lang.Object obj71 = stackAr59.top();
        java.lang.Object obj72 = stackAr59.top();
        stackAr14.push((java.lang.Object) stackAr59);
        stackAr1.push((java.lang.Object) stackAr59);
        org.autotest.StackAr stackAr76 = new org.autotest.StackAr((int) '#');
        boolean boolean77 = stackAr76.isEmpty();
        boolean boolean79 = stackAr76.equals((java.lang.Object) '#');
        int int80 = stackAr76.size();
        org.autotest.StackAr stackAr82 = new org.autotest.StackAr((int) '#');
        boolean boolean84 = stackAr82.equals((java.lang.Object) (byte) 100);
        boolean boolean85 = stackAr82.isEmpty();
        java.lang.Class<?> wildcardClass86 = stackAr82.getClass();
        boolean boolean87 = stackAr76.equals((java.lang.Object) wildcardClass86);
        stackAr59.push((java.lang.Object) boolean87);
        java.lang.Object obj89 = stackAr59.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "[]");
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "[]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + obj89 + "' != '" + false + "'", obj89, false);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.String str8 = stackAr1.toString();
        java.lang.String str9 = stackAr1.toString();
        int int10 = stackAr1.size();
        boolean boolean11 = stackAr1.isFull();
        java.lang.Object obj12 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "[]" + "'", obj6, "[]");
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "[]" + "'", obj7, "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[[]]" + "'", str8, "[[]]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[[]]" + "'", str9, "[[]]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "[]" + "'", obj12, "[]");
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) 1);
        java.lang.Object obj6 = stackAr1.top();
        int int7 = stackAr1.size();
        java.lang.String str8 = stackAr1.toString();
        java.lang.String str9 = stackAr1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 1 + "'", obj6, 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[1]" + "'", str8, "[1]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[1]" + "'", str9, "[1]");
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        java.lang.String str11 = stackAr7.toString();
        boolean boolean12 = stackAr1.equals((java.lang.Object) str11);
        int int13 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        java.lang.String str2 = stackAr1.toString();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        int int6 = stackAr4.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        boolean boolean12 = stackAr8.isFull();
        int int13 = stackAr8.size();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        stackAr15.push((java.lang.Object) "[]");
        stackAr8.push((java.lang.Object) stackAr15);
        java.lang.Object obj21 = stackAr15.pop();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean24 = stackAr23.isFull();
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr26.isEmpty();
        boolean boolean28 = stackAr26.isEmpty();
        int int29 = stackAr26.size();
        int int30 = stackAr26.size();
        boolean boolean31 = stackAr23.equals((java.lang.Object) stackAr26);
        boolean boolean32 = stackAr15.equals((java.lang.Object) boolean31);
        boolean boolean33 = stackAr4.equals((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr15);
        java.lang.Object obj35 = stackAr1.top();
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
        int int37 = stackAr36.size();
        java.lang.Object[] objArray43 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean44 = org.autotest.StackAr.repOkFunction((int) 'a', objArray43);
        boolean boolean45 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray43);
        boolean boolean46 = stackAr36.equals((java.lang.Object) (byte) 10);
        java.lang.String str47 = stackAr36.toString();
        java.lang.String str48 = stackAr36.toString();
        java.lang.String str49 = stackAr36.toString();
        stackAr1.push((java.lang.Object) stackAr36);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + obj21 + "' != '" + "[]" + "'", obj21, "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "[]" + "'", str48, "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[]" + "'", str49, "[]");
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        java.lang.String str14 = stackAr8.toString();
        java.lang.Object obj15 = stackAr8.top();
        stackAr1.push((java.lang.Object) stackAr8);
        int int17 = stackAr8.size();
        java.lang.String str18 = stackAr8.toString();
        java.lang.Object obj19 = stackAr8.top();
        java.lang.String str20 = stackAr8.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "[4]" + "'", str14, "[4]");
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + '4' + "'", obj15, '4');
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "[4]" + "'", str18, "[4]");
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + '4' + "'", obj19, '4');
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[4]" + "'", str20, "[4]");
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.String str7 = stackAr1.toString();
        int int8 = stackAr1.size();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.String str10 = stackAr1.toString();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        stackAr12.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        java.lang.String str25 = stackAr19.toString();
        boolean boolean26 = stackAr19.isEmpty();
        boolean boolean27 = stackAr12.equals((java.lang.Object) boolean26);
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr29.isEmpty();
        int int31 = stackAr29.size();
        boolean boolean32 = stackAr29.isEmpty();
        boolean boolean34 = stackAr29.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 1);
        boolean boolean39 = stackAr36.isFull();
        stackAr36.push((java.lang.Object) '4');
        stackAr29.push((java.lang.Object) stackAr36);
        boolean boolean43 = stackAr29.isEmpty();
        org.autotest.StackAr stackAr45 = new org.autotest.StackAr((int) '#');
        boolean boolean46 = stackAr45.isEmpty();
        int int47 = stackAr45.size();
        boolean boolean48 = stackAr45.isFull();
        org.autotest.StackAr stackAr50 = new org.autotest.StackAr((int) '#');
        boolean boolean52 = stackAr50.equals((java.lang.Object) (byte) 1);
        boolean boolean53 = stackAr50.isFull();
        java.lang.Object obj54 = new java.lang.Object();
        stackAr50.push(obj54);
        boolean boolean56 = stackAr50.isFull();
        java.lang.String str57 = stackAr50.toString();
        stackAr50.push((java.lang.Object) (byte) 0);
        stackAr45.push((java.lang.Object) stackAr50);
        boolean boolean61 = stackAr29.equals((java.lang.Object) stackAr50);
        stackAr12.push((java.lang.Object) stackAr29);
        java.lang.Object obj63 = stackAr12.top();
        boolean boolean64 = stackAr1.equals((java.lang.Object) stackAr12);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4]" + "'", str7, "[4]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + '4' + "'", obj9, '4');
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[4]" + "'", str10, "[4]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "[[4]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "[[4]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "[[4]]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        java.lang.Object[] objArray27 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) 'a', objArray27);
        boolean boolean29 = org.autotest.StackAr.repOkFunction(0, objArray27);
        boolean boolean30 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray27);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray27);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) '4', objArray27);
        stackAr1.push((java.lang.Object) objArray27);
        java.lang.Object obj34 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj34);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(100, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((-1), objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(1, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction(10, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        java.lang.String str10 = stackAr7.toString();
        stackAr1.push((java.lang.Object) stackAr7);
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 1);
        stackAr13.push((java.lang.Object) "[]");
        int int18 = stackAr13.size();
        java.lang.String str19 = stackAr13.toString();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr();
        int int21 = stackAr20.size();
        java.lang.Object[] objArray27 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) 'a', objArray27);
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean30 = stackAr20.equals((java.lang.Object) (byte) 10);
        java.lang.String str31 = stackAr20.toString();
        stackAr13.push((java.lang.Object) str31);
        int int33 = stackAr13.size();
        stackAr1.push((java.lang.Object) stackAr13);
        int int35 = stackAr13.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[[]]" + "'", str19, "[[]]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr1.pop();
        java.lang.String str16 = stackAr1.toString();
        boolean boolean17 = stackAr1.isEmpty();
        boolean boolean18 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        stackAr6.push((java.lang.Object) "[]");
        int int11 = stackAr6.size();
        java.lang.Object obj12 = stackAr6.top();
        java.lang.String str13 = stackAr6.toString();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr6);
        java.lang.String str15 = stackAr1.toString();
        int int16 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "[]" + "'", obj12, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[[]]" + "'", str13, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        java.lang.String str15 = stackAr9.toString();
        boolean boolean16 = stackAr9.isEmpty();
        boolean boolean17 = stackAr9.isFull();
        java.lang.Object obj18 = stackAr9.top();
        boolean boolean19 = stackAr1.equals((java.lang.Object) stackAr9);
        int int20 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        java.lang.Object[] objArray23 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean24 = org.autotest.StackAr.repOkFunction((int) 'a', objArray23);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray23);
        stackAr6.push((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 100);
        boolean boolean31 = stackAr28.isEmpty();
        stackAr28.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        stackAr35.push((java.lang.Object) stackAr39);
        int int46 = stackAr35.size();
        stackAr28.push((java.lang.Object) stackAr35);
        boolean boolean48 = stackAr6.equals((java.lang.Object) stackAr28);
        java.lang.Object obj49 = stackAr28.top();
        int int50 = stackAr28.size();
        org.autotest.StackAr stackAr52 = new org.autotest.StackAr((int) '#');
        boolean boolean53 = stackAr52.isEmpty();
        boolean boolean54 = stackAr52.isEmpty();
        boolean boolean55 = stackAr52.isFull();
        org.autotest.StackAr stackAr57 = new org.autotest.StackAr((int) '#');
        boolean boolean59 = stackAr57.equals((java.lang.Object) (byte) 1);
        boolean boolean60 = stackAr57.isFull();
        stackAr57.push((java.lang.Object) '4');
        java.lang.String str63 = stackAr57.toString();
        java.lang.Object obj64 = stackAr57.top();
        boolean boolean65 = stackAr57.isEmpty();
        boolean boolean66 = stackAr52.equals((java.lang.Object) boolean65);
        org.autotest.StackAr stackAr68 = new org.autotest.StackAr((int) '#');
        boolean boolean70 = stackAr68.equals((java.lang.Object) (byte) 1);
        boolean boolean71 = stackAr68.isFull();
        java.lang.Object obj72 = new java.lang.Object();
        stackAr68.push(obj72);
        boolean boolean75 = stackAr68.equals((java.lang.Object) (byte) -1);
        int int76 = stackAr68.size();
        java.lang.Object obj77 = stackAr68.top();
        boolean boolean78 = stackAr52.equals((java.lang.Object) stackAr68);
        stackAr28.push((java.lang.Object) stackAr68);
        java.lang.Class<?> wildcardClass80 = stackAr28.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "[4]" + "'", str63, "[4]");
        org.junit.Assert.assertEquals("'" + obj64 + "' != '" + '4' + "'", obj64, '4');
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        java.lang.Object obj6 = stackAr1.pop();
        java.lang.Class<?> wildcardClass7 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "[]" + "'", obj6, "[]");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        stackAr12.push((java.lang.Object) "[]");
        java.lang.Object obj17 = stackAr12.top();
        java.lang.Object obj18 = stackAr12.top();
        java.lang.String str19 = stackAr12.toString();
        java.lang.String str20 = stackAr12.toString();
        int int21 = stackAr12.size();
        java.lang.String str22 = stackAr12.toString();
        boolean boolean23 = stackAr1.equals((java.lang.Object) str22);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
        int int25 = stackAr24.size();
        java.lang.Object[] objArray31 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) 'a', objArray31);
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray31);
        boolean boolean34 = stackAr24.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 1);
        boolean boolean39 = stackAr36.isFull();
        java.lang.Object obj40 = new java.lang.Object();
        stackAr36.push(obj40);
        boolean boolean43 = stackAr36.equals((java.lang.Object) (byte) -1);
        boolean boolean44 = stackAr24.equals((java.lang.Object) boolean43);
        boolean boolean45 = stackAr24.isFull();
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr47.isEmpty();
        int int49 = stackAr47.size();
        stackAr47.push((java.lang.Object) (byte) 100);
        stackAr24.push((java.lang.Object) (byte) 100);
        stackAr24.push((java.lang.Object) 10.0f);
        java.lang.Object obj55 = stackAr24.top();
        stackAr1.push(obj55);
        boolean boolean57 = stackAr1.isFull();
        org.autotest.StackAr stackAr58 = new org.autotest.StackAr();
        int int59 = stackAr58.size();
        java.lang.Object[] objArray65 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean66 = org.autotest.StackAr.repOkFunction((int) 'a', objArray65);
        boolean boolean67 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray65);
        boolean boolean68 = stackAr58.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr70 = new org.autotest.StackAr((int) '#');
        boolean boolean72 = stackAr70.equals((java.lang.Object) (byte) 1);
        boolean boolean73 = stackAr70.isFull();
        java.lang.Object obj74 = new java.lang.Object();
        stackAr70.push(obj74);
        boolean boolean77 = stackAr70.equals((java.lang.Object) (byte) -1);
        boolean boolean78 = stackAr58.equals((java.lang.Object) boolean77);
        boolean boolean79 = stackAr58.isFull();
        org.autotest.StackAr stackAr81 = new org.autotest.StackAr((int) '#');
        boolean boolean82 = stackAr81.isEmpty();
        int int83 = stackAr81.size();
        stackAr81.push((java.lang.Object) (byte) 100);
        stackAr58.push((java.lang.Object) (byte) 100);
        java.lang.String str87 = stackAr58.toString();
        java.lang.Object obj88 = stackAr58.top();
        boolean boolean89 = stackAr1.equals((java.lang.Object) stackAr58);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "[]" + "'", obj17, "[]");
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + "[]" + "'", obj18, "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[[]]" + "'", str19, "[[]]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[[]]" + "'", str20, "[[]]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[[]]" + "'", str22, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + 10.0f + "'", obj55, 10.0f);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "[100]" + "'", str87, "[100]");
        org.junit.Assert.assertEquals("'" + obj88 + "' != '" + (byte) 100 + "'", obj88, (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) '4');
        java.lang.Object obj13 = null;
        boolean boolean14 = stackAr7.equals(obj13);
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj16 = stackAr1.top();
        java.lang.Object obj17 = stackAr1.top();
        java.lang.Object obj18 = stackAr1.pop();
        java.lang.Class<?> wildcardClass19 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[4]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "[4]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "[4]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str9 = stackAr8.toString();
        boolean boolean10 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) 1);
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass16 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str9 = stackAr8.toString();
        boolean boolean10 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) 1);
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr1.toString();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        stackAr17.push((java.lang.Object) "[]");
        int int22 = stackAr17.size();
        boolean boolean24 = stackAr17.equals((java.lang.Object) 'a');
        boolean boolean25 = stackAr17.isEmpty();
        boolean boolean26 = stackAr17.isEmpty();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        stackAr28.push((java.lang.Object) "[]");
        java.lang.Object obj33 = stackAr28.top();
        java.lang.Object obj34 = stackAr28.top();
        java.lang.String str35 = stackAr28.toString();
        java.lang.String str36 = stackAr28.toString();
        int int37 = stackAr28.size();
        java.lang.String str38 = stackAr28.toString();
        boolean boolean39 = stackAr17.equals((java.lang.Object) str38);
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr();
        int int41 = stackAr40.size();
        java.lang.Object[] objArray47 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean48 = org.autotest.StackAr.repOkFunction((int) 'a', objArray47);
        boolean boolean49 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray47);
        boolean boolean50 = stackAr40.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr52 = new org.autotest.StackAr((int) '#');
        boolean boolean54 = stackAr52.equals((java.lang.Object) (byte) 1);
        boolean boolean55 = stackAr52.isFull();
        java.lang.Object obj56 = new java.lang.Object();
        stackAr52.push(obj56);
        boolean boolean59 = stackAr52.equals((java.lang.Object) (byte) -1);
        boolean boolean60 = stackAr40.equals((java.lang.Object) boolean59);
        boolean boolean61 = stackAr40.isFull();
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) '#');
        boolean boolean64 = stackAr63.isEmpty();
        int int65 = stackAr63.size();
        stackAr63.push((java.lang.Object) (byte) 100);
        stackAr40.push((java.lang.Object) (byte) 100);
        stackAr40.push((java.lang.Object) 10.0f);
        java.lang.Object obj71 = stackAr40.top();
        stackAr17.push(obj71);
        org.autotest.StackAr stackAr74 = new org.autotest.StackAr((int) '#');
        boolean boolean75 = stackAr74.isEmpty();
        int int76 = stackAr74.size();
        boolean boolean77 = stackAr74.isEmpty();
        boolean boolean79 = stackAr74.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr81 = new org.autotest.StackAr((int) '#');
        boolean boolean83 = stackAr81.equals((java.lang.Object) (byte) 1);
        boolean boolean84 = stackAr81.isFull();
        stackAr81.push((java.lang.Object) '4');
        stackAr74.push((java.lang.Object) stackAr81);
        java.lang.String str88 = stackAr74.toString();
        java.lang.Object obj89 = stackAr74.pop();
        boolean boolean90 = stackAr74.isFull();
        boolean boolean91 = stackAr17.equals((java.lang.Object) stackAr74);
        boolean boolean92 = stackAr1.equals((java.lang.Object) stackAr17);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + obj33 + "' != '" + "[]" + "'", obj33, "[]");
        org.junit.Assert.assertEquals("'" + obj34 + "' != '" + "[]" + "'", obj34, "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[[]]" + "'", str35, "[[]]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[[]]" + "'", str36, "[[]]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[[]]" + "'", str38, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertEquals("'" + obj71 + "' != '" + 10.0f + "'", obj71, 10.0f);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[[4]]" + "'", str88, "[[4]]");
        org.junit.Assert.assertNotNull(obj89);
        org.junit.Assert.assertEquals(obj89.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj89), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj89), "[4]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        java.lang.Object obj23 = new java.lang.Object();
        stackAr19.push(obj23);
        java.lang.String str25 = stackAr19.toString();
        boolean boolean26 = stackAr19.isEmpty();
        boolean boolean27 = stackAr19.isFull();
        stackAr6.push((java.lang.Object) boolean27);
        java.lang.Object obj29 = stackAr6.top();
        java.lang.String str30 = stackAr6.toString();
        java.lang.Object obj31 = stackAr6.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + obj29 + "' != '" + false + "'", obj29, false);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + false + "'", obj31, false);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        stackAr8.push((java.lang.Object) stackAr12);
        int int19 = stackAr8.size();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj21 = stackAr1.pop();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        boolean boolean27 = stackAr23.isFull();
        boolean boolean28 = stackAr23.isFull();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str31 = stackAr30.toString();
        boolean boolean32 = stackAr30.isFull();
        stackAr30.push((java.lang.Object) 1);
        boolean boolean35 = stackAr30.isEmpty();
        boolean boolean36 = stackAr23.equals((java.lang.Object) stackAr30);
        java.lang.Object obj37 = stackAr30.top();
        java.lang.Object obj38 = stackAr30.pop();
        stackAr1.push(obj38);
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean43 = stackAr41.equals((java.lang.Object) (byte) 1);
        boolean boolean44 = stackAr41.isFull();
        stackAr41.push((java.lang.Object) '4');
        java.lang.String str47 = stackAr41.toString();
        java.lang.Object obj48 = stackAr41.pop();
        stackAr1.push(obj48);
        boolean boolean50 = stackAr1.isFull();
        org.autotest.StackAr stackAr52 = new org.autotest.StackAr((int) '#');
        boolean boolean54 = stackAr52.equals((java.lang.Object) (byte) 1);
        boolean boolean55 = stackAr52.isFull();
        java.lang.Object obj56 = new java.lang.Object();
        stackAr52.push(obj56);
        boolean boolean58 = stackAr52.isFull();
        java.lang.String str59 = stackAr52.toString();
        stackAr52.push((java.lang.Object) (byte) 0);
        boolean boolean62 = stackAr52.isEmpty();
        java.lang.Object obj63 = stackAr52.top();
        java.lang.Object obj64 = stackAr52.top();
        stackAr1.push((java.lang.Object) stackAr52);
        boolean boolean66 = stackAr52.isEmpty();
        org.autotest.StackAr stackAr68 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean69 = stackAr68.isFull();
        org.autotest.StackAr stackAr71 = new org.autotest.StackAr((int) '#');
        boolean boolean72 = stackAr71.isEmpty();
        boolean boolean73 = stackAr71.isEmpty();
        int int74 = stackAr71.size();
        int int75 = stackAr71.size();
        boolean boolean76 = stackAr68.equals((java.lang.Object) stackAr71);
        int int77 = stackAr68.size();
        stackAr52.push((java.lang.Object) stackAr68);
        int int79 = stackAr52.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + 1 + "'", obj37, 1);
        org.junit.Assert.assertEquals("'" + obj38 + "' != '" + 1 + "'", obj38, 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[4]" + "'", str47, "[4]");
        org.junit.Assert.assertEquals("'" + obj48 + "' != '" + '4' + "'", obj48, '4');
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + obj63 + "' != '" + (byte) 0 + "'", obj63, (byte) 0);
        org.junit.Assert.assertEquals("'" + obj64 + "' != '" + (byte) 0 + "'", obj64, (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        java.lang.String str20 = stackAr1.toString();
        java.lang.String str21 = stackAr1.toString();
        boolean boolean22 = stackAr1.isFull();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr24.isEmpty();
        int int26 = stackAr24.size();
        boolean boolean27 = stackAr24.isEmpty();
        boolean boolean29 = stackAr24.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr31.equals((java.lang.Object) (byte) 1);
        boolean boolean34 = stackAr31.isFull();
        stackAr31.push((java.lang.Object) '4');
        stackAr24.push((java.lang.Object) stackAr31);
        java.lang.String str38 = stackAr24.toString();
        java.lang.Object obj39 = stackAr24.pop();
        boolean boolean40 = stackAr24.isFull();
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int) '#');
        boolean boolean43 = stackAr42.isEmpty();
        int int44 = stackAr42.size();
        boolean boolean45 = stackAr42.isEmpty();
        boolean boolean47 = stackAr42.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr49 = new org.autotest.StackAr((int) '#');
        boolean boolean51 = stackAr49.equals((java.lang.Object) (byte) 1);
        boolean boolean52 = stackAr49.isFull();
        stackAr49.push((java.lang.Object) '4');
        stackAr42.push((java.lang.Object) stackAr49);
        boolean boolean56 = stackAr42.isEmpty();
        org.autotest.StackAr stackAr58 = new org.autotest.StackAr((int) '#');
        boolean boolean60 = stackAr58.equals((java.lang.Object) (byte) 1);
        boolean boolean61 = stackAr58.isFull();
        java.lang.Object obj62 = new java.lang.Object();
        stackAr58.push(obj62);
        boolean boolean64 = stackAr42.equals((java.lang.Object) stackAr58);
        org.autotest.StackAr stackAr66 = new org.autotest.StackAr((int) '#');
        boolean boolean67 = stackAr66.isEmpty();
        int int68 = stackAr66.size();
        boolean boolean69 = stackAr66.isEmpty();
        int int70 = stackAr66.size();
        boolean boolean71 = stackAr66.isFull();
        boolean boolean72 = stackAr66.isEmpty();
        boolean boolean73 = stackAr42.equals((java.lang.Object) stackAr66);
        boolean boolean74 = stackAr42.isFull();
        boolean boolean75 = stackAr24.equals((java.lang.Object) boolean74);
        boolean boolean76 = stackAr1.equals((java.lang.Object) boolean75);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "[[4]]" + "'", str38, "[[4]]");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "[4]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str9 = stackAr8.toString();
        boolean boolean10 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) 1);
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        boolean boolean20 = stackAr16.isFull();
        boolean boolean21 = stackAr16.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str24 = stackAr23.toString();
        boolean boolean25 = stackAr23.isFull();
        stackAr23.push((java.lang.Object) 1);
        boolean boolean28 = stackAr23.isEmpty();
        boolean boolean29 = stackAr16.equals((java.lang.Object) stackAr23);
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean32 = stackAr31.isEmpty();
        int int33 = stackAr31.size();
        boolean boolean34 = stackAr31.isEmpty();
        stackAr16.push((java.lang.Object) boolean34);
        int int36 = stackAr16.size();
        boolean boolean37 = stackAr1.equals((java.lang.Object) int36);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        java.lang.Object obj26 = new java.lang.Object();
        stackAr22.push(obj26);
        boolean boolean28 = stackAr22.isFull();
        java.lang.String str29 = stackAr22.toString();
        stackAr22.push((java.lang.Object) (byte) 0);
        stackAr17.push((java.lang.Object) stackAr22);
        boolean boolean33 = stackAr1.equals((java.lang.Object) stackAr22);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr(0);
        int int36 = stackAr35.size();
        boolean boolean37 = stackAr22.equals((java.lang.Object) stackAr35);
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr42.equals((java.lang.Object) (byte) 1);
        stackAr42.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr48 = new org.autotest.StackAr((int) '#');
        boolean boolean50 = stackAr48.equals((java.lang.Object) (byte) 1);
        boolean boolean51 = stackAr48.isFull();
        java.lang.String str52 = stackAr48.toString();
        java.lang.Object[] objArray60 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean61 = org.autotest.StackAr.repOkFunction((int) 'a', objArray60);
        boolean boolean62 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray60);
        boolean boolean63 = org.autotest.StackAr.repOkFunction(100, objArray60);
        boolean boolean64 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray60);
        stackAr48.push((java.lang.Object) objArray60);
        boolean boolean66 = stackAr42.equals((java.lang.Object) objArray60);
        boolean boolean67 = org.autotest.StackAr.repOkFunction(0, objArray60);
        boolean boolean68 = org.autotest.StackAr.repOkFunction(3, objArray60);
        boolean boolean69 = org.autotest.StackAr.repOkFunction(2, objArray60);
        boolean boolean70 = stackAr35.equals((java.lang.Object) boolean69);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        stackAr6.push((java.lang.Object) "[]");
        int int11 = stackAr6.size();
        java.lang.Object obj12 = stackAr6.top();
        java.lang.String str13 = stackAr6.toString();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr6);
        java.lang.String str15 = stackAr1.toString();
        boolean boolean16 = stackAr1.isEmpty();
        boolean boolean17 = stackAr1.isFull();
        boolean boolean19 = stackAr1.equals((java.lang.Object) "[0,1,4]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + obj12 + "' != '" + "[]" + "'", obj12, "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[[]]" + "'", str13, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[]" + "'", str15, "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        java.lang.Object[] objArray13 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) 'a', objArray13);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray13);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(100, objArray13);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray13);
        stackAr1.push((java.lang.Object) objArray13);
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        java.lang.String str21 = stackAr20.toString();
        boolean boolean23 = stackAr20.equals((java.lang.Object) 10L);
        boolean boolean24 = stackAr1.equals((java.lang.Object) 10L);
        boolean boolean25 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        java.lang.Object[] objArray6 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean7 = org.autotest.StackAr.repOkFunction((int) 'a', objArray6);
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray6);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray6);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        java.lang.String str7 = stackAr1.toString();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.String str13 = stackAr9.toString();
        int int14 = stackAr9.size();
        stackAr1.push((java.lang.Object) stackAr9);
        java.lang.Object obj16 = stackAr1.pop();
        java.lang.Class<?> wildcardClass17 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[[]]" + "'", str7, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[]" + "'", str13, "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        java.lang.Object[] objArray11 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) 'a', objArray11);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(0, objArray11);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray11);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray11);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray11);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray11);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray11);
        boolean boolean19 = org.autotest.StackAr.repOkFunction(1, objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        java.lang.String str5 = stackAr1.toString();
        int int6 = stackAr1.size();
        int int7 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str2 = stackAr1.toString();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) 1);
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 1 + "'", obj6, 1);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + 1 + "'", obj7, 1);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        java.lang.String str11 = stackAr0.toString();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr();
        int int13 = stackAr12.size();
        int int14 = stackAr12.size();
        stackAr0.push((java.lang.Object) stackAr12);
        boolean boolean16 = stackAr12.isFull();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        boolean boolean10 = stackAr8.isEmpty();
        int int11 = stackAr8.size();
        boolean boolean12 = stackAr8.isFull();
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) boolean13);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        boolean boolean20 = stackAr16.isFull();
        int int21 = stackAr16.size();
        int int22 = stackAr16.size();
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr16);
        boolean boolean24 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        java.lang.String str16 = stackAr1.toString();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr(0);
        int int19 = stackAr18.size();
        boolean boolean20 = stackAr1.equals((java.lang.Object) stackAr18);
        java.lang.String str21 = stackAr1.toString();
        java.lang.Class<?> wildcardClass22 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[[4]]" + "'", str16, "[[4]]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[[4]]" + "'", str21, "[[4]]");
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Object obj10 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        java.lang.String str16 = stackAr1.toString();
        int int17 = stackAr1.size();
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[[4]]" + "'", str16, "[[4]]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        stackAr1.push((java.lang.Object) (byte) 100);
        boolean boolean6 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        int int17 = stackAr1.size();
        boolean boolean18 = stackAr1.isFull();
        boolean boolean19 = stackAr1.isFull();
        boolean boolean20 = stackAr1.isEmpty();
        boolean boolean21 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr12.isEmpty();
        int int14 = stackAr12.size();
        boolean boolean16 = stackAr12.equals((java.lang.Object) 100L);
        boolean boolean17 = stackAr12.isFull();
        stackAr8.push((java.lang.Object) stackAr12);
        boolean boolean19 = stackAr8.isFull();
        boolean boolean20 = stackAr1.equals((java.lang.Object) stackAr8);
        java.lang.String str21 = stackAr1.toString();
        java.lang.Object obj22 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj22);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.String str6 = stackAr1.toString();
        boolean boolean7 = stackAr1.isEmpty();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 100);
        boolean boolean13 = stackAr10.isEmpty();
        boolean boolean14 = stackAr10.isEmpty();
        boolean boolean15 = stackAr1.equals((java.lang.Object) stackAr10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = stackAr10.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        java.lang.Object obj9 = stackAr1.top();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        java.lang.Object obj12 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        int int10 = stackAr8.size();
        boolean boolean11 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        stackAr15.push((java.lang.Object) '4');
        stackAr8.push((java.lang.Object) stackAr15);
        stackAr1.push((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr24.isEmpty();
        int int26 = stackAr24.size();
        boolean boolean27 = stackAr24.isEmpty();
        boolean boolean29 = stackAr24.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr31.equals((java.lang.Object) (byte) 1);
        boolean boolean34 = stackAr31.isFull();
        stackAr31.push((java.lang.Object) '4');
        stackAr24.push((java.lang.Object) stackAr31);
        boolean boolean38 = stackAr24.isEmpty();
        boolean boolean39 = stackAr24.isFull();
        boolean boolean40 = stackAr24.isEmpty();
        java.lang.Object obj41 = stackAr24.pop();
        boolean boolean43 = stackAr24.equals((java.lang.Object) 0);
        boolean boolean44 = stackAr24.isFull();
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr46.equals((java.lang.Object) (byte) 1);
        boolean boolean49 = stackAr46.isFull();
        java.lang.Object obj50 = new java.lang.Object();
        stackAr46.push(obj50);
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean54 = stackAr53.isEmpty();
        int int55 = stackAr53.size();
        boolean boolean56 = stackAr53.isEmpty();
        boolean boolean58 = stackAr53.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr60 = new org.autotest.StackAr((int) '#');
        boolean boolean62 = stackAr60.equals((java.lang.Object) (byte) 1);
        boolean boolean63 = stackAr60.isFull();
        stackAr60.push((java.lang.Object) '4');
        stackAr53.push((java.lang.Object) stackAr60);
        stackAr46.push((java.lang.Object) stackAr53);
        boolean boolean68 = stackAr53.isEmpty();
        boolean boolean69 = stackAr53.isEmpty();
        boolean boolean70 = stackAr24.equals((java.lang.Object) boolean69);
        boolean boolean71 = stackAr1.equals((java.lang.Object) boolean70);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "[4]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((-1), objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(1, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(0, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(100, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(1, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) '#', objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(100, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) '#', objArray9);
        java.lang.Class<?> wildcardClass16 = objArray9.getClass();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        stackAr8.push((java.lang.Object) stackAr12);
        int int19 = stackAr8.size();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj21 = stackAr1.pop();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        boolean boolean27 = stackAr23.isFull();
        boolean boolean28 = stackAr23.isFull();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str31 = stackAr30.toString();
        boolean boolean32 = stackAr30.isFull();
        stackAr30.push((java.lang.Object) 1);
        boolean boolean35 = stackAr30.isEmpty();
        boolean boolean36 = stackAr23.equals((java.lang.Object) stackAr30);
        java.lang.Object obj37 = stackAr30.top();
        java.lang.Object obj38 = stackAr30.pop();
        stackAr1.push(obj38);
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) (short) 100);
        stackAr1.push((java.lang.Object) stackAr41);
        boolean boolean43 = stackAr1.isEmpty();
        boolean boolean44 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[]" + "'", str31, "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + 1 + "'", obj37, 1);
        org.junit.Assert.assertEquals("'" + obj38 + "' != '" + 1 + "'", obj38, 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr((int) '#');
        boolean boolean4 = stackAr2.equals((java.lang.Object) (byte) 100);
        boolean boolean5 = stackAr2.isEmpty();
        boolean boolean6 = stackAr2.isEmpty();
        boolean boolean7 = stackAr0.equals((java.lang.Object) stackAr2);
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        stackAr9.push((java.lang.Object) "[]");
        int int14 = stackAr9.size();
        boolean boolean16 = stackAr9.equals((java.lang.Object) 'a');
        boolean boolean17 = stackAr9.isEmpty();
        boolean boolean18 = stackAr9.isEmpty();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        stackAr20.push((java.lang.Object) "[]");
        java.lang.Object obj25 = stackAr20.top();
        java.lang.Object obj26 = stackAr20.top();
        java.lang.String str27 = stackAr20.toString();
        java.lang.String str28 = stackAr20.toString();
        int int29 = stackAr20.size();
        java.lang.String str30 = stackAr20.toString();
        boolean boolean31 = stackAr9.equals((java.lang.Object) str30);
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str34 = stackAr33.toString();
        boolean boolean35 = stackAr33.isEmpty();
        int int36 = stackAr33.size();
        java.lang.String str37 = stackAr33.toString();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        boolean boolean43 = stackAr39.isFull();
        boolean boolean44 = stackAr39.isFull();
        int int45 = stackAr39.size();
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr47.isEmpty();
        int int49 = stackAr47.size();
        boolean boolean50 = stackAr47.isEmpty();
        boolean boolean51 = stackAr39.equals((java.lang.Object) stackAr47);
        java.lang.String str52 = stackAr47.toString();
        boolean boolean53 = stackAr33.equals((java.lang.Object) str52);
        java.lang.String str54 = stackAr33.toString();
        boolean boolean55 = stackAr9.equals((java.lang.Object) str54);
        stackAr2.push((java.lang.Object) str54);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + obj25 + "' != '" + "[]" + "'", obj25, "[]");
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "[]" + "'", obj26, "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[[]]" + "'", str27, "[[]]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[[]]" + "'", str28, "[[]]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[[]]" + "'", str30, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "[]" + "'", str37, "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction(0, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction(1, objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean8 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr14.isEmpty();
        int int16 = stackAr14.size();
        boolean boolean18 = stackAr14.equals((java.lang.Object) 100L);
        boolean boolean19 = stackAr14.isFull();
        stackAr10.push((java.lang.Object) stackAr14);
        boolean boolean21 = stackAr1.equals((java.lang.Object) stackAr10);
        java.lang.Object obj22 = stackAr10.top();
        java.lang.Object obj23 = stackAr10.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "[]");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "[]");
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr10.isEmpty();
        int int12 = stackAr10.size();
        boolean boolean13 = stackAr10.isFull();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        java.lang.Object obj19 = new java.lang.Object();
        stackAr15.push(obj19);
        boolean boolean21 = stackAr15.isFull();
        java.lang.String str22 = stackAr15.toString();
        stackAr15.push((java.lang.Object) (byte) 0);
        stackAr10.push((java.lang.Object) stackAr15);
        boolean boolean26 = stackAr15.isFull();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        java.lang.Object obj32 = new java.lang.Object();
        stackAr28.push(obj32);
        java.lang.String str34 = stackAr28.toString();
        boolean boolean35 = stackAr28.isEmpty();
        boolean boolean36 = stackAr28.isFull();
        stackAr15.push((java.lang.Object) boolean36);
        stackAr1.push((java.lang.Object) boolean36);
        boolean boolean39 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        int int17 = stackAr1.size();
        boolean boolean18 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass19 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.Object obj12 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj12);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction(100, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(10, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean11 = stackAr10.isFull();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj13 = stackAr10.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        java.lang.String str7 = stackAr1.toString();
        boolean boolean8 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        boolean boolean16 = stackAr10.isFull();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 1);
        boolean boolean21 = stackAr18.isFull();
        java.lang.Object obj22 = new java.lang.Object();
        stackAr18.push(obj22);
        boolean boolean24 = stackAr18.isFull();
        java.lang.String str25 = stackAr18.toString();
        boolean boolean26 = stackAr10.equals((java.lang.Object) str25);
        stackAr1.push((java.lang.Object) stackAr10);
        boolean boolean28 = stackAr10.isEmpty();
        java.lang.String str29 = stackAr10.toString();
        java.lang.Object obj30 = stackAr10.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        java.lang.Object obj29 = new java.lang.Object();
        stackAr25.push(obj29);
        boolean boolean31 = stackAr17.equals(obj29);
        stackAr1.push((java.lang.Object) stackAr17);
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr34.equals((java.lang.Object) (byte) 1);
        boolean boolean37 = stackAr34.isFull();
        boolean boolean38 = stackAr34.isFull();
        boolean boolean39 = stackAr34.isFull();
        int int40 = stackAr34.size();
        boolean boolean42 = stackAr34.equals((java.lang.Object) 'a');
        java.lang.String str43 = stackAr34.toString();
        org.autotest.StackAr stackAr45 = new org.autotest.StackAr((int) '#');
        java.lang.String str46 = stackAr45.toString();
        boolean boolean48 = stackAr45.equals((java.lang.Object) 10L);
        stackAr34.push((java.lang.Object) boolean48);
        java.lang.Object obj50 = stackAr34.top();
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) (short) 1);
        org.autotest.StackAr stackAr54 = new org.autotest.StackAr();
        int int55 = stackAr54.size();
        org.autotest.StackAr stackAr57 = new org.autotest.StackAr((int) '#');
        boolean boolean59 = stackAr57.equals((java.lang.Object) (byte) 1);
        boolean boolean60 = stackAr57.isFull();
        boolean boolean61 = stackAr57.isFull();
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) '#');
        boolean boolean64 = stackAr63.isEmpty();
        int int65 = stackAr63.size();
        boolean boolean66 = stackAr63.isEmpty();
        boolean boolean68 = stackAr63.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr70 = new org.autotest.StackAr((int) '#');
        boolean boolean72 = stackAr70.equals((java.lang.Object) (byte) 1);
        boolean boolean73 = stackAr70.isFull();
        stackAr70.push((java.lang.Object) '4');
        stackAr63.push((java.lang.Object) stackAr70);
        java.lang.String str77 = stackAr70.toString();
        java.lang.Class<?> wildcardClass78 = stackAr70.getClass();
        org.autotest.StackAr stackAr80 = new org.autotest.StackAr((int) '#');
        boolean boolean82 = stackAr80.equals((java.lang.Object) (byte) 1);
        boolean boolean83 = stackAr80.isFull();
        java.lang.Object obj84 = new java.lang.Object();
        stackAr80.push(obj84);
        boolean boolean87 = stackAr80.equals((java.lang.Object) (byte) -1);
        java.lang.Class<?> wildcardClass88 = stackAr80.getClass();
        java.lang.Object[] objArray89 = new java.lang.Object[] { (short) 1, stackAr54, boolean61, stackAr70, wildcardClass88 };
        boolean boolean90 = org.autotest.StackAr.repOkFunction((int) 'a', objArray89);
        stackAr34.push((java.lang.Object) 'a');
        java.lang.Object obj92 = stackAr34.top();
        boolean boolean93 = stackAr34.isEmpty();
        stackAr17.push((java.lang.Object) stackAr34);
        java.lang.Object obj95 = null;
        stackAr17.push(obj95);
        java.lang.Object obj97 = stackAr17.pop();
        java.lang.Object obj98 = null;
        boolean boolean99 = stackAr17.equals(obj98);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[]" + "'", str43, "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "[]" + "'", str46, "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + obj50 + "' != '" + false + "'", obj50, false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "[4]" + "'", str77, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + obj92 + "' != '" + 'a' + "'", obj92, 'a');
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(obj97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr1.pop();
        java.lang.String str16 = stackAr1.toString();
        boolean boolean17 = stackAr1.isEmpty();
        java.lang.Object[] objArray24 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) 'a', objArray24);
        boolean boolean26 = org.autotest.StackAr.repOkFunction(100, objArray24);
        boolean boolean27 = org.autotest.StackAr.repOkFunction(2, objArray24);
        stackAr1.push((java.lang.Object) objArray24);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "[4]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[]" + "'", str16, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr4.isEmpty();
        boolean boolean6 = stackAr4.isEmpty();
        int int7 = stackAr4.size();
        int int8 = stackAr4.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) stackAr4);
        int int10 = stackAr1.size();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 100);
        boolean boolean16 = stackAr13.isEmpty();
        boolean boolean17 = stackAr13.isEmpty();
        boolean boolean18 = stackAr11.equals((java.lang.Object) stackAr13);
        stackAr1.push((java.lang.Object) stackAr13);
        java.lang.Class<?> wildcardClass20 = stackAr13.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr16.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        int int23 = stackAr19.size();
        boolean boolean24 = stackAr16.equals((java.lang.Object) stackAr19);
        boolean boolean25 = stackAr8.equals((java.lang.Object) boolean24);
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean29 = stackAr27.equals((java.lang.Object) (byte) 100);
        boolean boolean30 = stackAr27.isEmpty();
        boolean boolean31 = stackAr27.isEmpty();
        java.lang.String str32 = stackAr27.toString();
        boolean boolean33 = stackAr27.isEmpty();
        int int34 = stackAr27.size();
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 100);
        boolean boolean39 = stackAr36.isEmpty();
        boolean boolean40 = stackAr36.isEmpty();
        boolean boolean41 = stackAr27.equals((java.lang.Object) stackAr36);
        stackAr8.push((java.lang.Object) stackAr36);
        org.autotest.StackAr stackAr44 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr44.isEmpty();
        int int46 = stackAr44.size();
        boolean boolean47 = stackAr44.isEmpty();
        int int48 = stackAr44.size();
        org.autotest.StackAr stackAr50 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean51 = stackAr50.isFull();
        org.autotest.StackAr stackAr53 = new org.autotest.StackAr((int) '#');
        boolean boolean54 = stackAr53.isEmpty();
        boolean boolean55 = stackAr53.isEmpty();
        int int56 = stackAr53.size();
        int int57 = stackAr53.size();
        boolean boolean58 = stackAr50.equals((java.lang.Object) stackAr53);
        boolean boolean59 = stackAr44.equals((java.lang.Object) boolean58);
        int int60 = stackAr44.size();
        stackAr36.push((java.lang.Object) int60);
        boolean boolean62 = stackAr36.isFull();
        java.lang.Object obj63 = stackAr36.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "[]" + "'", str32, "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + obj63 + "' != '" + 0 + "'", obj63, 0);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isFull();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr14.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean22 = stackAr18.equals((java.lang.Object) 100L);
        boolean boolean23 = stackAr18.isFull();
        stackAr14.push((java.lang.Object) stackAr18);
        boolean boolean25 = stackAr14.isEmpty();
        java.lang.Object obj26 = stackAr14.top();
        java.lang.String str27 = stackAr14.toString();
        stackAr1.push((java.lang.Object) stackAr14);
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) (short) 100);
        java.lang.Class<?> wildcardClass31 = stackAr30.getClass();
        boolean boolean32 = stackAr14.equals((java.lang.Object) wildcardClass31);
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr34.equals((java.lang.Object) (byte) 1);
        boolean boolean37 = stackAr34.isFull();
        stackAr34.push((java.lang.Object) '4');
        boolean boolean41 = stackAr34.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 1);
        boolean boolean46 = stackAr43.isFull();
        boolean boolean47 = stackAr43.isFull();
        int int48 = stackAr43.size();
        org.autotest.StackAr stackAr50 = new org.autotest.StackAr((int) '#');
        boolean boolean52 = stackAr50.equals((java.lang.Object) (byte) 1);
        stackAr50.push((java.lang.Object) "[]");
        stackAr43.push((java.lang.Object) stackAr50);
        boolean boolean56 = stackAr34.equals((java.lang.Object) stackAr50);
        stackAr14.push((java.lang.Object) boolean56);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[[]]" + "'", str27, "[[]]");
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr8.equals((java.lang.Object) (short) 1);
        int int18 = stackAr8.size();
        java.lang.Object[] objArray27 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean28 = org.autotest.StackAr.repOkFunction((int) 'a', objArray27);
        boolean boolean29 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean30 = org.autotest.StackAr.repOkFunction(100, objArray27);
        boolean boolean31 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray27);
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) '#', objArray27);
        stackAr8.push((java.lang.Object) '#');
        boolean boolean34 = stackAr8.isEmpty();
        int int35 = stackAr8.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean9 = stackAr1.equals((java.lang.Object) 'a');
        java.lang.String str10 = stackAr1.toString();
        int int11 = stackAr1.size();
        java.lang.String str12 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[]" + "'", str10, "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean11 = stackAr10.isFull();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr10);
        boolean boolean13 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean16 = stackAr15.isEmpty();
        int int17 = stackAr15.size();
        boolean boolean18 = stackAr15.isFull();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        java.lang.Object obj24 = new java.lang.Object();
        stackAr20.push(obj24);
        boolean boolean26 = stackAr20.isFull();
        java.lang.String str27 = stackAr20.toString();
        stackAr20.push((java.lang.Object) (byte) 0);
        stackAr15.push((java.lang.Object) stackAr20);
        boolean boolean31 = stackAr20.isFull();
        org.autotest.StackAr stackAr33 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr33.equals((java.lang.Object) (byte) 1);
        boolean boolean36 = stackAr33.isFull();
        java.lang.Object obj37 = new java.lang.Object();
        stackAr33.push(obj37);
        java.lang.String str39 = stackAr33.toString();
        boolean boolean40 = stackAr33.isEmpty();
        boolean boolean41 = stackAr33.isFull();
        stackAr20.push((java.lang.Object) boolean41);
        boolean boolean43 = stackAr20.isFull();
        java.lang.Class<?> wildcardClass44 = stackAr20.getClass();
        stackAr1.push((java.lang.Object) wildcardClass44);
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean49 = stackAr47.equals((java.lang.Object) (byte) 1);
        boolean boolean50 = stackAr47.isFull();
        stackAr47.push((java.lang.Object) '4');
        java.lang.String str53 = stackAr47.toString();
        java.lang.Object obj54 = stackAr47.top();
        boolean boolean55 = stackAr1.equals((java.lang.Object) stackAr47);
        java.lang.Class<?> wildcardClass56 = stackAr47.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[4]" + "'", str53, "[4]");
        org.junit.Assert.assertEquals("'" + obj54 + "' != '" + '4' + "'", obj54, '4');
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        java.lang.String str11 = stackAr7.toString();
        java.lang.Object[] objArray19 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) 'a', objArray19);
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray19);
        boolean boolean22 = org.autotest.StackAr.repOkFunction(100, objArray19);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray19);
        stackAr7.push((java.lang.Object) objArray19);
        boolean boolean25 = stackAr1.equals((java.lang.Object) objArray19);
        java.lang.String str26 = stackAr1.toString();
        boolean boolean27 = stackAr1.isEmpty();
        boolean boolean28 = stackAr1.isEmpty();
        int int29 = stackAr1.size();
        java.lang.String str30 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[[]]" + "'", str26, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[[]]" + "'", str30, "[[]]");
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr8.toString();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.String str21 = stackAr17.toString();
        int int22 = stackAr17.size();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        java.lang.String str25 = stackAr24.toString();
        boolean boolean27 = stackAr24.equals((java.lang.Object) 10L);
        boolean boolean28 = stackAr17.equals((java.lang.Object) stackAr24);
        int int29 = stackAr24.size();
        int int30 = stackAr24.size();
        boolean boolean31 = stackAr24.isFull();
        stackAr8.push((java.lang.Object) stackAr24);
        java.lang.String str33 = stackAr24.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "[]" + "'", str25, "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) 'a');
        java.lang.String str7 = stackAr1.toString();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        java.lang.String str12 = stackAr9.toString();
        boolean boolean13 = stackAr9.isEmpty();
        int int14 = stackAr9.size();
        boolean boolean15 = stackAr1.equals((java.lang.Object) int14);
        java.lang.Object obj16 = stackAr1.pop();
        java.lang.String str17 = stackAr1.toString();
        boolean boolean18 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        java.lang.Object obj24 = new java.lang.Object();
        stackAr20.push(obj24);
        boolean boolean26 = stackAr20.isFull();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        java.lang.Object obj32 = new java.lang.Object();
        stackAr28.push(obj32);
        boolean boolean34 = stackAr28.isFull();
        java.lang.String str35 = stackAr28.toString();
        boolean boolean36 = stackAr20.equals((java.lang.Object) str35);
        boolean boolean37 = stackAr20.isEmpty();
        boolean boolean38 = stackAr20.isEmpty();
        boolean boolean39 = stackAr20.isFull();
        int int40 = stackAr20.size();
        java.lang.Object obj41 = stackAr20.pop();
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean45 = stackAr43.equals((java.lang.Object) (byte) 1);
        boolean boolean46 = stackAr43.isFull();
        stackAr43.push((java.lang.Object) '4');
        boolean boolean50 = stackAr43.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr52 = new org.autotest.StackAr((int) '#');
        boolean boolean54 = stackAr52.equals((java.lang.Object) (byte) 1);
        boolean boolean55 = stackAr52.isFull();
        boolean boolean56 = stackAr52.isFull();
        int int57 = stackAr52.size();
        org.autotest.StackAr stackAr59 = new org.autotest.StackAr((int) '#');
        boolean boolean61 = stackAr59.equals((java.lang.Object) (byte) 1);
        stackAr59.push((java.lang.Object) "[]");
        stackAr52.push((java.lang.Object) stackAr59);
        boolean boolean65 = stackAr43.equals((java.lang.Object) stackAr59);
        boolean boolean66 = stackAr59.isFull();
        boolean boolean67 = stackAr59.isFull();
        boolean boolean68 = stackAr59.isEmpty();
        java.lang.String str69 = stackAr59.toString();
        stackAr20.push((java.lang.Object) stackAr59);
        boolean boolean71 = stackAr1.equals((java.lang.Object) stackAr20);
        java.lang.Object[] objArray81 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean82 = org.autotest.StackAr.repOkFunction((int) 'a', objArray81);
        boolean boolean83 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray81);
        boolean boolean84 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray81);
        boolean boolean85 = org.autotest.StackAr.repOkFunction(10, objArray81);
        boolean boolean86 = org.autotest.StackAr.repOkFunction(10, objArray81);
        boolean boolean87 = org.autotest.StackAr.repOkFunction(2, objArray81);
        java.lang.Class<?> wildcardClass88 = objArray81.getClass();
        stackAr20.push((java.lang.Object) objArray81);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[a]" + "'", str7, "[a]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[]" + "'", str12, "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + 'a' + "'", obj16, 'a');
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "[]" + "'", str17, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[[]]" + "'", str69, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.lang.Object[] objArray8 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) 'a', objArray8);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray8);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray8);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray8);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(10, objArray8);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        boolean boolean1 = stackAr0.isEmpty();
        org.autotest.StackAr stackAr2 = new org.autotest.StackAr();
        int int3 = stackAr2.size();
        stackAr0.push((java.lang.Object) int3);
        int int5 = stackAr0.size();
        int int6 = stackAr0.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr();
        int int8 = stackAr7.size();
        java.lang.Object[] objArray11 = new java.lang.Object[] { 1.0d };
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray11);
        java.lang.Class<?> wildcardClass13 = objArray11.getClass();
        boolean boolean14 = stackAr7.equals((java.lang.Object) objArray11);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr20.isEmpty();
        int int22 = stackAr20.size();
        boolean boolean24 = stackAr20.equals((java.lang.Object) 100L);
        boolean boolean25 = stackAr20.isFull();
        stackAr16.push((java.lang.Object) stackAr20);
        boolean boolean27 = stackAr16.isEmpty();
        java.lang.Object obj28 = stackAr16.top();
        stackAr7.push((java.lang.Object) stackAr16);
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr31.equals((java.lang.Object) (byte) 1);
        stackAr31.push((java.lang.Object) "[]");
        int int36 = stackAr31.size();
        boolean boolean38 = stackAr31.equals((java.lang.Object) 'a');
        int int39 = stackAr31.size();
        java.lang.Object obj40 = stackAr31.top();
        stackAr7.push((java.lang.Object) stackAr31);
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr43.isEmpty();
        int int45 = stackAr43.size();
        boolean boolean46 = stackAr43.isEmpty();
        boolean boolean48 = stackAr43.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr50 = new org.autotest.StackAr((int) '#');
        boolean boolean52 = stackAr50.equals((java.lang.Object) (byte) 1);
        boolean boolean53 = stackAr50.isFull();
        stackAr50.push((java.lang.Object) '4');
        stackAr43.push((java.lang.Object) stackAr50);
        boolean boolean57 = stackAr43.isEmpty();
        boolean boolean58 = stackAr43.isEmpty();
        boolean boolean59 = stackAr31.equals((java.lang.Object) stackAr43);
        stackAr0.push((java.lang.Object) stackAr43);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + obj40 + "' != '" + "[]" + "'", obj40, "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) '#');
        boolean boolean6 = stackAr1.equals((java.lang.Object) "hi!");
        boolean boolean7 = stackAr1.isFull();
        int int8 = stackAr1.size();
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean11 = stackAr10.isFull();
        boolean boolean12 = stackAr1.equals((java.lang.Object) stackAr10);
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr14.isEmpty();
        int int16 = stackAr14.size();
        boolean boolean17 = stackAr14.isEmpty();
        boolean boolean19 = stackAr14.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        stackAr21.push((java.lang.Object) '4');
        stackAr14.push((java.lang.Object) stackAr21);
        boolean boolean28 = stackAr14.isEmpty();
        java.lang.String str29 = stackAr14.toString();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr(0);
        int int32 = stackAr31.size();
        boolean boolean33 = stackAr14.equals((java.lang.Object) stackAr31);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr35.isEmpty();
        int int37 = stackAr35.size();
        boolean boolean38 = stackAr35.isEmpty();
        boolean boolean39 = stackAr35.isEmpty();
        boolean boolean40 = stackAr35.isFull();
        int int41 = stackAr35.size();
        boolean boolean42 = stackAr14.equals((java.lang.Object) stackAr35);
        java.lang.Object obj43 = stackAr14.top();
        boolean boolean44 = stackAr1.equals((java.lang.Object) stackAr14);
        int int45 = stackAr1.size();
        boolean boolean46 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj47 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "[[4]]" + "'", str29, "[[4]]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "[4]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isEmpty();
        boolean boolean20 = stackAr1.isFull();
        int int21 = stackAr1.size();
        java.lang.Object obj22 = stackAr1.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj23 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(obj22);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr12.isEmpty();
        int int14 = stackAr12.size();
        boolean boolean16 = stackAr12.equals((java.lang.Object) 100L);
        boolean boolean17 = stackAr12.isFull();
        stackAr8.push((java.lang.Object) stackAr12);
        boolean boolean19 = stackAr8.isFull();
        boolean boolean20 = stackAr1.equals((java.lang.Object) stackAr8);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        stackAr22.push((java.lang.Object) "[]");
        java.lang.Object obj27 = stackAr22.top();
        boolean boolean28 = stackAr8.equals((java.lang.Object) stackAr22);
        java.lang.Object obj29 = stackAr8.top();
        java.lang.Class<?> wildcardClass30 = obj29.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "[]" + "'", obj27, "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "[]");
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr4.equals((java.lang.Object) (byte) 1);
        boolean boolean7 = stackAr4.isFull();
        java.lang.String str8 = stackAr4.toString();
        java.lang.Object[] objArray16 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) 'a', objArray16);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray16);
        boolean boolean19 = org.autotest.StackAr.repOkFunction(100, objArray16);
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray16);
        stackAr4.push((java.lang.Object) objArray16);
        boolean boolean22 = org.autotest.StackAr.repOkFunction(10, objArray16);
        boolean boolean23 = org.autotest.StackAr.repOkFunction(0, objArray16);
        boolean boolean24 = org.autotest.StackAr.repOkFunction((-1), objArray16);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[]" + "'", str8, "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray7);
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray7);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) '4', objArray7);
        java.lang.Class<?> wildcardClass12 = objArray7.getClass();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        stackAr8.push((java.lang.Object) stackAr12);
        int int19 = stackAr8.size();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj21 = stackAr1.pop();
        java.lang.String str22 = stackAr1.toString();
        java.lang.Object obj23 = stackAr1.pop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj24 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[0]" + "'", str22, "[0]");
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (short) 0 + "'", obj23, (short) 0);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean5 = stackAr1.equals((java.lang.Object) 100L);
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        stackAr9.push((java.lang.Object) "[]");
        int int14 = stackAr9.size();
        boolean boolean16 = stackAr9.equals((java.lang.Object) 'a');
        boolean boolean17 = stackAr1.equals((java.lang.Object) boolean16);
        boolean boolean19 = stackAr1.equals((java.lang.Object) 1.0f);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj20 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '4');
        org.autotest.StackAr stackAr3 = new org.autotest.StackAr((int) '#');
        boolean boolean5 = stackAr3.equals((java.lang.Object) (byte) 1);
        boolean boolean6 = stackAr3.isFull();
        stackAr3.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        java.lang.Object obj14 = new java.lang.Object();
        stackAr10.push(obj14);
        java.lang.String str16 = stackAr10.toString();
        boolean boolean17 = stackAr10.isEmpty();
        boolean boolean18 = stackAr3.equals((java.lang.Object) boolean17);
        boolean boolean19 = stackAr1.equals((java.lang.Object) stackAr3);
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr21.isEmpty();
        boolean boolean24 = stackAr21.equals((java.lang.Object) '#');
        boolean boolean26 = stackAr21.equals((java.lang.Object) "hi!");
        boolean boolean27 = stackAr21.isFull();
        int int28 = stackAr21.size();
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean31 = stackAr30.isFull();
        boolean boolean32 = stackAr21.equals((java.lang.Object) stackAr30);
        boolean boolean33 = stackAr21.isEmpty();
        stackAr3.push((java.lang.Object) stackAr21);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        java.lang.Object obj17 = stackAr6.pop();
        java.lang.Object obj18 = stackAr6.top();
        int int19 = stackAr6.size();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (byte) 0 + "'", obj17, (byte) 0);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) 10.0f);
        java.lang.Object obj31 = stackAr0.top();
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr();
        int int33 = stackAr32.size();
        java.lang.String str34 = stackAr32.toString();
        boolean boolean35 = stackAr32.isFull();
        stackAr0.push((java.lang.Object) boolean35);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + obj31 + "' != '" + 10.0f + "'", obj31, 10.0f);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "[]" + "'", str34, "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        java.lang.Object obj29 = new java.lang.Object();
        stackAr25.push(obj29);
        boolean boolean31 = stackAr17.equals(obj29);
        stackAr1.push((java.lang.Object) stackAr17);
        boolean boolean33 = stackAr1.isFull();
        java.lang.Object obj34 = stackAr1.pop();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) (short) 1);
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr();
        int int39 = stackAr38.size();
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean43 = stackAr41.equals((java.lang.Object) (byte) 1);
        boolean boolean44 = stackAr41.isFull();
        boolean boolean45 = stackAr41.isFull();
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr47.isEmpty();
        int int49 = stackAr47.size();
        boolean boolean50 = stackAr47.isEmpty();
        boolean boolean52 = stackAr47.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr54 = new org.autotest.StackAr((int) '#');
        boolean boolean56 = stackAr54.equals((java.lang.Object) (byte) 1);
        boolean boolean57 = stackAr54.isFull();
        stackAr54.push((java.lang.Object) '4');
        stackAr47.push((java.lang.Object) stackAr54);
        java.lang.String str61 = stackAr54.toString();
        java.lang.Class<?> wildcardClass62 = stackAr54.getClass();
        org.autotest.StackAr stackAr64 = new org.autotest.StackAr((int) '#');
        boolean boolean66 = stackAr64.equals((java.lang.Object) (byte) 1);
        boolean boolean67 = stackAr64.isFull();
        java.lang.Object obj68 = new java.lang.Object();
        stackAr64.push(obj68);
        boolean boolean71 = stackAr64.equals((java.lang.Object) (byte) -1);
        java.lang.Class<?> wildcardClass72 = stackAr64.getClass();
        java.lang.Object[] objArray73 = new java.lang.Object[] { (short) 1, stackAr38, boolean45, stackAr54, wildcardClass72 };
        boolean boolean74 = org.autotest.StackAr.repOkFunction((int) 'a', objArray73);
        boolean boolean75 = stackAr1.equals((java.lang.Object) 'a');
        org.autotest.StackAr stackAr77 = new org.autotest.StackAr((int) '#');
        boolean boolean79 = stackAr77.equals((java.lang.Object) (byte) 1);
        boolean boolean80 = stackAr77.isFull();
        boolean boolean81 = stackAr77.isFull();
        boolean boolean82 = stackAr77.isFull();
        int int83 = stackAr77.size();
        boolean boolean84 = stackAr77.isEmpty();
        stackAr1.push((java.lang.Object) stackAr77);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[4]" + "'", str61, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        java.lang.String str11 = stackAr5.toString();
        boolean boolean12 = stackAr5.isEmpty();
        boolean boolean13 = stackAr5.isFull();
        java.lang.Object obj14 = stackAr5.top();
        java.lang.String str15 = stackAr5.toString();
        stackAr1.push((java.lang.Object) stackAr5);
        int int17 = stackAr5.size();
        boolean boolean18 = stackAr5.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction(0, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(1, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction(4, objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isFull();
        boolean boolean13 = stackAr1.isEmpty();
        java.lang.Object[] objArray22 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) 'a', objArray22);
        boolean boolean24 = org.autotest.StackAr.repOkFunction(0, objArray22);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray22);
        boolean boolean26 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray22);
        boolean boolean27 = org.autotest.StackAr.repOkFunction(0, objArray22);
        stackAr1.push((java.lang.Object) objArray22);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        boolean boolean8 = stackAr1.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr10.isEmpty();
        int int12 = stackAr10.size();
        boolean boolean13 = stackAr10.isEmpty();
        java.lang.Object[] objArray16 = new java.lang.Object[] { 1.0d };
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray16);
        java.lang.Class<?> wildcardClass18 = objArray16.getClass();
        boolean boolean19 = stackAr10.equals((java.lang.Object) wildcardClass18);
        boolean boolean20 = stackAr10.isFull();
        java.lang.String str21 = stackAr10.toString();
        java.lang.String str22 = stackAr10.toString();
        boolean boolean23 = stackAr10.isFull();
        int int24 = stackAr10.size();
        java.lang.Class<?> wildcardClass25 = stackAr10.getClass();
        boolean boolean26 = stackAr1.equals((java.lang.Object) stackAr10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "[]" + "'", str21, "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        boolean boolean23 = stackAr19.isFull();
        int int24 = stackAr19.size();
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr26.equals((java.lang.Object) (byte) 1);
        stackAr26.push((java.lang.Object) "[]");
        stackAr19.push((java.lang.Object) stackAr26);
        boolean boolean32 = stackAr19.isEmpty();
        java.lang.Object obj33 = stackAr19.pop();
        stackAr1.push(obj33);
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr36.isEmpty();
        int int38 = stackAr36.size();
        boolean boolean39 = stackAr36.isEmpty();
        int int40 = stackAr36.size();
        org.autotest.StackAr stackAr42 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean43 = stackAr42.isFull();
        org.autotest.StackAr stackAr45 = new org.autotest.StackAr((int) '#');
        boolean boolean46 = stackAr45.isEmpty();
        boolean boolean47 = stackAr45.isEmpty();
        int int48 = stackAr45.size();
        int int49 = stackAr45.size();
        boolean boolean50 = stackAr42.equals((java.lang.Object) stackAr45);
        boolean boolean51 = stackAr36.equals((java.lang.Object) boolean50);
        java.lang.String str52 = stackAr36.toString();
        stackAr1.push((java.lang.Object) str52);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "[[]]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "[[]]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "[[]]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "[]" + "'", str52, "[]");
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isEmpty();
        boolean boolean13 = stackAr1.equals((java.lang.Object) stackAr9);
        boolean boolean14 = stackAr1.isFull();
        boolean boolean15 = stackAr1.isFull();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isFull();
        boolean boolean18 = stackAr1.isFull();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr25.isEmpty();
        int int27 = stackAr25.size();
        boolean boolean28 = stackAr25.isEmpty();
        boolean boolean30 = stackAr25.equals((java.lang.Object) (short) -1);
        stackAr20.push((java.lang.Object) (short) -1);
        stackAr1.push((java.lang.Object) stackAr20);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isFull();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isEmpty();
        boolean boolean21 = stackAr17.isEmpty();
        boolean boolean22 = stackAr17.isFull();
        int int23 = stackAr17.size();
        stackAr1.push((java.lang.Object) int23);
        boolean boolean25 = stackAr1.isEmpty();
        int int26 = stackAr1.size();
        java.lang.Object obj27 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + 0 + "'", obj27, 0);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        stackAr12.push((java.lang.Object) "[]");
        java.lang.Object obj17 = stackAr12.top();
        java.lang.Object obj18 = stackAr12.top();
        java.lang.String str19 = stackAr12.toString();
        java.lang.String str20 = stackAr12.toString();
        int int21 = stackAr12.size();
        java.lang.String str22 = stackAr12.toString();
        boolean boolean23 = stackAr1.equals((java.lang.Object) str22);
        java.lang.Object obj24 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "[]" + "'", obj17, "[]");
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + "[]" + "'", obj18, "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[[]]" + "'", str19, "[[]]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[[]]" + "'", str20, "[[]]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[[]]" + "'", str22, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + obj24 + "' != '" + "[]" + "'", obj24, "[]");
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        java.lang.Object obj10 = new java.lang.Object();
        stackAr6.push(obj10);
        boolean boolean12 = stackAr6.isFull();
        java.lang.String str13 = stackAr6.toString();
        stackAr6.push((java.lang.Object) (byte) 0);
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean17 = stackAr6.isFull();
        boolean boolean18 = stackAr6.isFull();
        java.lang.Object obj19 = stackAr6.pop();
        boolean boolean20 = stackAr6.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (byte) 0 + "'", obj19, (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean7 = stackAr6.isEmpty();
        stackAr1.push((java.lang.Object) stackAr6);
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str11 = stackAr10.toString();
        boolean boolean12 = stackAr10.isFull();
        stackAr10.push((java.lang.Object) 1);
        boolean boolean15 = stackAr10.isEmpty();
        stackAr6.push((java.lang.Object) boolean15);
        java.lang.Object obj17 = stackAr6.top();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr19.equals((java.lang.Object) (byte) 1);
        boolean boolean22 = stackAr19.isFull();
        boolean boolean23 = stackAr19.isFull();
        boolean boolean24 = stackAr19.isFull();
        org.autotest.StackAr stackAr26 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str27 = stackAr26.toString();
        boolean boolean28 = stackAr26.isFull();
        stackAr26.push((java.lang.Object) 1);
        boolean boolean31 = stackAr26.isEmpty();
        boolean boolean32 = stackAr19.equals((java.lang.Object) stackAr26);
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        int int36 = stackAr34.size();
        boolean boolean37 = stackAr34.isEmpty();
        stackAr19.push((java.lang.Object) boolean37);
        int int39 = stackAr19.size();
        java.lang.String str40 = stackAr19.toString();
        boolean boolean41 = stackAr6.equals((java.lang.Object) str40);
        java.lang.Class<?> wildcardClass42 = stackAr6.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + false + "'", obj17, false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[]" + "'", str27, "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[true]" + "'", str40, "[true]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        stackAr1.push((java.lang.Object) (byte) 0);
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.String str12 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr1.toString();
        java.lang.Object obj16 = stackAr1.pop();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean26 = stackAr22.equals((java.lang.Object) 100L);
        boolean boolean27 = stackAr22.isFull();
        stackAr18.push((java.lang.Object) stackAr22);
        java.lang.Object obj29 = stackAr18.top();
        stackAr1.push((java.lang.Object) stackAr18);
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str33 = stackAr32.toString();
        boolean boolean34 = stackAr32.isEmpty();
        int int35 = stackAr32.size();
        java.lang.String str36 = stackAr32.toString();
        org.autotest.StackAr stackAr38 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr38.equals((java.lang.Object) (byte) 1);
        boolean boolean41 = stackAr38.isFull();
        boolean boolean42 = stackAr38.isFull();
        boolean boolean43 = stackAr38.isFull();
        int int44 = stackAr38.size();
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean47 = stackAr46.isEmpty();
        int int48 = stackAr46.size();
        boolean boolean49 = stackAr46.isEmpty();
        boolean boolean50 = stackAr38.equals((java.lang.Object) stackAr46);
        java.lang.String str51 = stackAr46.toString();
        boolean boolean52 = stackAr32.equals((java.lang.Object) str51);
        java.lang.String str53 = stackAr32.toString();
        boolean boolean54 = stackAr32.isEmpty();
        boolean boolean55 = stackAr18.equals((java.lang.Object) stackAr32);
        org.autotest.StackAr stackAr57 = new org.autotest.StackAr((int) '#');
        boolean boolean59 = stackAr57.equals((java.lang.Object) (byte) 1);
        boolean boolean60 = stackAr57.isFull();
        java.lang.Object obj61 = new java.lang.Object();
        stackAr57.push(obj61);
        org.autotest.StackAr stackAr64 = new org.autotest.StackAr((int) '#');
        boolean boolean66 = stackAr64.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr68 = new org.autotest.StackAr((int) '#');
        boolean boolean69 = stackAr68.isEmpty();
        int int70 = stackAr68.size();
        boolean boolean72 = stackAr68.equals((java.lang.Object) 100L);
        boolean boolean73 = stackAr68.isFull();
        stackAr64.push((java.lang.Object) stackAr68);
        boolean boolean75 = stackAr64.isFull();
        boolean boolean76 = stackAr57.equals((java.lang.Object) stackAr64);
        org.autotest.StackAr stackAr78 = new org.autotest.StackAr((int) '#');
        boolean boolean80 = stackAr78.equals((java.lang.Object) (byte) 1);
        stackAr78.push((java.lang.Object) "[]");
        java.lang.Object obj83 = stackAr78.top();
        boolean boolean84 = stackAr64.equals((java.lang.Object) stackAr78);
        java.lang.Object obj85 = stackAr64.top();
        org.autotest.StackAr stackAr87 = new org.autotest.StackAr((int) '#');
        boolean boolean89 = stackAr87.equals((java.lang.Object) (byte) 1);
        boolean boolean90 = stackAr87.isFull();
        java.lang.Object obj91 = new java.lang.Object();
        stackAr87.push(obj91);
        boolean boolean93 = stackAr87.isFull();
        java.lang.String str94 = stackAr87.toString();
        boolean boolean95 = stackAr87.isFull();
        stackAr64.push((java.lang.Object) stackAr87);
        stackAr18.push((java.lang.Object) stackAr87);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[4]]" + "'", str15, "[[4]]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[4]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "[]" + "'", str33, "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "[]" + "'", str36, "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[]" + "'", str51, "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "[]" + "'", str53, "[]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + obj83 + "' != '" + "[]" + "'", obj83, "[]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.String str8 = stackAr1.toString();
        java.lang.String str9 = stackAr1.toString();
        int int10 = stackAr1.size();
        java.lang.String str11 = stackAr1.toString();
        java.lang.String str12 = stackAr1.toString();
        java.lang.String str13 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + "[]" + "'", obj6, "[]");
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "[]" + "'", obj7, "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "[[]]" + "'", str8, "[[]]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[[]]" + "'", str9, "[[]]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[[]]" + "'", str11, "[[]]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[[]]" + "'", str12, "[[]]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[[]]" + "'", str13, "[[]]");
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr12.isEmpty();
        int int14 = stackAr12.size();
        boolean boolean16 = stackAr12.equals((java.lang.Object) 100L);
        boolean boolean17 = stackAr12.isFull();
        stackAr8.push((java.lang.Object) stackAr12);
        boolean boolean19 = stackAr8.isFull();
        boolean boolean20 = stackAr1.equals((java.lang.Object) stackAr8);
        java.lang.Object obj21 = stackAr1.top();
        boolean boolean22 = stackAr1.isEmpty();
        java.lang.String str23 = stackAr1.toString();
        boolean boolean24 = stackAr1.isFull();
        java.lang.String str25 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) 10.0f);
        java.lang.String str31 = stackAr0.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[100,10.0]" + "'", str31, "[100,10.0]");
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        java.lang.Object[] objArray4 = new java.lang.Object[] { 1.0d };
        boolean boolean5 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray4);
        boolean boolean6 = org.autotest.StackAr.repOkFunction((int) '4', objArray4);
        boolean boolean7 = org.autotest.StackAr.repOkFunction(0, objArray4);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        java.lang.Object obj20 = new java.lang.Object();
        stackAr16.push(obj20);
        boolean boolean22 = stackAr16.isFull();
        java.lang.String str23 = stackAr16.toString();
        java.lang.Object obj24 = stackAr16.top();
        stackAr16.push((java.lang.Object) ' ');
        boolean boolean27 = stackAr8.equals((java.lang.Object) ' ');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr();
        int int12 = stackAr11.size();
        java.lang.Object[] objArray18 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) 'a', objArray18);
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray18);
        boolean boolean21 = stackAr11.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr23.equals((java.lang.Object) (byte) 1);
        boolean boolean26 = stackAr23.isFull();
        java.lang.Object obj27 = new java.lang.Object();
        stackAr23.push(obj27);
        boolean boolean30 = stackAr23.equals((java.lang.Object) (byte) -1);
        boolean boolean31 = stackAr11.equals((java.lang.Object) boolean30);
        boolean boolean32 = stackAr11.isFull();
        boolean boolean33 = stackAr1.equals((java.lang.Object) boolean32);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean36 = stackAr35.isEmpty();
        int int37 = stackAr35.size();
        boolean boolean38 = stackAr35.isFull();
        org.autotest.StackAr stackAr40 = new org.autotest.StackAr((int) '#');
        boolean boolean42 = stackAr40.equals((java.lang.Object) (byte) 1);
        boolean boolean43 = stackAr40.isFull();
        java.lang.Object obj44 = new java.lang.Object();
        stackAr40.push(obj44);
        boolean boolean46 = stackAr40.isFull();
        java.lang.String str47 = stackAr40.toString();
        stackAr40.push((java.lang.Object) (byte) 0);
        stackAr35.push((java.lang.Object) stackAr40);
        boolean boolean51 = stackAr40.isFull();
        java.lang.Object[] objArray57 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean58 = org.autotest.StackAr.repOkFunction((int) 'a', objArray57);
        boolean boolean59 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray57);
        stackAr40.push((java.lang.Object) boolean59);
        org.autotest.StackAr stackAr62 = new org.autotest.StackAr((int) '#');
        boolean boolean64 = stackAr62.equals((java.lang.Object) (byte) 100);
        boolean boolean65 = stackAr62.isEmpty();
        stackAr62.push((java.lang.Object) (short) 0);
        org.autotest.StackAr stackAr69 = new org.autotest.StackAr((int) '#');
        boolean boolean71 = stackAr69.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr73 = new org.autotest.StackAr((int) '#');
        boolean boolean75 = stackAr73.equals((java.lang.Object) (byte) 1);
        boolean boolean76 = stackAr73.isFull();
        java.lang.Object obj77 = new java.lang.Object();
        stackAr73.push(obj77);
        stackAr69.push((java.lang.Object) stackAr73);
        int int80 = stackAr69.size();
        stackAr62.push((java.lang.Object) stackAr69);
        boolean boolean82 = stackAr40.equals((java.lang.Object) stackAr62);
        java.lang.String str83 = stackAr40.toString();
        boolean boolean84 = stackAr1.equals((java.lang.Object) stackAr40);
        java.lang.String str85 = stackAr40.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.String str9 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + "[]" + "'", obj7, "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[[]]" + "'", str9, "[[]]");
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isFull();
        org.autotest.StackAr stackAr6 = new org.autotest.StackAr((int) '#');
        boolean boolean8 = stackAr6.equals((java.lang.Object) (byte) 1);
        boolean boolean9 = stackAr6.isFull();
        stackAr6.push((java.lang.Object) '4');
        java.lang.String str12 = stackAr6.toString();
        java.lang.Object obj13 = stackAr6.top();
        boolean boolean14 = stackAr6.isEmpty();
        boolean boolean15 = stackAr1.equals((java.lang.Object) boolean14);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        boolean boolean20 = stackAr17.isFull();
        java.lang.Object obj21 = new java.lang.Object();
        stackAr17.push(obj21);
        boolean boolean24 = stackAr17.equals((java.lang.Object) (byte) -1);
        int int25 = stackAr17.size();
        java.lang.Object obj26 = stackAr17.top();
        boolean boolean27 = stackAr1.equals((java.lang.Object) stackAr17);
        int int28 = stackAr17.size();
        java.lang.String str29 = stackAr17.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "[4]" + "'", str12, "[4]");
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + '4' + "'", obj13, '4');
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        java.lang.String str16 = stackAr1.toString();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr(0);
        int int19 = stackAr18.size();
        boolean boolean20 = stackAr1.equals((java.lang.Object) stackAr18);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean25 = stackAr22.isEmpty();
        boolean boolean26 = stackAr22.isEmpty();
        boolean boolean27 = stackAr22.isFull();
        int int28 = stackAr22.size();
        boolean boolean29 = stackAr1.equals((java.lang.Object) stackAr22);
        int int30 = stackAr22.size();
        java.lang.Class<?> wildcardClass31 = stackAr22.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "[[4]]" + "'", str16, "[[4]]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) (short) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr();
        int int6 = stackAr5.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        boolean boolean12 = stackAr8.isFull();
        org.autotest.StackAr stackAr14 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr14.isEmpty();
        int int16 = stackAr14.size();
        boolean boolean17 = stackAr14.isEmpty();
        boolean boolean19 = stackAr14.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr21.equals((java.lang.Object) (byte) 1);
        boolean boolean24 = stackAr21.isFull();
        stackAr21.push((java.lang.Object) '4');
        stackAr14.push((java.lang.Object) stackAr21);
        java.lang.String str28 = stackAr21.toString();
        java.lang.Class<?> wildcardClass29 = stackAr21.getClass();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr31.equals((java.lang.Object) (byte) 1);
        boolean boolean34 = stackAr31.isFull();
        java.lang.Object obj35 = new java.lang.Object();
        stackAr31.push(obj35);
        boolean boolean38 = stackAr31.equals((java.lang.Object) (byte) -1);
        java.lang.Class<?> wildcardClass39 = stackAr31.getClass();
        java.lang.Object[] objArray40 = new java.lang.Object[] { (short) 1, stackAr5, boolean12, stackAr21, wildcardClass39 };
        boolean boolean41 = org.autotest.StackAr.repOkFunction((int) 'a', objArray40);
        boolean boolean42 = org.autotest.StackAr.repOkFunction(100, objArray40);
        boolean boolean43 = org.autotest.StackAr.repOkFunction((-1), objArray40);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[4]" + "'", str28, "[4]");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[1, [], false, [4], class org.autotest.StackAr]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr24.isEmpty();
        int int26 = stackAr24.size();
        boolean boolean28 = stackAr24.equals((java.lang.Object) 100L);
        boolean boolean29 = stackAr24.isFull();
        stackAr20.push((java.lang.Object) stackAr24);
        boolean boolean31 = stackAr20.isFull();
        java.lang.Object obj32 = stackAr20.pop();
        int int33 = stackAr20.size();
        stackAr1.push((java.lang.Object) stackAr20);
        java.lang.String str35 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr1.toString();
        java.lang.Object obj16 = stackAr1.pop();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean26 = stackAr22.equals((java.lang.Object) 100L);
        boolean boolean27 = stackAr22.isFull();
        stackAr18.push((java.lang.Object) stackAr22);
        java.lang.Object obj29 = stackAr18.top();
        stackAr1.push((java.lang.Object) stackAr18);
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr32.isEmpty();
        boolean boolean35 = stackAr32.equals((java.lang.Object) '#');
        boolean boolean37 = stackAr32.equals((java.lang.Object) "hi!");
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        stackAr39.push((java.lang.Object) '4');
        java.lang.String str45 = stackAr39.toString();
        java.lang.Object obj46 = stackAr39.top();
        stackAr32.push((java.lang.Object) stackAr39);
        stackAr18.push((java.lang.Object) stackAr32);
        java.lang.String str49 = stackAr18.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[4]]" + "'", str15, "[[4]]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[4]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4]" + "'", str45, "[4]");
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + '4' + "'", obj46, '4');
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "[[],[[4]]]" + "'", str49, "[[],[[4]]]");
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr8.equals((java.lang.Object) (short) 1);
        int int18 = stackAr8.size();
        boolean boolean19 = stackAr8.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        boolean boolean17 = stackAr1.equals((java.lang.Object) str16);
        boolean boolean18 = stackAr1.isEmpty();
        java.lang.String str19 = stackAr1.toString();
        org.autotest.StackAr stackAr21 = new org.autotest.StackAr((int) '#');
        java.lang.String str22 = stackAr21.toString();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean25 = stackAr24.isEmpty();
        int int26 = stackAr24.size();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        boolean boolean32 = stackAr28.isFull();
        int int33 = stackAr28.size();
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) '#');
        boolean boolean37 = stackAr35.equals((java.lang.Object) (byte) 1);
        stackAr35.push((java.lang.Object) "[]");
        stackAr28.push((java.lang.Object) stackAr35);
        java.lang.Object obj41 = stackAr35.pop();
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean44 = stackAr43.isFull();
        org.autotest.StackAr stackAr46 = new org.autotest.StackAr((int) '#');
        boolean boolean47 = stackAr46.isEmpty();
        boolean boolean48 = stackAr46.isEmpty();
        int int49 = stackAr46.size();
        int int50 = stackAr46.size();
        boolean boolean51 = stackAr43.equals((java.lang.Object) stackAr46);
        boolean boolean52 = stackAr35.equals((java.lang.Object) boolean51);
        boolean boolean53 = stackAr24.equals((java.lang.Object) stackAr35);
        stackAr21.push((java.lang.Object) stackAr35);
        stackAr1.push((java.lang.Object) stackAr21);
        int int56 = stackAr21.size();
        org.autotest.StackAr stackAr58 = new org.autotest.StackAr((int) '#');
        boolean boolean60 = stackAr58.equals((java.lang.Object) (byte) 1);
        boolean boolean61 = stackAr58.isFull();
        java.lang.Object obj62 = new java.lang.Object();
        stackAr58.push(obj62);
        boolean boolean64 = stackAr58.isFull();
        java.lang.String str65 = stackAr58.toString();
        boolean boolean66 = stackAr58.isFull();
        stackAr21.push((java.lang.Object) stackAr58);
        java.lang.Object obj68 = stackAr21.top();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + obj41 + "' != '" + "[]" + "'", obj41, "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(obj68);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr16.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        int int23 = stackAr19.size();
        boolean boolean24 = stackAr16.equals((java.lang.Object) stackAr19);
        boolean boolean25 = stackAr8.equals((java.lang.Object) boolean24);
        org.autotest.StackAr stackAr27 = new org.autotest.StackAr((int) '#');
        boolean boolean28 = stackAr27.isEmpty();
        boolean boolean29 = stackAr27.isEmpty();
        int int30 = stackAr27.size();
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean33 = stackAr32.isEmpty();
        stackAr27.push((java.lang.Object) stackAr32);
        stackAr8.push((java.lang.Object) stackAr32);
        boolean boolean36 = stackAr32.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        java.lang.String str7 = stackAr1.toString();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.pop();
        boolean boolean11 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr13 = new org.autotest.StackAr((int) '#');
        boolean boolean15 = stackAr13.equals((java.lang.Object) (byte) 1);
        boolean boolean16 = stackAr13.isFull();
        boolean boolean17 = stackAr13.isFull();
        boolean boolean18 = stackAr13.isFull();
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean21 = stackAr20.isEmpty();
        boolean boolean22 = stackAr20.isEmpty();
        int int23 = stackAr20.size();
        boolean boolean24 = stackAr20.isFull();
        boolean boolean25 = stackAr20.isEmpty();
        boolean boolean26 = stackAr13.equals((java.lang.Object) boolean25);
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        boolean boolean32 = stackAr28.isFull();
        int int33 = stackAr28.size();
        int int34 = stackAr28.size();
        boolean boolean35 = stackAr13.equals((java.lang.Object) stackAr28);
        stackAr1.push((java.lang.Object) stackAr28);
        java.lang.Object obj37 = null;
        boolean boolean38 = stackAr1.equals(obj37);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "[4]" + "'", str7, "[4]");
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + '4' + "'", obj8, '4');
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + '4' + "'", obj10, '4');
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean7 = stackAr5.equals((java.lang.Object) (byte) 1);
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = new java.lang.Object();
        stackAr5.push(obj9);
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr5.isFull();
        boolean boolean13 = stackAr5.isEmpty();
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr((int) '#');
        boolean boolean17 = stackAr15.equals((java.lang.Object) (byte) 1);
        boolean boolean18 = stackAr15.isFull();
        java.lang.Object obj19 = new java.lang.Object();
        stackAr15.push(obj19);
        boolean boolean22 = stackAr15.equals((java.lang.Object) (byte) -1);
        java.lang.Object[] objArray31 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) 'a', objArray31);
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray31);
        boolean boolean34 = org.autotest.StackAr.repOkFunction(100, objArray31);
        boolean boolean35 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray31);
        boolean boolean36 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray31);
        stackAr15.push((java.lang.Object) boolean36);
        java.lang.String str38 = stackAr15.toString();
        stackAr5.push((java.lang.Object) str38);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        java.lang.String str11 = stackAr7.toString();
        java.lang.Object[] objArray19 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) 'a', objArray19);
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray19);
        boolean boolean22 = org.autotest.StackAr.repOkFunction(100, objArray19);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray19);
        stackAr7.push((java.lang.Object) objArray19);
        boolean boolean25 = stackAr1.equals((java.lang.Object) objArray19);
        java.lang.Object obj26 = stackAr1.pop();
        java.lang.Class<?> wildcardClass27 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "[]" + "'", str11, "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + "[]" + "'", obj26, "[]");
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        java.lang.Object[] objArray5 = new java.lang.Object[] { 1.0d };
        boolean boolean6 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray5);
        boolean boolean7 = org.autotest.StackAr.repOkFunction((int) 'a', objArray5);
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray5);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray5);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) 0.0f);
        int int5 = stackAr1.size();
        java.lang.String str6 = stackAr1.toString();
        java.lang.Object[] objArray17 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) 'a', objArray17);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray17);
        boolean boolean20 = org.autotest.StackAr.repOkFunction(100, objArray17);
        boolean boolean21 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray17);
        boolean boolean22 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray17);
        boolean boolean23 = org.autotest.StackAr.repOkFunction(100, objArray17);
        boolean boolean24 = org.autotest.StackAr.repOkFunction(0, objArray17);
        boolean boolean25 = stackAr1.equals((java.lang.Object) 0);
        int int26 = stackAr1.size();
        int int27 = stackAr1.size();
        java.lang.String str28 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "[]" + "'", str28, "[]");
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr8.isEmpty();
        boolean boolean10 = stackAr8.isEmpty();
        int int11 = stackAr8.size();
        boolean boolean12 = stackAr8.isFull();
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) boolean13);
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr16.equals((java.lang.Object) (byte) 1);
        boolean boolean19 = stackAr16.isFull();
        boolean boolean20 = stackAr16.isFull();
        int int21 = stackAr16.size();
        int int22 = stackAr16.size();
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr16);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        stackAr25.push((java.lang.Object) "[]");
        java.lang.Object obj30 = stackAr25.top();
        java.lang.String str31 = stackAr25.toString();
        java.lang.Object obj32 = stackAr25.top();
        boolean boolean33 = stackAr1.equals(obj32);
        int int34 = stackAr1.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + obj30 + "' != '" + "[]" + "'", obj30, "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "[[]]" + "'", str31, "[[]]");
        org.junit.Assert.assertEquals("'" + obj32 + "' != '" + "[]" + "'", obj32, "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object[] objArray16 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) 'a', objArray16);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray16);
        boolean boolean19 = org.autotest.StackAr.repOkFunction(100, objArray16);
        boolean boolean20 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray16);
        boolean boolean21 = stackAr1.equals((java.lang.Object) (byte) 0);
        java.lang.String str22 = stackAr1.toString();
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr((int) '#');
        boolean boolean26 = stackAr24.equals((java.lang.Object) (byte) 1);
        boolean boolean27 = stackAr24.isFull();
        boolean boolean28 = stackAr24.isFull();
        int int29 = stackAr24.size();
        org.autotest.StackAr stackAr31 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr31.equals((java.lang.Object) (byte) 1);
        stackAr31.push((java.lang.Object) "[]");
        stackAr24.push((java.lang.Object) stackAr31);
        java.lang.Object obj37 = stackAr31.pop();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean40 = stackAr31.equals((java.lang.Object) (short) 1);
        int int41 = stackAr31.size();
        java.lang.Object[] objArray50 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean51 = org.autotest.StackAr.repOkFunction((int) 'a', objArray50);
        boolean boolean52 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray50);
        boolean boolean53 = org.autotest.StackAr.repOkFunction(100, objArray50);
        boolean boolean54 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray50);
        boolean boolean55 = org.autotest.StackAr.repOkFunction((int) '#', objArray50);
        stackAr31.push((java.lang.Object) '#');
        java.lang.Object obj57 = stackAr31.top();
        boolean boolean58 = stackAr31.isFull();
        org.autotest.StackAr stackAr60 = new org.autotest.StackAr((int) '#');
        java.lang.String str61 = stackAr60.toString();
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) '#');
        boolean boolean65 = stackAr63.equals((java.lang.Object) (byte) 1);
        boolean boolean66 = stackAr63.isFull();
        boolean boolean67 = stackAr63.isFull();
        boolean boolean68 = stackAr63.isFull();
        int int69 = stackAr63.size();
        org.autotest.StackAr stackAr71 = new org.autotest.StackAr((int) '#');
        boolean boolean73 = stackAr71.equals((java.lang.Object) (byte) 1);
        boolean boolean74 = stackAr71.isFull();
        java.lang.Object obj75 = new java.lang.Object();
        stackAr71.push(obj75);
        boolean boolean77 = stackAr63.equals(obj75);
        boolean boolean78 = stackAr60.equals((java.lang.Object) boolean77);
        boolean boolean79 = stackAr31.equals((java.lang.Object) stackAr60);
        java.lang.String str80 = stackAr60.toString();
        boolean boolean81 = stackAr60.isFull();
        int int82 = stackAr60.size();
        boolean boolean83 = stackAr1.equals((java.lang.Object) stackAr60);
        org.autotest.StackAr stackAr85 = new org.autotest.StackAr((int) '#');
        boolean boolean87 = stackAr85.equals((java.lang.Object) (byte) 1);
        boolean boolean88 = stackAr85.isFull();
        boolean boolean89 = stackAr85.isFull();
        boolean boolean90 = stackAr85.isFull();
        int int91 = stackAr85.size();
        org.autotest.StackAr stackAr93 = new org.autotest.StackAr((int) '#');
        boolean boolean95 = stackAr93.equals((java.lang.Object) (byte) 100);
        boolean boolean96 = stackAr85.equals((java.lang.Object) stackAr93);
        boolean boolean97 = stackAr85.isEmpty();
        boolean boolean98 = stackAr85.isFull();
        boolean boolean99 = stackAr1.equals((java.lang.Object) stackAr85);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[]" + "'", str22, "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + obj37 + "' != '" + "[]" + "'", obj37, "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + obj57 + "' != '" + '#' + "'", obj57, '#');
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[]" + "'", str61, "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "[]" + "'", str80, "[]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        stackAr8.push((java.lang.Object) "[]");
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj14 = stackAr8.pop();
        org.autotest.StackAr stackAr16 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean17 = stackAr16.isFull();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr19.isEmpty();
        boolean boolean21 = stackAr19.isEmpty();
        int int22 = stackAr19.size();
        int int23 = stackAr19.size();
        boolean boolean24 = stackAr16.equals((java.lang.Object) stackAr19);
        boolean boolean25 = stackAr8.equals((java.lang.Object) boolean24);
        boolean boolean26 = stackAr8.isFull();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        java.lang.Object obj32 = new java.lang.Object();
        stackAr28.push(obj32);
        java.lang.String str34 = stackAr28.toString();
        boolean boolean35 = stackAr28.isEmpty();
        org.autotest.StackAr stackAr37 = new org.autotest.StackAr((int) '#');
        boolean boolean39 = stackAr37.equals((java.lang.Object) (byte) 1);
        boolean boolean40 = stackAr37.isFull();
        java.lang.Object obj41 = new java.lang.Object();
        stackAr37.push(obj41);
        boolean boolean43 = stackAr37.isFull();
        org.autotest.StackAr stackAr45 = new org.autotest.StackAr((int) '#');
        boolean boolean47 = stackAr45.equals((java.lang.Object) (byte) 1);
        boolean boolean48 = stackAr45.isFull();
        java.lang.Object obj49 = new java.lang.Object();
        stackAr45.push(obj49);
        boolean boolean51 = stackAr45.isFull();
        java.lang.String str52 = stackAr45.toString();
        boolean boolean53 = stackAr37.equals((java.lang.Object) str52);
        stackAr28.push((java.lang.Object) stackAr37);
        int int55 = stackAr37.size();
        java.lang.Object[] objArray63 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean64 = org.autotest.StackAr.repOkFunction((int) 'a', objArray63);
        boolean boolean65 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray63);
        boolean boolean66 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray63);
        boolean boolean67 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray63);
        java.lang.Class<?> wildcardClass68 = objArray63.getClass();
        boolean boolean69 = stackAr37.equals((java.lang.Object) wildcardClass68);
        java.lang.Object obj70 = stackAr37.top();
        boolean boolean71 = stackAr8.equals(obj70);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + "[]" + "'", obj14, "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr1.toString();
        java.lang.Object obj16 = stackAr1.pop();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean20 = stackAr18.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        int int24 = stackAr22.size();
        boolean boolean26 = stackAr22.equals((java.lang.Object) 100L);
        boolean boolean27 = stackAr22.isFull();
        stackAr18.push((java.lang.Object) stackAr22);
        java.lang.Object obj29 = stackAr18.top();
        stackAr1.push((java.lang.Object) stackAr18);
        org.autotest.StackAr stackAr32 = new org.autotest.StackAr((int) '#');
        boolean boolean33 = stackAr32.isEmpty();
        boolean boolean35 = stackAr32.equals((java.lang.Object) '#');
        boolean boolean37 = stackAr32.equals((java.lang.Object) "hi!");
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        stackAr39.push((java.lang.Object) '4');
        java.lang.String str45 = stackAr39.toString();
        java.lang.Object obj46 = stackAr39.top();
        stackAr32.push((java.lang.Object) stackAr39);
        stackAr18.push((java.lang.Object) stackAr32);
        org.autotest.StackAr stackAr50 = new org.autotest.StackAr((int) '#');
        boolean boolean52 = stackAr50.equals((java.lang.Object) (byte) 1);
        boolean boolean53 = stackAr50.isFull();
        java.lang.String str54 = stackAr50.toString();
        int int55 = stackAr50.size();
        boolean boolean56 = stackAr50.isFull();
        stackAr18.push((java.lang.Object) stackAr50);
        java.lang.Object obj58 = stackAr18.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[[4]]" + "'", str15, "[[4]]");
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "[4]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "[4]" + "'", str45, "[4]");
        org.junit.Assert.assertEquals("'" + obj46 + "' != '" + '4' + "'", obj46, '4');
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "[]");
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        boolean boolean8 = stackAr1.equals((java.lang.Object) 100);
        org.autotest.StackAr stackAr10 = new org.autotest.StackAr((int) '#');
        boolean boolean12 = stackAr10.equals((java.lang.Object) (byte) 1);
        boolean boolean13 = stackAr10.isFull();
        boolean boolean14 = stackAr10.isFull();
        int int15 = stackAr10.size();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr17.equals((java.lang.Object) (byte) 1);
        stackAr17.push((java.lang.Object) "[]");
        stackAr10.push((java.lang.Object) stackAr17);
        boolean boolean23 = stackAr1.equals((java.lang.Object) stackAr17);
        boolean boolean24 = stackAr17.isFull();
        boolean boolean25 = stackAr17.isFull();
        int int26 = stackAr17.size();
        java.lang.Object obj27 = stackAr17.pop();
        org.autotest.StackAr stackAr29 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr29.equals((java.lang.Object) (byte) 1);
        stackAr29.push((java.lang.Object) "[]");
        int int34 = stackAr29.size();
        java.lang.String str35 = stackAr29.toString();
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr();
        int int37 = stackAr36.size();
        java.lang.Object[] objArray43 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean44 = org.autotest.StackAr.repOkFunction((int) 'a', objArray43);
        boolean boolean45 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray43);
        boolean boolean46 = stackAr36.equals((java.lang.Object) (byte) 10);
        java.lang.String str47 = stackAr36.toString();
        stackAr29.push((java.lang.Object) str47);
        org.autotest.StackAr stackAr50 = new org.autotest.StackAr((int) '#');
        boolean boolean51 = stackAr50.isEmpty();
        int int52 = stackAr50.size();
        boolean boolean53 = stackAr50.isEmpty();
        int int54 = stackAr50.size();
        boolean boolean55 = stackAr50.isFull();
        boolean boolean56 = stackAr29.equals((java.lang.Object) boolean55);
        java.lang.Object obj57 = null;
        stackAr29.push(obj57);
        java.lang.Object obj59 = stackAr29.top();
        boolean boolean60 = stackAr17.equals(obj59);
        boolean boolean61 = stackAr17.isFull();
        org.autotest.StackAr stackAr63 = new org.autotest.StackAr((int) '#');
        boolean boolean65 = stackAr63.equals((java.lang.Object) (byte) 1);
        boolean boolean66 = stackAr63.isFull();
        stackAr63.push((java.lang.Object) '4');
        java.lang.String str69 = stackAr63.toString();
        java.lang.Object obj70 = stackAr63.top();
        boolean boolean71 = stackAr17.equals((java.lang.Object) stackAr63);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + "[]" + "'", obj27, "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[[]]" + "'", str35, "[[]]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "[]" + "'", str47, "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "[4]" + "'", str69, "[4]");
        org.junit.Assert.assertEquals("'" + obj70 + "' != '" + '4' + "'", obj70, '4');
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '4');
        boolean boolean2 = stackAr1.isFull();
        org.autotest.StackAr stackAr4 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr4.equals((java.lang.Object) (byte) 1);
        boolean boolean7 = stackAr4.isFull();
        boolean boolean8 = stackAr4.isFull();
        int int9 = stackAr4.size();
        org.autotest.StackAr stackAr11 = new org.autotest.StackAr((int) '#');
        boolean boolean13 = stackAr11.equals((java.lang.Object) (byte) 1);
        stackAr11.push((java.lang.Object) "[]");
        stackAr4.push((java.lang.Object) stackAr11);
        java.lang.Object obj17 = stackAr11.pop();
        org.autotest.StackAr stackAr19 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean20 = stackAr19.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean23 = stackAr22.isEmpty();
        boolean boolean24 = stackAr22.isEmpty();
        int int25 = stackAr22.size();
        int int26 = stackAr22.size();
        boolean boolean27 = stackAr19.equals((java.lang.Object) stackAr22);
        boolean boolean28 = stackAr11.equals((java.lang.Object) boolean27);
        org.autotest.StackAr stackAr30 = new org.autotest.StackAr((int) '#');
        boolean boolean31 = stackAr30.isEmpty();
        boolean boolean32 = stackAr30.isEmpty();
        int int33 = stackAr30.size();
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean36 = stackAr35.isEmpty();
        stackAr30.push((java.lang.Object) stackAr35);
        stackAr11.push((java.lang.Object) stackAr35);
        boolean boolean39 = stackAr1.equals((java.lang.Object) stackAr11);
        java.lang.Class<?> wildcardClass40 = stackAr11.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "[]" + "'", obj17, "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr1.equals(obj13);
        org.autotest.StackAr stackAr20 = new org.autotest.StackAr((int) '#');
        boolean boolean22 = stackAr20.equals((java.lang.Object) (byte) 1);
        boolean boolean23 = stackAr20.isFull();
        java.lang.String str24 = stackAr20.toString();
        java.lang.Object[] objArray32 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) 'a', objArray32);
        boolean boolean34 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray32);
        boolean boolean35 = org.autotest.StackAr.repOkFunction(100, objArray32);
        boolean boolean36 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray32);
        stackAr20.push((java.lang.Object) objArray32);
        boolean boolean38 = org.autotest.StackAr.repOkFunction(10, objArray32);
        boolean boolean39 = org.autotest.StackAr.repOkFunction(0, objArray32);
        boolean boolean40 = org.autotest.StackAr.repOkFunction((int) ' ', objArray32);
        stackAr1.push((java.lang.Object) ' ');
        org.autotest.StackAr stackAr43 = new org.autotest.StackAr((int) '#');
        boolean boolean44 = stackAr43.isEmpty();
        int int45 = stackAr43.size();
        boolean boolean46 = stackAr43.isEmpty();
        java.lang.Object[] objArray49 = new java.lang.Object[] { 1.0d };
        boolean boolean50 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray49);
        java.lang.Class<?> wildcardClass51 = objArray49.getClass();
        boolean boolean52 = stackAr43.equals((java.lang.Object) wildcardClass51);
        boolean boolean53 = stackAr43.isFull();
        java.lang.String str54 = stackAr43.toString();
        java.lang.String str55 = stackAr43.toString();
        stackAr1.push((java.lang.Object) str55);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[]" + "'", str54, "[]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "[]" + "'", str55, "[]");
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        stackAr1.push((java.lang.Object) "[]");
        int int6 = stackAr1.size();
        boolean boolean8 = stackAr1.equals((java.lang.Object) 'a');
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        stackAr12.push((java.lang.Object) "[]");
        java.lang.Object obj17 = stackAr12.top();
        java.lang.Object obj18 = stackAr12.top();
        java.lang.String str19 = stackAr12.toString();
        java.lang.String str20 = stackAr12.toString();
        int int21 = stackAr12.size();
        java.lang.String str22 = stackAr12.toString();
        boolean boolean23 = stackAr1.equals((java.lang.Object) str22);
        org.autotest.StackAr stackAr24 = new org.autotest.StackAr();
        int int25 = stackAr24.size();
        java.lang.Object[] objArray31 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) 'a', objArray31);
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray31);
        boolean boolean34 = stackAr24.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr36 = new org.autotest.StackAr((int) '#');
        boolean boolean38 = stackAr36.equals((java.lang.Object) (byte) 1);
        boolean boolean39 = stackAr36.isFull();
        java.lang.Object obj40 = new java.lang.Object();
        stackAr36.push(obj40);
        boolean boolean43 = stackAr36.equals((java.lang.Object) (byte) -1);
        boolean boolean44 = stackAr24.equals((java.lang.Object) boolean43);
        boolean boolean45 = stackAr24.isFull();
        org.autotest.StackAr stackAr47 = new org.autotest.StackAr((int) '#');
        boolean boolean48 = stackAr47.isEmpty();
        int int49 = stackAr47.size();
        stackAr47.push((java.lang.Object) (byte) 100);
        stackAr24.push((java.lang.Object) (byte) 100);
        stackAr24.push((java.lang.Object) 10.0f);
        java.lang.Object obj55 = stackAr24.top();
        stackAr1.push(obj55);
        org.autotest.StackAr stackAr58 = new org.autotest.StackAr((int) '#');
        boolean boolean59 = stackAr58.isEmpty();
        int int60 = stackAr58.size();
        boolean boolean61 = stackAr58.isEmpty();
        boolean boolean63 = stackAr58.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr65 = new org.autotest.StackAr((int) '#');
        boolean boolean67 = stackAr65.equals((java.lang.Object) (byte) 1);
        boolean boolean68 = stackAr65.isFull();
        stackAr65.push((java.lang.Object) '4');
        stackAr58.push((java.lang.Object) stackAr65);
        java.lang.String str72 = stackAr65.toString();
        java.lang.Object obj73 = stackAr65.pop();
        java.lang.String str74 = stackAr65.toString();
        boolean boolean75 = stackAr1.equals((java.lang.Object) str74);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + "[]" + "'", obj17, "[]");
        org.junit.Assert.assertEquals("'" + obj18 + "' != '" + "[]" + "'", obj18, "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "[[]]" + "'", str19, "[[]]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "[[]]" + "'", str20, "[[]]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "[[]]" + "'", str22, "[[]]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + obj55 + "' != '" + 10.0f + "'", obj55, 10.0f);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "[4]" + "'", str72, "[4]");
        org.junit.Assert.assertEquals("'" + obj73 + "' != '" + '4' + "'", obj73, '4');
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[]" + "'", str74, "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.equals((java.lang.Object) 0.0f);
        int int5 = stackAr1.size();
        int int6 = stackAr1.size();
        boolean boolean7 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean11 = stackAr9.equals((java.lang.Object) (byte) 1);
        boolean boolean12 = stackAr9.isFull();
        java.lang.Object obj13 = new java.lang.Object();
        stackAr9.push(obj13);
        boolean boolean15 = stackAr9.isFull();
        java.lang.String str16 = stackAr9.toString();
        java.lang.Object obj17 = stackAr9.top();
        java.lang.Object[] objArray24 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) 'a', objArray24);
        boolean boolean26 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray24);
        boolean boolean27 = org.autotest.StackAr.repOkFunction((-1), objArray24);
        boolean boolean28 = stackAr9.equals((java.lang.Object) objArray24);
        boolean boolean29 = stackAr1.equals((java.lang.Object) objArray24);
        java.lang.String str30 = stackAr1.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "[]" + "'", str30, "[]");
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) '4');
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = new java.lang.Object();
        stackAr8.push(obj12);
        java.lang.String str14 = stackAr8.toString();
        boolean boolean15 = stackAr8.isEmpty();
        boolean boolean16 = stackAr1.equals((java.lang.Object) boolean15);
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean21 = stackAr18.isEmpty();
        boolean boolean23 = stackAr18.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        stackAr25.push((java.lang.Object) '4');
        stackAr18.push((java.lang.Object) stackAr25);
        boolean boolean32 = stackAr18.isEmpty();
        org.autotest.StackAr stackAr34 = new org.autotest.StackAr((int) '#');
        boolean boolean35 = stackAr34.isEmpty();
        int int36 = stackAr34.size();
        boolean boolean37 = stackAr34.isFull();
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean41 = stackAr39.equals((java.lang.Object) (byte) 1);
        boolean boolean42 = stackAr39.isFull();
        java.lang.Object obj43 = new java.lang.Object();
        stackAr39.push(obj43);
        boolean boolean45 = stackAr39.isFull();
        java.lang.String str46 = stackAr39.toString();
        stackAr39.push((java.lang.Object) (byte) 0);
        stackAr34.push((java.lang.Object) stackAr39);
        boolean boolean50 = stackAr18.equals((java.lang.Object) stackAr39);
        stackAr1.push((java.lang.Object) stackAr18);
        int int52 = stackAr18.size();
        int int53 = stackAr18.size();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        java.lang.Object[] objArray9 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean10 = org.autotest.StackAr.repOkFunction((int) 'a', objArray9);
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray9);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (byte) 1, objArray9);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(1, objArray9);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray9);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray9);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        int int9 = stackAr1.size();
        java.lang.String str10 = stackAr1.toString();
        int int11 = stackAr1.size();
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object[] objArray21 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean22 = org.autotest.StackAr.repOkFunction((int) 'a', objArray21);
        boolean boolean23 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray21);
        boolean boolean24 = org.autotest.StackAr.repOkFunction(100, objArray21);
        boolean boolean25 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray21);
        boolean boolean26 = org.autotest.StackAr.repOkFunction((int) '#', objArray21);
        boolean boolean27 = stackAr1.equals((java.lang.Object) objArray21);
        boolean boolean28 = stackAr1.isFull();
        java.lang.Object obj29 = stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        java.lang.Object[] objArray11 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) 'a', objArray11);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray11);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(100, objArray11);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray11);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray11);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) ' ', objArray11);
        boolean boolean18 = org.autotest.StackAr.repOkFunction(4, objArray11);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((int) (byte) -1, objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.String str5 = stackAr1.toString();
        int int6 = stackAr1.size();
        java.lang.Object[] objArray15 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) 'a', objArray15);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray15);
        boolean boolean18 = org.autotest.StackAr.repOkFunction(100, objArray15);
        boolean boolean19 = org.autotest.StackAr.repOkFunction(100, objArray15);
        boolean boolean20 = org.autotest.StackAr.repOkFunction(100, objArray15);
        boolean boolean21 = stackAr1.equals((java.lang.Object) 100);
        boolean boolean22 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "[]" + "'", str5, "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        java.lang.Object[] objArray10 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean11 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray10);
        boolean boolean13 = org.autotest.StackAr.repOkFunction(100, objArray10);
        boolean boolean14 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray10);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray10);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) 'a', objArray10);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) (short) 10, objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        java.lang.Object[] objArray11 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean12 = org.autotest.StackAr.repOkFunction((int) 'a', objArray11);
        boolean boolean13 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray11);
        boolean boolean14 = org.autotest.StackAr.repOkFunction(100, objArray11);
        boolean boolean15 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray11);
        boolean boolean16 = org.autotest.StackAr.repOkFunction((int) (byte) 100, objArray11);
        boolean boolean17 = org.autotest.StackAr.repOkFunction((int) ' ', objArray11);
        boolean boolean18 = org.autotest.StackAr.repOkFunction((int) (short) 0, objArray11);
        boolean boolean19 = org.autotest.StackAr.repOkFunction((-1), objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        int int6 = stackAr1.size();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        boolean boolean12 = stackAr9.equals((java.lang.Object) '#');
        boolean boolean14 = stackAr9.equals((java.lang.Object) "hi!");
        boolean boolean15 = stackAr9.isFull();
        int int16 = stackAr9.size();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) (short) 1);
        boolean boolean19 = stackAr18.isFull();
        boolean boolean20 = stackAr9.equals((java.lang.Object) stackAr18);
        boolean boolean21 = stackAr9.isEmpty();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        boolean boolean26 = stackAr23.isFull();
        org.autotest.StackAr stackAr28 = new org.autotest.StackAr((int) '#');
        boolean boolean30 = stackAr28.equals((java.lang.Object) (byte) 1);
        boolean boolean31 = stackAr28.isFull();
        java.lang.Object obj32 = new java.lang.Object();
        stackAr28.push(obj32);
        boolean boolean34 = stackAr28.isFull();
        java.lang.String str35 = stackAr28.toString();
        stackAr28.push((java.lang.Object) (byte) 0);
        stackAr23.push((java.lang.Object) stackAr28);
        boolean boolean39 = stackAr28.isFull();
        org.autotest.StackAr stackAr41 = new org.autotest.StackAr((int) '#');
        boolean boolean43 = stackAr41.equals((java.lang.Object) (byte) 1);
        boolean boolean44 = stackAr41.isFull();
        java.lang.Object obj45 = new java.lang.Object();
        stackAr41.push(obj45);
        java.lang.String str47 = stackAr41.toString();
        boolean boolean48 = stackAr41.isEmpty();
        boolean boolean49 = stackAr41.isFull();
        stackAr28.push((java.lang.Object) boolean49);
        boolean boolean51 = stackAr28.isFull();
        java.lang.Class<?> wildcardClass52 = stackAr28.getClass();
        stackAr9.push((java.lang.Object) wildcardClass52);
        stackAr1.push((java.lang.Object) stackAr9);
        org.autotest.StackAr stackAr56 = new org.autotest.StackAr((int) '#');
        stackAr1.push((java.lang.Object) stackAr56);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj3 = stackAr1.top();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        java.lang.Object[] objArray5 = new java.lang.Object[] { 1.0d };
        boolean boolean6 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray5);
        boolean boolean7 = org.autotest.StackAr.repOkFunction((int) '4', objArray5);
        boolean boolean8 = org.autotest.StackAr.repOkFunction(10, objArray5);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray5);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[1.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 100);
        org.autotest.StackAr stackAr5 = new org.autotest.StackAr((int) '#');
        boolean boolean6 = stackAr5.isEmpty();
        int int7 = stackAr5.size();
        boolean boolean9 = stackAr5.equals((java.lang.Object) 100L);
        boolean boolean10 = stackAr5.isFull();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean12 = stackAr1.isFull();
        java.lang.Object obj13 = stackAr1.pop();
        boolean boolean14 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = new java.lang.Object();
        stackAr1.push(obj5);
        boolean boolean7 = stackAr1.isFull();
        java.lang.String str8 = stackAr1.toString();
        int int9 = stackAr1.size();
        java.lang.String str10 = stackAr1.toString();
        java.lang.Object obj11 = stackAr1.top();
        boolean boolean12 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.autotest.StackAr stackAr0 = new org.autotest.StackAr();
        int int1 = stackAr0.size();
        java.lang.Object[] objArray7 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean8 = org.autotest.StackAr.repOkFunction((int) 'a', objArray7);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray7);
        boolean boolean10 = stackAr0.equals((java.lang.Object) (byte) 10);
        org.autotest.StackAr stackAr12 = new org.autotest.StackAr((int) '#');
        boolean boolean14 = stackAr12.equals((java.lang.Object) (byte) 1);
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = new java.lang.Object();
        stackAr12.push(obj16);
        boolean boolean19 = stackAr12.equals((java.lang.Object) (byte) -1);
        boolean boolean20 = stackAr0.equals((java.lang.Object) boolean19);
        boolean boolean21 = stackAr0.isFull();
        org.autotest.StackAr stackAr23 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr23.isEmpty();
        int int25 = stackAr23.size();
        stackAr23.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) (byte) 100);
        stackAr0.push((java.lang.Object) 10.0f);
        boolean boolean31 = stackAr0.isEmpty();
        boolean boolean32 = stackAr0.isEmpty();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        java.lang.Object[] objArray6 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean7 = org.autotest.StackAr.repOkFunction((int) 'a', objArray6);
        boolean boolean8 = org.autotest.StackAr.repOkFunction(0, objArray6);
        boolean boolean9 = org.autotest.StackAr.repOkFunction((int) (short) 1, objArray6);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) (short) 1);
        java.lang.String str9 = stackAr8.toString();
        boolean boolean10 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) 1);
        boolean boolean13 = stackAr8.isEmpty();
        boolean boolean14 = stackAr1.equals((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr8.top();
        boolean boolean16 = stackAr8.isFull();
        java.lang.Object obj17 = stackAr8.pop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "[]" + "'", str9, "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj15 + "' != '" + 1 + "'", obj15, 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + 1 + "'", obj17, 1);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean20 = stackAr17.isFull();
        org.autotest.StackAr stackAr22 = new org.autotest.StackAr((int) '#');
        boolean boolean24 = stackAr22.equals((java.lang.Object) (byte) 1);
        boolean boolean25 = stackAr22.isFull();
        java.lang.Object obj26 = new java.lang.Object();
        stackAr22.push(obj26);
        boolean boolean28 = stackAr22.isFull();
        java.lang.String str29 = stackAr22.toString();
        stackAr22.push((java.lang.Object) (byte) 0);
        stackAr17.push((java.lang.Object) stackAr22);
        boolean boolean33 = stackAr1.equals((java.lang.Object) stackAr22);
        org.autotest.StackAr stackAr35 = new org.autotest.StackAr(0);
        int int36 = stackAr35.size();
        boolean boolean37 = stackAr22.equals((java.lang.Object) stackAr35);
        org.autotest.StackAr stackAr39 = new org.autotest.StackAr((int) '#');
        boolean boolean40 = stackAr39.isEmpty();
        int int41 = stackAr39.size();
        boolean boolean42 = stackAr39.isEmpty();
        int int43 = stackAr39.size();
        boolean boolean44 = stackAr22.equals((java.lang.Object) int43);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) '4');
        java.lang.Object obj13 = null;
        boolean boolean14 = stackAr7.equals(obj13);
        stackAr1.push((java.lang.Object) stackAr7);
        boolean boolean16 = stackAr1.isEmpty();
        int int17 = stackAr1.size();
        boolean boolean18 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        int int4 = stackAr1.size();
        int int5 = stackAr1.size();
        org.autotest.StackAr stackAr7 = new org.autotest.StackAr((int) '#');
        boolean boolean9 = stackAr7.equals((java.lang.Object) (byte) 1);
        boolean boolean10 = stackAr7.isFull();
        stackAr7.push((java.lang.Object) '4');
        java.lang.Object obj13 = null;
        boolean boolean14 = stackAr7.equals(obj13);
        stackAr1.push((java.lang.Object) stackAr7);
        org.autotest.StackAr stackAr17 = new org.autotest.StackAr((int) '#');
        boolean boolean18 = stackAr17.isEmpty();
        int int19 = stackAr17.size();
        boolean boolean21 = stackAr17.equals((java.lang.Object) 100L);
        boolean boolean22 = stackAr7.equals((java.lang.Object) stackAr17);
        boolean boolean23 = stackAr17.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean15 = stackAr1.isEmpty();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isEmpty();
        java.lang.Object obj18 = stackAr1.pop();
        boolean boolean20 = stackAr1.equals((java.lang.Object) 0);
        boolean boolean21 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj22 = stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "[4]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "[4]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "[4]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean2 = stackAr1.isEmpty();
        int int3 = stackAr1.size();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr8 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr8.equals((java.lang.Object) (byte) 1);
        boolean boolean11 = stackAr8.isFull();
        stackAr8.push((java.lang.Object) '4');
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.String str15 = stackAr8.toString();
        int int16 = stackAr8.size();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) (byte) 0);
        boolean boolean19 = stackAr8.equals((java.lang.Object) (byte) 0);
        int int20 = stackAr8.size();
        java.lang.Object[] objArray31 = new java.lang.Object[] { "[]", 0, (byte) 1 };
        boolean boolean32 = org.autotest.StackAr.repOkFunction((int) 'a', objArray31);
        boolean boolean33 = org.autotest.StackAr.repOkFunction((int) (byte) 10, objArray31);
        boolean boolean34 = org.autotest.StackAr.repOkFunction(100, objArray31);
        boolean boolean35 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray31);
        boolean boolean36 = org.autotest.StackAr.repOkFunction((int) (byte) 0, objArray31);
        boolean boolean37 = org.autotest.StackAr.repOkFunction((int) (short) -1, objArray31);
        boolean boolean38 = org.autotest.StackAr.repOkFunction((int) (short) 100, objArray31);
        boolean boolean39 = stackAr8.equals((java.lang.Object) objArray31);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[4]" + "'", str15, "[4]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[[], 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.autotest.StackAr stackAr1 = new org.autotest.StackAr((int) '#');
        boolean boolean3 = stackAr1.equals((java.lang.Object) (byte) 1);
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        int int7 = stackAr1.size();
        org.autotest.StackAr stackAr9 = new org.autotest.StackAr((int) '#');
        boolean boolean10 = stackAr9.isEmpty();
        int int11 = stackAr9.size();
        boolean boolean12 = stackAr9.isEmpty();
        boolean boolean13 = stackAr1.equals((java.lang.Object) stackAr9);
        org.autotest.StackAr stackAr15 = new org.autotest.StackAr(0);
        int int16 = stackAr15.size();
        org.autotest.StackAr stackAr18 = new org.autotest.StackAr((int) '#');
        boolean boolean19 = stackAr18.isEmpty();
        int int20 = stackAr18.size();
        boolean boolean21 = stackAr18.isEmpty();
        boolean boolean23 = stackAr18.equals((java.lang.Object) (short) -1);
        org.autotest.StackAr stackAr25 = new org.autotest.StackAr((int) '#');
        boolean boolean27 = stackAr25.equals((java.lang.Object) (byte) 1);
        boolean boolean28 = stackAr25.isFull();
        stackAr25.push((java.lang.Object) '4');
        stackAr18.push((java.lang.Object) stackAr25);
        boolean boolean32 = stackAr18.isFull();
        boolean boolean34 = stackAr18.equals((java.lang.Object) 100.0d);
        boolean boolean35 = stackAr15.equals((java.lang.Object) 100.0d);
        stackAr9.push((java.lang.Object) 100.0d);
        boolean boolean37 = stackAr9.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }
}

